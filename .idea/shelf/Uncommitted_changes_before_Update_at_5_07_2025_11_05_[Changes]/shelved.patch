Index: arsiv_uygulamasi/lib/services/veritabani_servisi.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'dart:async';\r\nimport 'dart:io';\r\nimport 'package:sqflite/sqflite.dart';\r\nimport 'package:path/path.dart';\r\nimport 'package:path_provider/path_provider.dart';\r\nimport '../models/belge_modeli.dart';\r\nimport '../models/kategori_modeli.dart';\r\nimport '../models/kisi_modeli.dart';\r\nimport '../models/senkron_log_modeli.dart';\r\nimport '../utils/sabitler.dart';\r\n\r\n// SQLite veritabanı operasyonları\r\nclass VeriTabaniServisi {\r\n  static Database? _database;\r\n  static final VeriTabaniServisi _instance = VeriTabaniServisi._internal();\r\n\r\n  factory VeriTabaniServisi() => _instance;\r\n  VeriTabaniServisi._internal();\r\n\r\n  // Veritabanı bağlantısı ve tablo oluşturma\r\n  Future<Database> get database async {\r\n    if (_database != null) return _database!;\r\n    _database = await _initDatabase();\r\n    return _database!;\r\n  }\r\n\r\n  Future<Database> _initDatabase() async {\r\n    Directory documentsDirectory = await getApplicationDocumentsDirectory();\r\n    String path = join(documentsDirectory.path, Sabitler.VERITABANI_ADI);\r\n\r\n    return await openDatabase(\r\n      path,\r\n      version: Sabitler.VERITABANI_VERSIYONU,\r\n      onCreate: _onCreate,\r\n      onUpgrade: _onUpgrade,\r\n    );\r\n  }\r\n\r\n  Future<void> _onCreate(Database db, int version) async {\r\n    // Kişiler tablosu\r\n    await db.execute('''\r\n      CREATE TABLE kisiler (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        ad TEXT NOT NULL,\r\n        soyad TEXT NOT NULL,\r\n        olusturma_tarihi TEXT NOT NULL,\r\n        guncelleme_tarihi TEXT NOT NULL,\r\n        aktif INTEGER DEFAULT 1\r\n      )\r\n    ''');\r\n\r\n    // Kategoriler tablosu\r\n    await db.execute('''\r\n      CREATE TABLE kategoriler (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        kategori_adi TEXT NOT NULL UNIQUE,\r\n        renk_kodu TEXT DEFAULT '#2196F3',\r\n        simge_kodu TEXT DEFAULT 'folder',\r\n        aciklama TEXT,\r\n        olusturma_tarihi TEXT NOT NULL,\r\n        aktif INTEGER DEFAULT 1\r\n      )\r\n    ''');\r\n\r\n    // Belgeler tablosu\r\n    await db.execute('''\r\n      CREATE TABLE belgeler (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        dosya_adi TEXT NOT NULL,\r\n        orijinal_dosya_adi TEXT NOT NULL,\r\n        dosya_yolu TEXT NOT NULL,\r\n        dosya_boyutu INTEGER NOT NULL,\r\n        dosya_tipi TEXT NOT NULL,\r\n        dosya_hash TEXT UNIQUE NOT NULL,\r\n        kategori_id INTEGER,\r\n        kisi_id INTEGER,\r\n        baslik TEXT,\r\n        aciklama TEXT,\r\n        etiketler TEXT,\r\n        olusturma_tarihi TEXT NOT NULL,\r\n        guncelleme_tarihi TEXT NOT NULL,\r\n        son_erisim_tarihi TEXT,\r\n        aktif INTEGER DEFAULT 1,\r\n        senkron_durumu INTEGER DEFAULT 0,\r\n        versiyon_numarasi INTEGER DEFAULT 1,\r\n        metadata_hash TEXT,\r\n        son_metadata_guncelleme TEXT,\r\n        FOREIGN KEY (kategori_id) REFERENCES kategoriler(id),\r\n        FOREIGN KEY (kisi_id) REFERENCES kisiler(id)\r\n      )\r\n    ''');\r\n\r\n    // Senkron logları tablosu\r\n    await db.execute('''\r\n      CREATE TABLE senkron_logları (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        belge_id INTEGER,\r\n        islem_tipi TEXT NOT NULL,\r\n        kaynak_cihaz TEXT NOT NULL,\r\n        hedef_cihaz TEXT NOT NULL,\r\n        islem_tarihi TEXT NOT NULL,\r\n        durum TEXT DEFAULT 'BEKLEMEDE',\r\n        hata_mesaji TEXT,\r\n        FOREIGN KEY (belge_id) REFERENCES belgeler(id)\r\n      )\r\n    ''');\r\n\r\n    // Senkronizasyon durumu tablosu (raporda belirtilen)\r\n    await db.execute('''\r\n      CREATE TABLE senkron_state (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        dosya_hash TEXT NOT NULL UNIQUE,\r\n        son_sync_zamani TEXT NOT NULL,\r\n        sync_durumu TEXT NOT NULL DEFAULT 'PENDING',\r\n        cihaz_id TEXT,\r\n        metadata_hash TEXT,\r\n        olusturma_tarihi TEXT NOT NULL\r\n      )\r\n    ''');\r\n\r\n    // Belge versiyonları tablosu (raporda belirtilen)\r\n    await db.execute('''\r\n      CREATE TABLE belge_versiyonlari (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        belge_id INTEGER NOT NULL,\r\n        versiyon_numarasi INTEGER NOT NULL,\r\n        dosya_hash TEXT NOT NULL,\r\n        metadata_hash TEXT,\r\n        degisiklik_aciklamasi TEXT,\r\n        olusturan_cihaz TEXT,\r\n        olusturma_tarihi TEXT NOT NULL,\r\n        FOREIGN KEY (belge_id) REFERENCES belgeler(id)\r\n      )\r\n    ''');\r\n\r\n    // Metadata değişiklikleri tablosu (raporda belirtilen)\r\n    await db.execute('''\r\n      CREATE TABLE metadata_degisiklikleri (\r\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n        entity_type TEXT NOT NULL,\r\n        entity_id INTEGER NOT NULL,\r\n        degisiklik_tipi TEXT NOT NULL,\r\n        eski_deger TEXT,\r\n        yeni_deger TEXT,\r\n        degisiklik_zamani TEXT NOT NULL,\r\n        cihaz_id TEXT,\r\n        sync_edildi INTEGER DEFAULT 0\r\n      )\r\n    ''');\r\n\r\n    // İndeksler\r\n    await _createIndexes(db);\r\n\r\n    // Varsayılan kategorileri ekle\r\n    await _insertDefaultCategories(db);\r\n  }\r\n\r\n  Future<void> _onUpgrade(Database db, int oldVersion, int newVersion) async {\r\n    if (oldVersion < 2) {\r\n      // Kişiler tablosunu ekle\r\n      await db.execute('''\r\n        CREATE TABLE kisiler (\r\n          id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n          ad TEXT NOT NULL,\r\n          soyad TEXT NOT NULL,\r\n          olusturma_tarihi TEXT NOT NULL,\r\n          guncelleme_tarihi TEXT NOT NULL,\r\n          aktif INTEGER DEFAULT 1\r\n        )\r\n      ''');\r\n\r\n      // Belgeler tablosuna kisi_id sütunu ekle\r\n      await db.execute('ALTER TABLE belgeler ADD COLUMN kisi_id INTEGER');\r\n    }\r\n\r\n    if (oldVersion < 3) {\r\n      // metadata_degisiklikleri tablosunda sync_durumu kolonu sync_edildi olarak değiştir\r\n      try {\r\n        // Önce kolonu kontrol et\r\n        final columns = await db.rawQuery(\r\n          \"PRAGMA table_info(metadata_degisiklikleri)\",\r\n        );\r\n        final hasOldColumn = columns.any((col) => col['name'] == 'sync_durumu');\r\n\r\n        if (hasOldColumn) {\r\n          // Eski tabloyu yedekle\r\n          await db.execute('''\r\n            CREATE TABLE metadata_degisiklikleri_backup AS \r\n            SELECT * FROM metadata_degisiklikleri\r\n          ''');\r\n\r\n          // Eski tabloyu sil\r\n          await db.execute('DROP TABLE metadata_degisiklikleri');\r\n\r\n          // Yeni tabloyu oluştur\r\n          await db.execute('''\r\n            CREATE TABLE metadata_degisiklikleri (\r\n              id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n              entity_type TEXT NOT NULL,\r\n              entity_id INTEGER NOT NULL,\r\n              degisiklik_tipi TEXT NOT NULL,\r\n              eski_deger TEXT,\r\n              yeni_deger TEXT,\r\n              degisiklik_zamani TEXT NOT NULL,\r\n              cihaz_id TEXT,\r\n              sync_edildi INTEGER DEFAULT 0\r\n            )\r\n          ''');\r\n\r\n          // Verileri geri aktar (sync_durumu -> sync_edildi conversion)\r\n          await db.execute('''\r\n            INSERT INTO metadata_degisiklikleri \r\n            (id, entity_type, entity_id, degisiklik_tipi, eski_deger, yeni_deger, degisiklik_zamani, cihaz_id, sync_edildi)\r\n            SELECT \r\n              id, entity_type, entity_id, degisiklik_tipi, eski_deger, yeni_deger, degisiklik_zamani, cihaz_id,\r\n              CASE WHEN sync_durumu = 'SYNCED' THEN 1 ELSE 0 END\r\n            FROM metadata_degisiklikleri_backup\r\n          ''');\r\n\r\n          // Backup tabloyu sil\r\n          await db.execute('DROP TABLE metadata_degisiklikleri_backup');\r\n\r\n          print(\r\n            '✅ metadata_degisiklikleri tablosu güncellendi (sync_durumu -> sync_edildi)',\r\n          );\r\n        }\r\n      } catch (e) {\r\n        print('⚠\uFE0F metadata_degisiklikleri migration hatası: $e');\r\n      }\r\n    }\r\n\r\n    if (oldVersion < 4) {\r\n      // Aggressive migration - metadata_degisiklikleri tablosunu tamamen yeniden oluştur\r\n      try {\r\n        print(\r\n          '\uD83D\uDD04 V4 Migration başlatılıyor - metadata_degisiklikleri yeniden oluşturuluyor...',\r\n        );\r\n\r\n        // Eski tabloyu tamamen sil\r\n        await db.execute('DROP TABLE IF EXISTS metadata_degisiklikleri');\r\n\r\n        // Yeni tabloyu doğru schema ile oluştur\r\n        await db.execute('''\r\n          CREATE TABLE metadata_degisiklikleri (\r\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n            entity_type TEXT NOT NULL,\r\n            entity_id INTEGER NOT NULL,\r\n            degisiklik_tipi TEXT NOT NULL,\r\n            eski_deger TEXT,\r\n            yeni_deger TEXT,\r\n            degisiklik_zamani TEXT NOT NULL,\r\n            cihaz_id TEXT,\r\n            sync_edildi INTEGER DEFAULT 0\r\n          )\r\n        ''');\r\n\r\n        // Indexleri de yeniden oluştur\r\n        await db.execute(\r\n          'CREATE INDEX IF NOT EXISTS idx_metadata_entity ON metadata_degisiklikleri(entity_type, entity_id)',\r\n        );\r\n        await db.execute(\r\n          'CREATE INDEX IF NOT EXISTS idx_metadata_zaman ON metadata_degisiklikleri(degisiklik_zamani)',\r\n        );\r\n        await db.execute(\r\n          'CREATE INDEX IF NOT EXISTS idx_metadata_sync ON metadata_degisiklikleri(sync_edildi)',\r\n        );\r\n\r\n        print('✅ metadata_degisiklikleri tablosu V4 ile yeniden oluşturuldu');\r\n      } catch (e) {\r\n        print('❌ V4 migration hatası: $e');\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> _createIndexes(Database db) async {\r\n    // Belgeler tablosu indeksleri\r\n    await db.execute('CREATE INDEX idx_belgeler_hash ON belgeler(dosya_hash)');\r\n    await db.execute(\r\n      'CREATE INDEX idx_belgeler_kategori ON belgeler(kategori_id)',\r\n    );\r\n    await db.execute(\r\n      'CREATE INDEX idx_belgeler_tarih ON belgeler(olusturma_tarihi)',\r\n    );\r\n    await db.execute('CREATE INDEX idx_belgeler_aktif ON belgeler(aktif)');\r\n    await db.execute(\r\n      'CREATE INDEX idx_senkron_durum ON belgeler(senkron_durumu)',\r\n    );\r\n    await db.execute(\r\n      'CREATE INDEX idx_belgeler_metadata_hash ON belgeler(metadata_hash)',\r\n    );\r\n    await db.execute(\r\n      'CREATE INDEX idx_belgeler_versiyon ON belgeler(versiyon_numarasi)',\r\n    );\r\n\r\n    // Senkron logları indeksleri\r\n    await db.execute(\r\n      'CREATE INDEX idx_senkron_tarih ON senkron_logları(islem_tarihi)',\r\n    );\r\n    await db.execute(\r\n      'CREATE INDEX idx_senkron_durum_log ON senkron_logları(durum)',\r\n    );\r\n\r\n    // Senkron state indeksleri\r\n    await db.execute(\r\n      'CREATE INDEX idx_sync_state_hash ON senkron_state(dosya_hash)',\r\n    );\r\n    await db.execute(\r\n      'CREATE INDEX idx_sync_state_durum ON senkron_state(sync_durumu)',\r\n    );\r\n    await db.execute(\r\n      'CREATE INDEX idx_sync_state_zaman ON senkron_state(son_sync_zamani)',\r\n    );\r\n\r\n    // Belge versiyonları indeksleri\r\n    await db.execute(\r\n      'CREATE INDEX idx_versiyon_belge ON belge_versiyonlari(belge_id)',\r\n    );\r\n    await db.execute(\r\n      'CREATE INDEX idx_versiyon_hash ON belge_versiyonlari(dosya_hash)',\r\n    );\r\n    await db.execute(\r\n      'CREATE INDEX idx_versiyon_tarih ON belge_versiyonlari(olusturma_tarihi)',\r\n    );\r\n\r\n    // Metadata değişiklikleri indeksleri\r\n    await db.execute(\r\n      'CREATE INDEX idx_metadata_entity ON metadata_degisiklikleri(entity_type, entity_id)',\r\n    );\r\n    await db.execute(\r\n      'CREATE INDEX idx_metadata_zaman ON metadata_degisiklikleri(degisiklik_zamani)',\r\n    );\r\n    await db.execute(\r\n      'CREATE INDEX idx_metadata_sync ON metadata_degisiklikleri(sync_edildi)',\r\n    );\r\n  }\r\n\r\n  Future<void> _insertDefaultCategories(Database db) async {\r\n    List<KategoriModeli> defaultCategories =\r\n        KategoriModeli.ontanimliKategoriler();\r\n\r\n    for (KategoriModeli kategori in defaultCategories) {\r\n      await db.insert('kategoriler', kategori.toMap());\r\n    }\r\n  }\r\n\r\n  Future<void> _ensureDefaultCategories(Database db) async {\r\n    List<KategoriModeli> defaultCategories =\r\n        KategoriModeli.ontanimliKategoriler();\r\n\r\n    // Mevcut kategori adlarını al\r\n    final existingMaps = await db.query(\r\n      'kategoriler',\r\n      columns: ['kategori_adi'],\r\n      where: 'aktif = ?',\r\n      whereArgs: [1],\r\n    );\r\n\r\n    Set<String> existingNames =\r\n        existingMaps.map((map) => map['kategori_adi'] as String).toSet();\r\n\r\n    print('Mevcut kategori adları: $existingNames');\r\n\r\n    // Eksik kategorileri ekle\r\n    for (KategoriModeli kategori in defaultCategories) {\r\n      if (!existingNames.contains(kategori.kategoriAdi)) {\r\n        print('Eksik kategori ekleniyor: ${kategori.kategoriAdi}');\r\n        await db.insert('kategoriler', kategori.toMap());\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> _dropAllTables(Database db) async {\r\n    await db.execute('DROP TABLE IF EXISTS metadata_degisiklikleri');\r\n    await db.execute('DROP TABLE IF EXISTS belge_versiyonlari');\r\n    await db.execute('DROP TABLE IF EXISTS senkron_state');\r\n    await db.execute('DROP TABLE IF EXISTS senkron_logları');\r\n    await db.execute('DROP TABLE IF EXISTS belgeler');\r\n    await db.execute('DROP TABLE IF EXISTS kategoriler');\r\n    await db.execute('DROP TABLE IF EXISTS kisiler');\r\n  }\r\n\r\n  // BELGE CRUD İŞLEMLERİ\r\n\r\n  // Belge ekleme\r\n  Future<int> belgeEkle(BelgeModeli belge) async {\r\n    final db = await database;\r\n    return await db.insert('belgeler', belge.toMap());\r\n  }\r\n\r\n  // Tüm belgeleri getir\r\n  Future<List<BelgeModeli>> belgeleriGetir({int? limit, int? offset}) async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query(\r\n      'belgeler',\r\n      where: 'aktif = ?',\r\n      whereArgs: [1],\r\n      orderBy: 'guncelleme_tarihi DESC',\r\n      limit: limit,\r\n      offset: offset,\r\n    );\r\n\r\n    return List.generate(maps.length, (i) {\r\n      return BelgeModeli.fromMap(maps[i]);\r\n    });\r\n  }\r\n\r\n  // ID'ye göre belge getir\r\n  Future<BelgeModeli?> belgeGetir(int id) async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query(\r\n      'belgeler',\r\n      where: 'id = ? AND aktif = ?',\r\n      whereArgs: [id, 1],\r\n    );\r\n\r\n    if (maps.isNotEmpty) {\r\n      return BelgeModeli.fromMap(maps.first);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Kategori ID'ye göre belgeleri getir\r\n  Future<List<BelgeModeli>> kategoriyeGoreBelgeleriGetir(int kategoriId) async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query(\r\n      'belgeler',\r\n      where: 'kategori_id = ? AND aktif = ?',\r\n      whereArgs: [kategoriId, 1],\r\n      orderBy: 'guncelleme_tarihi DESC',\r\n    );\r\n\r\n    return List.generate(maps.length, (i) {\r\n      return BelgeModeli.fromMap(maps[i]);\r\n    });\r\n  }\r\n\r\n  // Hash'e göre belge getir\r\n  Future<BelgeModeli?> belgeGetirByHash(String hash) async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query(\r\n      'belgeler',\r\n      where: 'dosya_hash = ? AND aktif = ?',\r\n      whereArgs: [hash, 1],\r\n    );\r\n\r\n    if (maps.isNotEmpty) {\r\n      return BelgeModeli.fromMap(maps.first);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Belge güncelleme\r\n  Future<int> belgeGuncelle(BelgeModeli belge) async {\r\n    final db = await database;\r\n    return await db.update(\r\n      'belgeler',\r\n      belge.toMap(),\r\n      where: 'id = ?',\r\n      whereArgs: [belge.id],\r\n    );\r\n  }\r\n\r\n  // Belge silme (aktif durumunu pasif yapma)\r\n  Future<int> belgeSil(int id) async {\r\n    final db = await database;\r\n    return await db.update(\r\n      'belgeler',\r\n      {'aktif': 0},\r\n      where: 'id = ?',\r\n      whereArgs: [id],\r\n    );\r\n  }\r\n\r\n  // Belge kalıcı silme\r\n  Future<int> belgeKaliciSil(int belgeId) async {\r\n    final db = await database;\r\n    return await db.delete('belgeler', where: 'id = ?', whereArgs: [belgeId]);\r\n  }\r\n\r\n  // Gelişmiş arama - dosya adı, başlık, açıklama, etiket, kategori ve kişi bilgilerine göre\r\n  Future<List<BelgeModeli>> belgeAra(String aramaMetni) async {\r\n    final db = await database;\r\n\r\n    // Kategoriler ve kişiler için JOIN ile arama\r\n    final List<Map<String, dynamic>> maps = await db.rawQuery(\r\n      '''\r\n      SELECT DISTINCT b.* FROM belgeler b\r\n      LEFT JOIN kategoriler k ON b.kategori_id = k.id\r\n      LEFT JOIN kisiler ki ON b.kisi_id = ki.id\r\n      WHERE b.aktif = 1 AND (\r\n        b.dosya_adi LIKE ? OR \r\n        b.orijinal_dosya_adi LIKE ? OR \r\n        b.baslik LIKE ? OR \r\n        b.aciklama LIKE ? OR \r\n        b.etiketler LIKE ? OR\r\n        k.kategori_adi LIKE ? OR\r\n        (ki.ad || ' ' || ki.soyad) LIKE ?\r\n      )\r\n      ORDER BY b.guncelleme_tarihi DESC\r\n    ''',\r\n      [\r\n        '%$aramaMetni%', // dosya_adi\r\n        '%$aramaMetni%', // orijinal_dosya_adi\r\n        '%$aramaMetni%', // baslik\r\n        '%$aramaMetni%', // aciklama\r\n        '%$aramaMetni%', // etiketler\r\n        '%$aramaMetni%', // kategori_adi\r\n        '%$aramaMetni%', // kişi adı soyadı\r\n      ],\r\n    );\r\n\r\n    return List.generate(maps.length, (i) {\r\n      return BelgeModeli.fromMap(maps[i]);\r\n    });\r\n  }\r\n\r\n  // KİŞİ CRUD İŞLEMLERİ\r\n\r\n  // Kişi ekleme\r\n  Future<int> kisiEkle(KisiModeli kisi) async {\r\n    final db = await database;\r\n    return await db.insert('kisiler', kisi.toMap());\r\n  }\r\n\r\n  // Tüm kişileri getir\r\n  Future<List<KisiModeli>> kisileriGetir() async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query(\r\n      'kisiler',\r\n      where: 'aktif = ?',\r\n      whereArgs: [1],\r\n      orderBy: 'ad ASC, soyad ASC',\r\n    );\r\n\r\n    return List.generate(maps.length, (i) {\r\n      return KisiModeli.fromMap(maps[i]);\r\n    });\r\n  }\r\n\r\n  // ID'ye göre kişi getir\r\n  Future<KisiModeli?> kisiGetir(int id) async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query(\r\n      'kisiler',\r\n      where: 'id = ? AND aktif = ?',\r\n      whereArgs: [id, 1],\r\n    );\r\n\r\n    if (maps.isNotEmpty) {\r\n      return KisiModeli.fromMap(maps.first);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Kişi güncelleme\r\n  Future<int> kisiGuncelle(KisiModeli kisi) async {\r\n    final db = await database;\r\n    return await db.update(\r\n      'kisiler',\r\n      kisi.toMap(),\r\n      where: 'id = ?',\r\n      whereArgs: [kisi.id],\r\n    );\r\n  }\r\n\r\n  // Kişi silme (aktif durumunu pasif yapma)\r\n  Future<int> kisiSil(int id) async {\r\n    final db = await database;\r\n    return await db.update(\r\n      'kisiler',\r\n      {'aktif': 0},\r\n      where: 'id = ?',\r\n      whereArgs: [id],\r\n    );\r\n  }\r\n\r\n  // Kişiye göre belgeler\r\n  Future<List<BelgeModeli>> kisiyeGoreBelgeler(int kisiId) async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query(\r\n      'belgeler',\r\n      where: 'kisi_id = ? AND aktif = ?',\r\n      whereArgs: [kisiId, 1],\r\n      orderBy: 'guncelleme_tarihi DESC',\r\n    );\r\n\r\n    return List.generate(maps.length, (i) {\r\n      return BelgeModeli.fromMap(maps[i]);\r\n    });\r\n  }\r\n\r\n  // KATEGORİ CRUD İŞLEMLERİ\r\n\r\n  // Kategori ekleme\r\n  Future<int> kategoriEkle(KategoriModeli kategori) async {\r\n    final db = await database;\r\n    final map = kategori.toMap();\r\n    print('DEBUG: Veritabanına eklenecek map: $map');\r\n    return await db.insert('kategoriler', map);\r\n  }\r\n\r\n  // Tüm kategorileri getir\r\n  Future<List<KategoriModeli>> kategorileriGetir() async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query(\r\n      'kategoriler',\r\n      where: 'aktif = ?',\r\n      whereArgs: [1],\r\n      orderBy: 'kategori_adi ASC',\r\n    );\r\n\r\n    print('Veritabanından ${maps.length} kategori bulundu');\r\n\r\n    // Eğer kategori yoksa veya 16'dan azsa default kategorileri ekle\r\n    if (maps.length < 16) {\r\n      print('Eksik kategoriler var, default kategoriler kontrol ediliyor...');\r\n      await _ensureDefaultCategories(db);\r\n\r\n      // Tekrar sorgula\r\n      final newMaps = await db.query(\r\n        'kategoriler',\r\n        where: 'aktif = ?',\r\n        whereArgs: [1],\r\n        orderBy: 'kategori_adi ASC',\r\n      );\r\n\r\n      print(\r\n        'Default kategoriler eklendikten sonra: ${newMaps.length} kategori',\r\n      );\r\n      return List.generate(newMaps.length, (i) {\r\n        return KategoriModeli.fromMap(newMaps[i]);\r\n      });\r\n    }\r\n\r\n    return List.generate(maps.length, (i) {\r\n      return KategoriModeli.fromMap(maps[i]);\r\n    });\r\n  }\r\n\r\n  // ID'ye göre kategori getir\r\n  Future<KategoriModeli?> kategoriGetir(int id) async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query(\r\n      'kategoriler',\r\n      where: 'id = ? AND aktif = ?',\r\n      whereArgs: [id, 1],\r\n    );\r\n\r\n    if (maps.isNotEmpty) {\r\n      return KategoriModeli.fromMap(maps.first);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Kategori güncelleme\r\n  Future<int> kategoriGuncelle(KategoriModeli kategori) async {\r\n    final db = await database;\r\n    return await db.update(\r\n      'kategoriler',\r\n      kategori.toMap(),\r\n      where: 'id = ?',\r\n      whereArgs: [kategori.id],\r\n    );\r\n  }\r\n\r\n  // Kategori silme (aktif durumunu pasif yapma)\r\n  Future<int> kategoriSil(int id) async {\r\n    final db = await database;\r\n    return await db.update(\r\n      'kategoriler',\r\n      {'aktif': 0},\r\n      where: 'id = ?',\r\n      whereArgs: [id],\r\n    );\r\n  }\r\n\r\n  // Kategoriye ait kişileri sil\r\n  Future<int> kategoriKisileriSil(int kategoriId) async {\r\n    final db = await database;\r\n\r\n    // Önce kategoriye ait belgelerdeki kişi bağlantılarını al\r\n    final belgelerResult = await db.query(\r\n      'belgeler',\r\n      columns: ['kisi_id'],\r\n      where: 'kategori_id = ? AND aktif = ? AND kisi_id IS NOT NULL',\r\n      whereArgs: [kategoriId, 1],\r\n    );\r\n\r\n    // Kategoriye ait belgelerin kişi bağlantılarını kaldır\r\n    await db.update(\r\n      'belgeler',\r\n      {'kisi_id': null},\r\n      where: 'kategori_id = ? AND aktif = ?',\r\n      whereArgs: [kategoriId, 1],\r\n    );\r\n\r\n    // Başka belgelerde kullanılmayan kişileri sil\r\n    final kisiIdleri =\r\n        belgelerResult\r\n            .map((e) => e['kisi_id'] as int?)\r\n            .where((id) => id != null)\r\n            .toSet();\r\n\r\n    int silinenKisiSayisi = 0;\r\n    for (int? kisiId in kisiIdleri) {\r\n      if (kisiId != null) {\r\n        // Bu kişinin başka belgelerde kullanılıp kullanılmadığını kontrol et\r\n        final kullaniliyorMu = await db.query(\r\n          'belgeler',\r\n          where: 'kisi_id = ? AND aktif = ?',\r\n          whereArgs: [kisiId, 1],\r\n          limit: 1,\r\n        );\r\n\r\n        if (kullaniliyorMu.isEmpty) {\r\n          // Kişi başka yerde kullanılmıyorsa sil\r\n          await db.update(\r\n            'kisiler',\r\n            {'aktif': 0},\r\n            where: 'id = ?',\r\n            whereArgs: [kisiId],\r\n          );\r\n          silinenKisiSayisi++;\r\n        }\r\n      }\r\n    }\r\n\r\n    return silinenKisiSayisi;\r\n  }\r\n\r\n  // Kategoriye ait belgeleri sil\r\n  Future<int> kategoriBelgeleriSil(int kategoriId) async {\r\n    final db = await database;\r\n    return await db.update(\r\n      'belgeler',\r\n      {'aktif': 0},\r\n      where: 'kategori_id = ? AND aktif = ?',\r\n      whereArgs: [kategoriId, 1],\r\n    );\r\n  }\r\n\r\n  // Kategoriye ait hem kişileri hem belgeleri sil\r\n  Future<Map<String, int>> kategoriHepsiniSil(int kategoriId) async {\r\n    final db = await database;\r\n\r\n    // Önce kişileri sil\r\n    final silinenKisiSayisi = await kategoriKisileriSil(kategoriId);\r\n\r\n    // Sonra belgeleri sil\r\n    final silinenBelgeSayisi = await kategoriBelgeleriSil(kategoriId);\r\n\r\n    return {'kisiSayisi': silinenKisiSayisi, 'belgeSayisi': silinenBelgeSayisi};\r\n  }\r\n\r\n  // Kategoriye ait belge sayılarını getir\r\n  Future<Map<int, int>> kategoriBelgeSayilari() async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> result = await db.rawQuery('''\r\n      SELECT kategori_id, COUNT(*) as belge_sayisi\r\n      FROM belgeler\r\n      WHERE aktif = 1\r\n      GROUP BY kategori_id\r\n    ''');\r\n\r\n    return {\r\n      for (var row in result)\r\n        (row['kategori_id'] as int): (row['belge_sayisi'] as int),\r\n    };\r\n  }\r\n\r\n  // SENKRONIZASYON METODLARI\r\n\r\n  // Değişmiş hash'leri getir\r\n  Future<List<String>> degismisHashleriGetir() async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query(\r\n      'belgeler',\r\n      columns: ['dosya_hash'],\r\n      where: 'senkron_durumu != ? AND aktif = ?',\r\n      whereArgs: [SenkronDurumu.SENKRONIZE.index, 1],\r\n    );\r\n\r\n    return maps.map((map) => map['dosya_hash'] as String).toList();\r\n  }\r\n\r\n  // Senkron durumu güncelleme\r\n  Future<void> senkronDurumunuGuncelle(int belgeId, SenkronDurumu durum) async {\r\n    final db = await database;\r\n    await db.update(\r\n      'belgeler',\r\n      {'senkron_durumu': durum.index},\r\n      where: 'id = ?',\r\n      whereArgs: [belgeId],\r\n    );\r\n  }\r\n\r\n  // Tüm hash'leri getir\r\n  Future<Map<String, String>> tumHashleriGetir() async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query(\r\n      'belgeler',\r\n      columns: ['dosya_adi', 'dosya_hash'],\r\n      where: 'aktif = ?',\r\n      whereArgs: [1],\r\n    );\r\n\r\n    Map<String, String> hashMap = {};\r\n    for (Map<String, dynamic> map in maps) {\r\n      hashMap[map['dosya_adi']] = map['dosya_hash'];\r\n    }\r\n    return hashMap;\r\n  }\r\n\r\n  // İSTATİSTİK METODLARI\r\n\r\n  // Toplam belge sayısı\r\n  Future<int> toplamBelgeSayisi() async {\r\n    final db = await database;\r\n    final result = await db.rawQuery(\r\n      'SELECT COUNT(*) as count FROM belgeler WHERE aktif = ?',\r\n      [1],\r\n    );\r\n    return result.first['count'] as int;\r\n  }\r\n\r\n  // Toplam dosya boyutu\r\n  Future<int> toplamDosyaBoyutu() async {\r\n    final db = await database;\r\n    final result = await db.rawQuery(\r\n      'SELECT SUM(dosya_boyutu) as total FROM belgeler WHERE aktif = ?',\r\n      [1],\r\n    );\r\n    return (result.first['total'] as int?) ?? 0;\r\n  }\r\n\r\n  // VERİTABANI YÖNETİMİ\r\n\r\n  // Veritabanını kapat\r\n  Future<void> kapat() async {\r\n    final db = _database;\r\n    if (db != null) {\r\n      await db.close();\r\n      _database = null;\r\n    }\r\n  }\r\n\r\n  // Veritabanı yolunu getir\r\n  static Future<String> veritabaniYolu() async {\r\n    Directory documentsDirectory = await getApplicationDocumentsDirectory();\r\n    return join(documentsDirectory.path, Sabitler.VERITABANI_ADI);\r\n  }\r\n\r\n  // Veritabanını sıfırla\r\n  Future<void> veritabaniniSifirla() async {\r\n    await kapat();\r\n    String path = await veritabaniYolu();\r\n    await File(path).delete();\r\n    _database = await _initDatabase();\r\n  }\r\n\r\n  // Tüm logları getir\r\n  Future<List<SenkronLogModeli>> senkronLoglariniGetir({int? limit}) async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query(\r\n      'senkron_logları',\r\n      orderBy: 'islem_tarihi DESC',\r\n      limit: limit,\r\n    );\r\n    return List.generate(maps.length, (i) {\r\n      return SenkronLogModeli.fromMap(maps[i]);\r\n    });\r\n  }\r\n\r\n  // Log ekle\r\n  Future<int> senkronLogEkle(SenkronLogModeli log) async {\r\n    final db = await database;\r\n    return await db.insert('senkron_logları', log.toMap());\r\n  }\r\n\r\n  // Senkron durumuna göre belgeleri getir\r\n  Future<List<BelgeModeli>> senkronDurumunaGoreBelgeleriGetir(\r\n    int senkronDurumu,\r\n  ) async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query(\r\n      'belgeler',\r\n      where: 'senkron_durumu = ? AND aktif = ?',\r\n      whereArgs: [senkronDurumu, 1],\r\n      orderBy: 'guncelleme_tarihi DESC',\r\n    );\r\n\r\n    return List.generate(maps.length, (i) {\r\n      return BelgeModeli.fromMap(maps[i]);\r\n    });\r\n  }\r\n\r\n  // Belgeler tablosunda senkron durumunu güncelle\r\n  Future<int> belgeSenkronDurumuGuncelle(int belgeId, int durum) async {\r\n    final db = await database;\r\n    return await db.update(\r\n      'belgeler',\r\n      {'senkron_durumu': durum},\r\n      where: 'id = ?',\r\n      whereArgs: [belgeId],\r\n    );\r\n  }\r\n\r\n  // Kişinin belge sayısını getir\r\n  Future<int> kisiBelgeSayisi(int kisiId) async {\r\n    final db = await database;\r\n    final result = await db.rawQuery(\r\n      'SELECT COUNT(*) as count FROM belgeler WHERE kisi_id = ? AND aktif = ?',\r\n      [kisiId, 1],\r\n    );\r\n    return result.first['count'] as int;\r\n  }\r\n\r\n  // Kişinin belgelerini getir\r\n  Future<List<BelgeModeli>> kisiBelyeleriniGetir(int kisiId) async {\r\n    final db = await database;\r\n    final List<Map<String, dynamic>> maps = await db.query(\r\n      'belgeler',\r\n      where: 'kisi_id = ? AND aktif = ?',\r\n      whereArgs: [kisiId, 1],\r\n      orderBy: 'guncelleme_tarihi DESC',\r\n    );\r\n\r\n    return List.generate(maps.length, (i) {\r\n      return BelgeModeli.fromMap(maps[i]);\r\n    });\r\n  }\r\n\r\n  Future<int> belgeVersiyonKaydet(\r\n    int belgeId,\r\n    int versiyonNumarasi,\r\n    String dosyaHash,\r\n    String? metadataHash,\r\n    String? degisiklikAciklamasi,\r\n    String? olusturanCihaz,\r\n  ) async {\r\n    final db = await database;\r\n    return await db.insert('belge_versiyonlari', {\r\n      'belge_id': belgeId,\r\n      'versiyon_numarasi': versiyonNumarasi,\r\n      'dosya_hash': dosyaHash,\r\n      'metadata_hash': metadataHash,\r\n      'degisiklik_aciklamasi': degisiklikAciklamasi,\r\n      'olusturan_cihaz': olusturanCihaz,\r\n      'olusturma_tarihi': DateTime.now().toIso8601String(),\r\n    });\r\n  }\r\n\r\n  // Son değişiklikleri getir (raporda belirtilen)\r\n  Future<List<Map<String, dynamic>>> sonDegisiklikleriGetir(\r\n    DateTime since,\r\n  ) async {\r\n    final db = await database;\r\n    return await db.query(\r\n      'belgeler',\r\n      where: 'guncelleme_tarihi > ? AND aktif = ?',\r\n      whereArgs: [since.toIso8601String(), 1],\r\n      orderBy: 'guncelleme_tarihi DESC',\r\n    );\r\n  }\r\n\r\n  // Metadata güncelleme (raporda belirtilen)\r\n  Future<int> metadataGuncelle(\r\n    int belgeId,\r\n    String? baslik,\r\n    String? aciklama,\r\n    String? etiketler,\r\n    String? metadataHash,\r\n  ) async {\r\n    final db = await database;\r\n    final guncellemeTarihi = DateTime.now().toIso8601String();\r\n\r\n    return await db.update(\r\n      'belgeler',\r\n      {\r\n        if (baslik != null) 'baslik': baslik,\r\n        if (aciklama != null) 'aciklama': aciklama,\r\n        if (etiketler != null) 'etiketler': etiketler,\r\n        if (metadataHash != null) 'metadata_hash': metadataHash,\r\n        'son_metadata_guncelleme': guncellemeTarihi,\r\n        'guncelleme_tarihi': guncellemeTarihi,\r\n      },\r\n      where: 'id = ?',\r\n      whereArgs: [belgeId],\r\n    );\r\n  }\r\n\r\n  // ============== SYNC STATE TRACKING ==============\r\n\r\n  // Sync state kaydet/güncelle\r\n  Future<void> syncStateGuncelle(\r\n    String dosyaHash,\r\n    String syncDurumu,\r\n    String? cihazId,\r\n    String? metadataHash,\r\n  ) async {\r\n    final db = await database;\r\n    final tarih = DateTime.now().toIso8601String();\r\n\r\n    await db.execute(\r\n      '''\r\n      INSERT OR REPLACE INTO senkron_state \r\n      (dosya_hash, son_sync_zamani, sync_durumu, cihaz_id, metadata_hash, olusturma_tarihi)\r\n      VALUES (?, ?, ?, ?, ?, ?)\r\n    ''',\r\n      [dosyaHash, tarih, syncDurumu, cihazId, metadataHash, tarih],\r\n    );\r\n  }\r\n\r\n  // Sync state getir\r\n  Future<Map<String, dynamic>?> syncStateGetir(String dosyaHash) async {\r\n    final db = await database;\r\n    final maps = await db.query(\r\n      'senkron_state',\r\n      where: 'dosya_hash = ?',\r\n      whereArgs: [dosyaHash],\r\n    );\r\n    return maps.isNotEmpty ? maps.first : null;\r\n  }\r\n\r\n  // Sync edilmemiş dosyaları getir\r\n  Future<List<String>> syncEdilmemisHashleriGetir() async {\r\n    final db = await database;\r\n    final maps = await db.query(\r\n      'senkron_state',\r\n      columns: ['dosya_hash'],\r\n      where: 'sync_durumu != ?',\r\n      whereArgs: ['SYNCED'],\r\n    );\r\n    return maps.map((m) => m['dosya_hash'] as String).toList();\r\n  }\r\n\r\n  // Tüm sync state'leri getir\r\n  Future<List<Map<String, dynamic>>> tumSyncStateleriniGetir() async {\r\n    final db = await database;\r\n    return await db.query('senkron_state', orderBy: 'son_sync_zamani DESC');\r\n  }\r\n\r\n  // Sync state temizle\r\n  Future<void> syncStateTemizle(String? dosyaHash) async {\r\n    final db = await database;\r\n    if (dosyaHash != null) {\r\n      await db.delete(\r\n        'senkron_state',\r\n        where: 'dosya_hash = ?',\r\n        whereArgs: [dosyaHash],\r\n      );\r\n    } else {\r\n      await db.delete('senkron_state');\r\n    }\r\n  }\r\n\r\n  // ============== METADATA CHANGE TRACKING ==============\r\n\r\n  // Metadata değişikliği kaydet\r\n  Future<int> metadataDegisikligiKaydet(\r\n    String entityType,\r\n    int entityId,\r\n    String degisiklikTipi,\r\n    String? eskiDeger,\r\n    String? yeniDeger,\r\n    String? cihazId,\r\n  ) async {\r\n    final db = await database;\r\n    return await db.insert('metadata_degisiklikleri', {\r\n      'entity_type': entityType,\r\n      'entity_id': entityId,\r\n      'degisiklik_tipi': degisiklikTipi,\r\n      'eski_deger': eskiDeger,\r\n      'yeni_deger': yeniDeger,\r\n      'degisiklik_zamani': DateTime.now().toIso8601String(),\r\n      'cihaz_id': cihazId,\r\n      'sync_edildi': 0,\r\n    });\r\n  }\r\n\r\n  // Sync edilmemiş metadata değişikliklerini getir\r\n  Future<List<Map<String, dynamic>>>\r\n  syncEdilmemisMetadataDegisiklikleriniGetir() async {\r\n    final db = await database;\r\n    return await db.query(\r\n      'metadata_degisiklikleri',\r\n      where: 'sync_edildi = ?',\r\n      whereArgs: [0],\r\n      orderBy: 'degisiklik_zamani ASC',\r\n    );\r\n  }\r\n\r\n  // Metadata değişikliğini sync edildi olarak işaretle\r\n  Future<void> metadataDegisikligiSyncEdiOlarakIsaretle(int id) async {\r\n    final db = await database;\r\n    await db.update(\r\n      'metadata_degisiklikleri',\r\n      {'sync_edildi': 1},\r\n      where: 'id = ?',\r\n      whereArgs: [id],\r\n    );\r\n  }\r\n\r\n  // Son zamandan beri metadata değişikliklerini getir\r\n  Future<List<Map<String, dynamic>>>\r\n  sonZamandanBeriMetadataDegisiklikleriniGetir(DateTime since) async {\r\n    final db = await database;\r\n    return await db.query(\r\n      'metadata_degisiklikleri',\r\n      where: 'degisiklik_zamani > ?',\r\n      whereArgs: [since.toIso8601String()],\r\n      orderBy: 'degisiklik_zamani DESC',\r\n    );\r\n  }\r\n\r\n  // ============== BELGE VERSİYON METODLARI ==============\r\n\r\n  // Belgenin tüm versiyonlarını getir\r\n  Future<List<Map<String, dynamic>>> belgeVersiyonlariniGetir(\r\n    int belgeId,\r\n  ) async {\r\n    final db = await database;\r\n    return await db.query(\r\n      'belge_versiyonlari',\r\n      where: 'belge_id = ?',\r\n      whereArgs: [belgeId],\r\n      orderBy: 'versiyon_numarasi DESC',\r\n    );\r\n  }\r\n\r\n  // Belgenin son versiyon numarasını getir\r\n  Future<int> belgeninSonVersiyonNumarasiniGetir(int belgeId) async {\r\n    final db = await database;\r\n    final result = await db.rawQuery(\r\n      '''\r\n      SELECT MAX(versiyon_numarasi) as max_versiyon \r\n      FROM belge_versiyonlari \r\n      WHERE belge_id = ?\r\n    ''',\r\n      [belgeId],\r\n    );\r\n\r\n    return (result.first['max_versiyon'] as int?) ?? 0;\r\n  }\r\n\r\n  // Belgenin versiyon numarasını güncelle\r\n  Future<void> belgeVersiyonNumarasiniGuncelle(\r\n    int belgeId,\r\n    int yeniVersiyon,\r\n  ) async {\r\n    final db = await database;\r\n    await db.update(\r\n      'belgeler',\r\n      {\r\n        'versiyon_numarasi': yeniVersiyon,\r\n        'guncelleme_tarihi': DateTime.now().toIso8601String(),\r\n      },\r\n      where: 'id = ?',\r\n      whereArgs: [belgeId],\r\n    );\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/arsiv_uygulamasi/lib/services/veritabani_servisi.dart b/arsiv_uygulamasi/lib/services/veritabani_servisi.dart
--- a/arsiv_uygulamasi/lib/services/veritabani_servisi.dart	(revision 7f873ead8e12e13125dc4996a90674136efb4f22)
+++ b/arsiv_uygulamasi/lib/services/veritabani_servisi.dart	(date 1751702359996)
@@ -267,7 +267,49 @@
 
         print('✅ metadata_degisiklikleri tablosu V4 ile yeniden oluşturuldu');
       } catch (e) {
-        print('❌ V4 migration hatası: $e');
+        print('⚠️ V4 Migration hatası: $e');
+      }
+    }
+
+    if (oldVersion < 5) {
+      // V5 Migration - belgeler tablosuna yeni kolonları ekle
+      try {
+        print(
+          '🔄 V5 Migration başlatılıyor - belgeler tablosuna yeni kolonlar ekleniyor...',
+        );
+
+        // Önce kolonların var olup olmadığını kontrol et
+        final columns = await db.rawQuery("PRAGMA table_info(belgeler)");
+        final columnNames =
+            columns.map((col) => col['name'] as String).toList();
+
+        // versiyon_numarasi kolonu yoksa ekle
+        if (!columnNames.contains('versiyon_numarasi')) {
+          await db.execute(
+            'ALTER TABLE belgeler ADD COLUMN versiyon_numarasi INTEGER DEFAULT 1',
+          );
+          print('✅ versiyon_numarasi kolonu eklendi');
+        }
+
+        // metadata_hash kolonu yoksa ekle
+        if (!columnNames.contains('metadata_hash')) {
+          await db.execute(
+            'ALTER TABLE belgeler ADD COLUMN metadata_hash TEXT',
+          );
+          print('✅ metadata_hash kolonu eklendi');
+        }
+
+        // son_metadata_guncelleme kolonu yoksa ekle
+        if (!columnNames.contains('son_metadata_guncelleme')) {
+          await db.execute(
+            'ALTER TABLE belgeler ADD COLUMN son_metadata_guncelleme TEXT',
+          );
+          print('✅ son_metadata_guncelleme kolonu eklendi');
+        }
+
+        print('✅ V5 Migration tamamlandı - belgeler tablosu güncellendi');
+      } catch (e) {
+        print('⚠️ V5 Migration hatası: $e');
       }
     }
   }
@@ -384,7 +426,39 @@
   // Belge ekleme
   Future<int> belgeEkle(BelgeModeli belge) async {
     final db = await database;
-    return await db.insert('belgeler', belge.toMap());
+
+    // Önce aynı hash'e sahip dosya var mı kontrol et
+    final mevcutBelgeler = await db.query(
+      'belgeler',
+      where: 'dosya_hash = ? AND aktif = ?',
+      whereArgs: [belge.dosyaHash, 1],
+    );
+
+    if (mevcutBelgeler.isNotEmpty) {
+      // Aynı hash'e sahip dosya zaten var, güncelleme yapalım
+      final mevcutBelge = BelgeModeli.fromMap(mevcutBelgeler.first);
+      print(
+        '⚠️ Aynı hash\'e sahip dosya zaten mevcut: ${mevcutBelge.dosyaAdi}',
+      );
+      print('🔄 Mevcut belge güncelleniyor...');
+
+      // Mevcut belgeyi güncelle
+      await db.update(
+        'belgeler',
+        belge.toMap(),
+        where: 'id = ?',
+        whereArgs: [mevcutBelge.id],
+      );
+
+      print('✅ Belge başarıyla güncellendi');
+      return mevcutBelge.id!;
+    }
+
+    // Yeni belge ekle
+    print('📝 Yeni belge ekleniyor...');
+    final belgeId = await db.insert('belgeler', belge.toMap());
+    print('✅ Belge başarıyla eklendi: ID $belgeId');
+    return belgeId;
   }
 
   // Tüm belgeleri getir
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># \uD83D\uDCC1 Arşivim - Kişisel Belge Arşiv Uygulaması\r\n\r\n## \uD83D\uDCE6 Hemen İndir (v1.0.0)\r\n\r\n<div align=\"center\">\r\n\r\n[![Android APK](https://img.shields.io/badge/Android-APK-brightgreen?style=for-the-badge&logo=android&logoColor=white)](https://github.com/mehmet-karataslar/Arsivim/releases/download/v1.0.0/Arsivcim-v1.0.0-android.apk)\r\n[![Windows EXE](https://img.shields.io/badge/Windows-EXE-blue?style=for-the-badge&logo=windows&logoColor=white)](https://github.com/mehmet-karataslar/Arsivim/releases/download/v1.0.0/Arsivcim-v1.0.0-windows-x64.zip)\r\n\r\n**\uD83D\uDCF1 Android APK: 38.3 MB** | **\uD83D\uDCBB Windows x64: 12 MB (ZIP)**\r\n\r\n[\uD83D\uDCCB Tüm Sürümler](https://github.com/mehmet-karataslar/Arsivim/releases) | [\uD83D\uDCD6 Kurulum Rehberi](arsiv_uygulamasi/releases/README.md)\r\n\r\n</div>\r\n\r\n---\r\n\r\n## \uD83C\uDF1F Proje Hakkında\r\n\r\n**Arşivim**, kişisel belgelerinizi organize etmek, kategorilere ayırmak, kişilere göre gruplamak ve cihazlar arasında senkronize etmek için geliştirilmiş modern bir Flutter uygulamasıdır. Hem mobil hem de masaüstü platformlarda çalışır.\r\n\r\n## ✨ Özellikler\r\n\r\n### \uD83D\uDCCB Belge Yönetimi\r\n- **Çoklu Dosya Desteği**: PDF, DOC, DOCX, TXT, JPG, PNG, MP4, ZIP vb. 20+ dosya formatı\r\n- **Akıllı Kategorizasyon**: Öntanımlı 16 kategori + özel kategori oluşturma\r\n- **Kişi Bazlı Organizasyon**: Belgeleri kişilere göre gruplandırma\r\n- **Etiketleme Sistemi**: Belgeler için özel etiketler\r\n- **Gelişmiş Arama**: Dosya adı, başlık, açıklama, kategori ve kişi adına göre arama\r\n\r\n### \uD83D\uDD04 Senkronizasyon\r\n- **Cihazlar Arası Senkronizasyon**: Wi-Fi üzerinden mobil-PC arasında otomatik senkronizasyon\r\n- **QR Kod Bağlantısı**: Hızlı cihaz eşleştirmesi için QR kod tarama\r\n- **Çakışma Çözümü**: Dosya hash'i ile akıllı çakışma tespiti ve çözümü\r\n- **HTTP Sunucusu**: PC'de otomatik HTTP sunucusu başlatma\r\n\r\n### \uD83D\uDCBE Yedekleme\r\n- **Kişi Bazlı Yedekleme**: Seçilen kişilerin belgelerini yedekleme\r\n- **Kategori Seçimi**: Kişi başına kategori seçimi ile özelleştirilebilir yedekleme\r\n- **Klasör Yapısı**: Kişi → Kategori → Belgeler hiyerarşik yapısı\r\n- **İlerleme Takibi**: Gerçek zamanlı yedekleme durumu\r\n\r\n### \uD83C\uDFA8 Modern Arayüz\r\n- **Material Design**: Modern ve kullanıcı dostu arayüz\r\n- **Responsive Tasarım**: Mobil ve masaüstü için optimize edilmiş\r\n- **Animasyonlar**: Akıcı geçişler ve geri bildirimler\r\n- **Çoklu Görünüm**: Liste ve kompakt görünüm modları\r\n\r\n## \uD83D\uDD27 Teknolojiler\r\n\r\n### Framework & Dil\r\n- **Flutter**: Cross-platform uygulama geliştirme\r\n- **Dart**: Modern programlama dili\r\n\r\n### Veritabanı\r\n- **SQLite**: Yerel veri depolama\r\n- **sqflite**: Flutter SQLite paketi\r\n- **sqflite_common_ffi**: Masaüstü SQLite desteği\r\n\r\n### Güvenlik\r\n- **SHA-256 Hashing**: Dosya bütünlüğü kontrolü\r\n- **Crypto**: Şifreleme ve hash işlemleri\r\n\r\n### Dosya İşlemleri\r\n- **file_picker**: Dosya seçimi\r\n- **path_provider**: Sistem klasörlerine erişim\r\n- **open_filex**: Dosya açma\r\n- **share_plus**: Dosya paylaşma\r\n\r\n### Network & Senkronizasyon\r\n- **HTTP Server**: Dart:io ile yerleşik HTTP sunucusu\r\n- **connectivity_plus**: Network durumu kontrolü\r\n- **network_info_plus**: Network bilgisi alma\r\n\r\n### UI/UX\r\n- **mobile_scanner**: QR kod tarama\r\n- **qr_flutter**: QR kod oluşturma\r\n- **Material Design**: Modern UI komponentleri\r\n\r\n## \uD83D\uDDC4\uFE0F Veritabanı Yapısı\r\n\r\n### Tablolar\r\n\r\n#### `belgeler` - Ana belge bilgileri\r\n```sql\r\nCREATE TABLE belgeler (\r\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n  dosya_adi TEXT NOT NULL,\r\n  orijinal_dosya_adi TEXT NOT NULL,\r\n  dosya_yolu TEXT NOT NULL,\r\n  dosya_boyutu INTEGER NOT NULL,\r\n  dosya_tipi TEXT NOT NULL,\r\n  dosya_hash TEXT UNIQUE NOT NULL,\r\n  kategori_id INTEGER,\r\n  kisi_id INTEGER,\r\n  baslik TEXT,\r\n  aciklama TEXT,\r\n  etiketler TEXT,\r\n  olusturma_tarihi TEXT NOT NULL,\r\n  guncelleme_tarihi TEXT NOT NULL,\r\n  son_erisim_tarihi TEXT,\r\n  aktif INTEGER DEFAULT 1,\r\n  senkron_durumu INTEGER DEFAULT 0,\r\n  FOREIGN KEY (kategori_id) REFERENCES kategoriler(id),\r\n  FOREIGN KEY (kisi_id) REFERENCES kisiler(id)\r\n);\r\n```\r\n\r\n#### `kategoriler` - Belge kategorileri\r\n```sql\r\nCREATE TABLE kategoriler (\r\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n  kategori_adi TEXT NOT NULL UNIQUE,\r\n  ust_kategori_id INTEGER,\r\n  renk_kodu TEXT DEFAULT '#2196F3',\r\n  simge_kodu TEXT DEFAULT 'folder',\r\n  aciklama TEXT,\r\n  olusturma_tarihi TEXT NOT NULL,\r\n  aktif INTEGER DEFAULT 1,\r\n  FOREIGN KEY (ust_kategori_id) REFERENCES kategoriler(id)\r\n);\r\n```\r\n\r\n#### `kisiler` - Kişi bilgileri\r\n```sql\r\nCREATE TABLE kisiler (\r\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n  ad TEXT NOT NULL,\r\n  soyad TEXT NOT NULL,\r\n  olusturma_tarihi TEXT NOT NULL,\r\n  guncelleme_tarihi TEXT NOT NULL,\r\n  aktif INTEGER DEFAULT 1\r\n);\r\n```\r\n\r\n#### `senkron_logları` - Senkronizasyon geçmişi\r\n```sql\r\nCREATE TABLE senkron_logları (\r\n  id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n  belge_id INTEGER,\r\n  islem_tipi TEXT NOT NULL,\r\n  kaynak_cihaz TEXT NOT NULL,\r\n  hedef_cihaz TEXT NOT NULL,\r\n  islem_tarihi TEXT NOT NULL,\r\n  durum TEXT DEFAULT 'BEKLEMEDE',\r\n  hata_mesaji TEXT,\r\n  FOREIGN KEY (belge_id) REFERENCES belgeler(id)\r\n);\r\n```\r\n\r\n### Öntanımlı Kategoriler\r\n- \uD83D\uDCC4 **Resmi Belgeler**: Kimlik, pasaport, ehliyet\r\n- \uD83C\uDF93 **Eğitim**: Diploma, sertifika, transkript\r\n- \uD83C\uDFE5 **Sağlık**: Rapor, reçete, tahlil\r\n- \uD83D\uDCBC **İş**: CV, iş sözleşmesi, maaş bordrosu\r\n- \uD83C\uDFE0 **Ev**: Kira sözleşmesi, fatura, tapu\r\n- \uD83D\uDE97 **Araç**: Ruhsat, sigorta, muayene\r\n- \uD83D\uDCB0 **Finansal**: Banka ekstreleri, kredi kartı\r\n- \uD83D\uDEE1\uFE0F **Sigorta**: Kasko, hayat sigortası\r\n- \uD83D\uDCDA **Kitap/Dergi**: PDF kitaplar, dergiler\r\n- \uD83C\uDFB5 **Müzik**: MP3, WAV dosyaları\r\n- \uD83C\uDFAC **Video**: MP4, AVI dosyaları\r\n- \uD83D\uDCF8 **Fotoğraf**: JPG, PNG dosyaları\r\n- \uD83D\uDCE6 **Arşiv**: ZIP, RAR dosyaları\r\n- \uD83D\uDCC4 **Metin**: TXT, RTF dosyaları\r\n- \uD83D\uDCCA **Tablo**: Excel, CSV dosyaları\r\n- \uD83D\uDCC2 **Diğer**: Kategorisiz dosyalar\r\n\r\n## \uD83D\uDE80 Kurulum ve Çalıştırma\r\n\r\n### Gereksinimler\r\n- Flutter SDK 3.7.2+\r\n- Dart 3.7.2+\r\n- Android Studio / VS Code\r\n- Platform-specific gereksinimler (Android SDK, Xcode vb.)\r\n\r\n### Adımlar\r\n1. **Projeyi klonlayın**\r\n   ```bash\r\n   git clone https://github.com/username/arsiv_uygulamasi.git\r\n   cd arsiv_uygulamasi\r\n   ```\r\n\r\n2. **Bağımlılıkları yükleyin**\r\n   ```bash\r\n   flutter pub get\r\n   ```\r\n\r\n3. **Uygulamayı çalıştırın**\r\n   ```bash\r\n   flutter run\r\n   ```\r\n\r\n### Platform Özellikleri\r\n- **Android**: Kamera izni gerekli (QR kod tarama)\r\n- **iOS**: Kamera ve fotoğraf erişimi\r\n- **Windows/Linux/macOS**: Dosya sistemi erişimi\r\n\r\n## \uD83D\uDCF1 Kullanım\r\n\r\n### Belge Ekleme\r\n1. Ana sayfada **+** butonuna tıklayın\r\n2. Dosya seçin (kamera veya galeriden)\r\n3. Kategori ve kişi seçin\r\n4. Başlık, açıklama ve etiketler ekleyin\r\n5. Kaydet butonuna tıklayın\r\n\r\n### Senkronizasyon\r\n1. **PC'de**: Uygulama otomatik HTTP sunucusu başlatır\r\n2. **Mobilde**: Senkronizasyon sekmesine gidin\r\n3. **QR Kod**: PC'deki QR kodu tarayın\r\n4. **Manuel**: IP adresini girerek bağlanın\r\n5. Senkronizasyon otomatik başlar\r\n\r\n### Yedekleme (Sadece PC)\r\n1. Yedekleme sekmesine gidin\r\n2. Yedeklenecek kişileri seçin\r\n3. Her kişi için kategorileri seçin\r\n4. Hedef klasörü belirleyin\r\n5. Yedekleme başlat\r\n\r\n## \uD83C\uDFD7\uFE0F Proje Yapısı\r\n\r\n```\r\nlib/\r\n├── main.dart                    # Ana uygulama giriş noktası\r\n├── models/                      # Veri modelleri\r\n│   ├── belge_modeli.dart       # Belge veri yapısı\r\n│   ├── kategori_modeli.dart    # Kategori veri yapısı\r\n│   ├── kisi_modeli.dart        # Kişi veri yapısı\r\n│   └── senkron_*.dart          # Senkronizasyon modelleri\r\n├── services/                    # İş mantığı servisleri\r\n│   ├── veritabani_servisi.dart # SQLite veritabanı işlemleri\r\n│   ├── dosya_servisi.dart      # Dosya yönetimi\r\n│   ├── http_sunucu_servisi.dart # HTTP sunucu\r\n│   ├── senkron_manager.dart    # Senkronizasyon yönetimi\r\n│   └── yedekleme_servisi.dart  # Yedekleme işlemleri\r\n├── screens/                     # Uygulama ekranları\r\n│   ├── ana_ekran.dart          # Ana dashboard\r\n│   ├── belgeler_ekrani.dart    # Belge listesi\r\n│   ├── kategoriler_ekrani.dart # Kategori yönetimi\r\n│   ├── kisiler_ekrani.dart     # Kişi yönetimi\r\n│   └── senkron_ekrani.dart     # Senkronizasyon\r\n├── widgets/                     # UI bileşenleri\r\n│   ├── belge_karti_widget.dart # Belge kartı\r\n│   ├── qr_scanner_widget.dart  # QR kod tarayıcı\r\n│   └── senkron_*.dart          # Senkronizasyon UI\r\n└── utils/                       # Yardımcı fonksiyonlar\r\n    ├── sabitler.dart           # Uygulama sabitleri\r\n    └── yardimci_fonksiyonlar.dart # Genel yardımcılar\r\n```\r\n\r\n## \uD83D\uDD27 Konfigürasyon\r\n\r\n### Desteklenen Dosya Formatları\r\n```dart\r\nconst List<String> DESTEKLENEN_DOSYA_TIPLERI = [\r\n  'pdf', 'doc', 'docx', 'txt', 'rtf',\r\n  'jpg', 'jpeg', 'png', 'gif', 'bmp',\r\n  'mp3', 'wav', 'mp4', 'avi', 'mov',\r\n  'zip', 'rar', '7z', 'tar', 'gz'\r\n];\r\n```\r\n\r\n### Senkronizasyon Ayarları\r\n```dart\r\nconst int SENKRON_PORTU = 8080;\r\nconst int MAKSIMUM_DOSYA_BOYUTU = 100 * 1024 * 1024; // 100MB\r\nconst int SENKRON_TIMEOUT = 30000; // 30 saniye\r\n```\r\n\r\n## \uD83D\uDEE1\uFE0F Güvenlik\r\n\r\n- **Dosya Bütünlüğü**: SHA-256 hash ile dosya doğrulama\r\n- **Yerel Depolama**: Tüm veriler cihazda saklanır\r\n- **Güvenli Senkronizasyon**: HTTP üzerinden şifrelenmiş transfer\r\n- **Çakışma Önleme**: Hash tabanlı çakışma tespiti\r\n\r\n## \uD83D\uDCC4 Lisans\r\n\r\nBu proje MIT Lisansı ile lisanslanmıştır.\r\n\r\n## \uD83D\uDC65 Katkıda Bulunma\r\n\r\n1. Bu projeyi fork edin\r\n2. Yeni bir branch oluşturun (`git checkout -b feature/AmazingFeature`)\r\n3. Değişikliklerinizi commit edin (`git commit -m 'Add some AmazingFeature'`)\r\n4. Branch'inizi push edin (`git push origin feature/AmazingFeature`)\r\n5. Pull Request oluşturun\r\n\r\n## \uD83D\uDC1B Hata Bildirimi\r\n\r\nHerhangi bir hata veya öneriniz varsa, lütfen [Issues](https://github.com/username/arsiv_uygulamasi/issues) sayfasından bildiriniz.\r\n\r\n## \uD83D\uDCE7 İletişim\r\n\r\n- **Email**: mehmetkarataslar@gmail.com\r\n- **GitHub**: [@mehmet-karataslar](https://github.com/umehmet-karataslar)\r\n\r\n---\r\n\r\n**Arşivim** ile belgelerinizi organize edin, güvenli bir şekilde saklayın ve cihazlar arasında senkronize edin! \uD83D\uDE80 \r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 7f873ead8e12e13125dc4996a90674136efb4f22)
+++ b/README.md	(date 1751702656509)
@@ -4,8 +4,8 @@
 
 <div align="center">
 
-[![Android APK](https://img.shields.io/badge/Android-APK-brightgreen?style=for-the-badge&logo=android&logoColor=white)](https://github.com/mehmet-karataslar/Arsivim/releases/download/v1.0.0/Arsivcim-v1.0.0-android.apk)
-[![Windows EXE](https://img.shields.io/badge/Windows-EXE-blue?style=for-the-badge&logo=windows&logoColor=white)](https://github.com/mehmet-karataslar/Arsivim/releases/download/v1.0.0/Arsivcim-v1.0.0-windows-x64.zip)
+[![Android APK](https://img.shields.io/badge/Android-APK-brightgreen?style=for-the-badge&logo=android&logoColor=white)](https://github.com/mehmet-karataslar/Arsivim/blob/master/arsiv_uygulamasi/releases/Arsivcim-v1.0.0-android.apk)
+[![Windows EXE](https://img.shields.io/badge/Windows-EXE-blue?style=for-the-badge&logo=windows&logoColor=white)](https://github.com/mehmet-karataslar/Arsivim/blob/master/arsiv_uygulamasi/releases/Arsivcim-v1.0.0-windows-x64.zip)
 
 **📱 Android APK: 38.3 MB** | **💻 Windows x64: 12 MB (ZIP)**
 
Index: arsiv_uygulamasi/lib/services/senkron_manager_enhanced.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'dart:async';\r\nimport 'dart:convert';\r\nimport 'dart:io';\r\nimport 'package:http/http.dart' as http;\r\nimport 'package:mime/mime.dart';\r\nimport 'package:http_parser/http_parser.dart';\r\nimport 'package:path/path.dart' as path;\r\nimport 'package:crypto/crypto.dart';\r\n\r\nimport '../models/belge_modeli.dart';\r\nimport '../models/kategori_modeli.dart';\r\nimport '../models/kisi_modeli.dart';\r\nimport '../models/senkron_cihazi.dart';\r\nimport '../models/senkron_delta.dart';\r\nimport '../models/senkron_metadata.dart';\r\nimport '../models/senkron_operation.dart';\r\nimport '../models/senkron_session.dart';\r\nimport '../utils/yardimci_fonksiyonlar.dart';\r\nimport 'veritabani_servisi.dart';\r\nimport 'dosya_servisi.dart';\r\nimport 'sync_state_tracker.dart';\r\nimport 'document_change_tracker.dart';\r\nimport 'metadata_sync_manager.dart';\r\nimport 'senkron_delta_manager.dart';\r\n\r\n/// Gelişmiş senkronizasyon yöneticisi - Tüm özellikler aktif\r\nclass SenkronManagerEnhanced {\r\n  final VeriTabaniServisi _veriTabani;\r\n  final DosyaServisi _dosyaServisi;\r\n  final SyncStateTracker _stateTracker;\r\n  final DocumentChangeTracker _changeTracker;\r\n  final MetadataSyncManager _metadataManager;\r\n  final SenkronDeltaManager _deltaManager;\r\n\r\n  // Senkronizasyon durumu\r\n  bool _senkronizasyonAktif = false;\r\n  bool _durduruldu = false;\r\n  bool _hataOlustu = false;\r\n  String? _sonHata;\r\n\r\n  // İstatistikler\r\n  int _downloadedDocuments = 0;\r\n  int _uploadedDocuments = 0;\r\n  int _skippedDocuments = 0;\r\n  int _erroredDocuments = 0;\r\n  int _conflictedDocuments = 0;\r\n  int _resolvedConflicts = 0;\r\n\r\n  // Progress tracking\r\n  double _progress = 0.0;\r\n  String _currentOperation = '';\r\n  int _totalOperations = 0;\r\n  int _completedOperations = 0;\r\n\r\n  // Callback'ler\r\n  Function(String)? onLogMessage;\r\n  Function(double)? onProgressUpdate;\r\n  Function(String)? onStatusUpdate;\r\n\r\n  // Configurasyon\r\n  static const Duration _syncTimeout = Duration(seconds: 300);\r\n  static const Duration _retryDelay = Duration(seconds: 2);\r\n  static const int _maxRetries = 3;\r\n\r\n  // Local device ID\r\n  String? _localDeviceId;\r\n\r\n  // Log mesajları\r\n  final List<String> _logMessages = [];\r\n\r\n  SenkronManagerEnhanced(\r\n    this._veriTabani,\r\n    this._dosyaServisi,\r\n    this._stateTracker,\r\n    this._changeTracker,\r\n    this._metadataManager,\r\n    this._deltaManager,\r\n  );\r\n\r\n  // ============== GENEL DURUMU ==============\r\n\r\n  bool get senkronizasyonAktif => _senkronizasyonAktif;\r\n  bool get durduruldu => _durduruldu;\r\n  bool get hataOlustu => _hataOlustu;\r\n  String? get sonHata => _sonHata;\r\n  double get progress => _progress;\r\n  String get currentOperation => _currentOperation;\r\n  List<String> get logMessages => List.from(_logMessages);\r\n\r\n  Map<String, dynamic> get statistics => {\r\n    'downloaded': _downloadedDocuments,\r\n    'uploaded': _uploadedDocuments,\r\n    'skipped': _skippedDocuments,\r\n    'errors': _erroredDocuments,\r\n    'conflicts': _conflictedDocuments,\r\n    'resolved': _resolvedConflicts,\r\n    'total':\r\n        _downloadedDocuments +\r\n        _uploadedDocuments +\r\n        _skippedDocuments +\r\n        _erroredDocuments,\r\n  };\r\n\r\n  // ============== CALLBACK AYARLARI ==============\r\n\r\n  void setCallbacks({\r\n    Function(String)? onLog,\r\n    Function(double)? onProgress,\r\n    Function(String)? onStatus,\r\n  }) {\r\n    onLogMessage = onLog;\r\n    onProgressUpdate = onProgress;\r\n    onStatusUpdate = onStatus;\r\n  }\r\n\r\n  // ============== ANA SENKRONIZASYON METODLARI ==============\r\n\r\n  /// Tam senkronizasyon - Tüm özellikler aktif\r\n  Future<Map<String, dynamic>> performFullSync(\r\n    SenkronCihazi targetDevice, {\r\n    bool bidirectional = true,\r\n    String conflictStrategy = 'LATEST_WINS',\r\n    bool syncMetadata = true,\r\n    bool useDeltaSync = true,\r\n    DateTime? since,\r\n  }) async {\r\n    if (_senkronizasyonAktif) {\r\n      throw Exception('Senkronizasyon zaten aktif');\r\n    }\r\n\r\n    _resetSyncState();\r\n    _senkronizasyonAktif = true;\r\n\r\n    try {\r\n      _updateStatus('Senkronizasyon başlatılıyor...');\r\n      _addLog('\uD83D\uDE80 Gelişmiş senkronizasyon başlatıldı');\r\n      _addLog('   • Hedef cihaz: ${targetDevice.ad} (${targetDevice.ip})');\r\n      _addLog('   • Çift yönlü: ${bidirectional ? \"Evet\" : \"Hayır\"}');\r\n      _addLog('   • Çakışma stratejisi: $conflictStrategy');\r\n      _addLog('   • Metadata sync: ${syncMetadata ? \"Evet\" : \"Hayır\"}');\r\n      _addLog('   • Delta sync: ${useDeltaSync ? \"Evet\" : \"Hayır\"}');\r\n\r\n      // Local device ID'yi al\r\n      _localDeviceId = await _getLocalDeviceId();\r\n\r\n      // Senkronizasyon adımları\r\n      final results = <String, dynamic>{};\r\n\r\n      // 1. Bağlantı testi\r\n      _updateOperation('Bağlantı test ediliyor...');\r\n      final connectionTest = await _testConnection(targetDevice);\r\n      if (!connectionTest['success']) {\r\n        throw Exception('Bağlantı hatası: ${connectionTest['error']}');\r\n      }\r\n      _addLog('✅ Bağlantı başarılı');\r\n\r\n      // 2. Metadata senkronizasyonu\r\n      if (syncMetadata) {\r\n        _updateOperation('Metadata senkronizasyonu...');\r\n        final metadataResult = await _performMetadataSync(targetDevice);\r\n        results['metadata'] = metadataResult;\r\n        _addLog(\r\n          '\uD83D\uDCCB Metadata sync: ${metadataResult['success'] ? \"Başarılı\" : \"Başarısız\"}',\r\n        );\r\n      }\r\n\r\n      // 3. Delta senkronizasyonu veya full sync\r\n      if (useDeltaSync) {\r\n        _updateOperation('Delta senkronizasyonu...');\r\n        final deltaResult = await _performDeltaSync(targetDevice, since: since);\r\n        results['delta'] = deltaResult;\r\n      } else {\r\n        _updateOperation('Full senkronizasyon...');\r\n        final fullResult = await _performFullDocumentSync(targetDevice);\r\n        results['documents'] = fullResult;\r\n      }\r\n\r\n      // 4. Çakışma çözümü\r\n      if (_conflictedDocuments > 0) {\r\n        _updateOperation('Çakışmalar çözülüyor...');\r\n        final conflictResult = await _resolveAllConflicts(\r\n          targetDevice,\r\n          conflictStrategy,\r\n        );\r\n        results['conflicts'] = conflictResult;\r\n        _resolvedConflicts = conflictResult['resolved'] ?? 0;\r\n      }\r\n\r\n      // 5. Temizlik ve optimizasyon\r\n      _updateOperation('Temizlik yapılıyor...');\r\n      await _performCleanup();\r\n\r\n      _updateStatus('Senkronizasyon tamamlandı');\r\n      _addLog('\uD83C\uDF89 Senkronizasyon başarıyla tamamlandı');\r\n      _addLog('   • İndirilen: $_downloadedDocuments');\r\n      _addLog('   • Yüklenen: $_uploadedDocuments');\r\n      _addLog('   • Atlanan: $_skippedDocuments');\r\n      _addLog('   • Hatalı: $_erroredDocuments');\r\n      _addLog('   • Çakışma: $_conflictedDocuments');\r\n      _addLog('   • Çözülen: $_resolvedConflicts');\r\n\r\n      return {\r\n        'success': true,\r\n        'statistics': statistics,\r\n        'results': results,\r\n        'duration': DateTime.now().millisecondsSinceEpoch,\r\n      };\r\n    } catch (e) {\r\n      _hataOlustu = true;\r\n      _sonHata = e.toString();\r\n      _addLog('❌ Senkronizasyon hatası: $e');\r\n      _updateStatus('Senkronizasyon hatası');\r\n\r\n      return {\r\n        'success': false,\r\n        'error': e.toString(),\r\n        'statistics': statistics,\r\n      };\r\n    } finally {\r\n      _senkronizasyonAktif = false;\r\n      _updateProgress(1.0);\r\n    }\r\n  }\r\n\r\n  /// Metadata senkronizasyonu\r\n  Future<Map<String, dynamic>> _performMetadataSync(\r\n    SenkronCihazi targetDevice,\r\n  ) async {\r\n    try {\r\n      _addLog('\uD83D\uDCCB Gelişmiş metadata senkronizasyonu başlatılıyor...');\r\n\r\n      // MetadataSyncManager ile tam senkronizasyon\r\n      final result = await _metadataManager.syncMetadata(\r\n        targetDevice,\r\n        _localDeviceId!,\r\n      );\r\n\r\n      // Basit metadata sync'i de paralel olarak çalıştır (backward compatibility)\r\n      int additionalReceived = 0;\r\n      try {\r\n        // 1. Kategorileri sync et\r\n        final remoteCategories = await _fetchRemoteCategories(targetDevice);\r\n        final categoryResults = await _syncCategories(remoteCategories);\r\n        additionalReceived += categoryResults;\r\n        _addLog('\uD83D\uDCC2 Kategoriler senkronize edildi: $categoryResults yeni');\r\n\r\n        // 2. Kişileri sync et\r\n        final remotePeople = await _fetchRemotePeople(targetDevice);\r\n        final peopleResults = await _syncPeople(remotePeople);\r\n        additionalReceived += peopleResults;\r\n        _addLog('\uD83D\uDC65 Kişiler senkronize edildi: $peopleResults yeni');\r\n      } catch (e) {\r\n        _addLog('⚠\uFE0F Basit metadata sync hatası: $e');\r\n      }\r\n\r\n      final success = (result['errors'] ?? 0) == 0;\r\n      final totalReceived = (result['received'] ?? 0) + additionalReceived;\r\n\r\n      if (success) {\r\n        _addLog('✅ Metadata senkronizasyonu tamamlandı');\r\n        _addLog('   • Gönderilen metadata: ${result['sent'] ?? 0}');\r\n        _addLog('   • Alınan metadata: $totalReceived');\r\n        _addLog('   • Çakışmalar: ${result['conflicts'] ?? 0}');\r\n      }\r\n\r\n      return {\r\n        'success': success,\r\n        'sent': result['sent'] ?? 0,\r\n        'received': totalReceived,\r\n        'conflicts': result['conflicts'] ?? 0,\r\n        'error': success ? null : 'Metadata sync hatası',\r\n      };\r\n    } catch (e) {\r\n      _addLog('❌ Metadata sync hatası: $e');\r\n      return {'success': false, 'error': e.toString()};\r\n    }\r\n  }\r\n\r\n  /// Remote kategorileri al\r\n  Future<List<Map<String, dynamic>>> _fetchRemoteCategories(\r\n    SenkronCihazi device,\r\n  ) async {\r\n    try {\r\n      final response = await http\r\n          .get(\r\n            Uri.parse('http://${device.ip}:8080/categories'),\r\n            headers: {'Accept': 'application/json'},\r\n          )\r\n          .timeout(const Duration(seconds: 15));\r\n\r\n      if (response.statusCode == 200) {\r\n        final data = json.decode(response.body);\r\n        return List<Map<String, dynamic>>.from(data['categories'] ?? []);\r\n      }\r\n      return [];\r\n    } catch (e) {\r\n      _addLog('❌ Remote kategoriler alınamadı: $e');\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /// Remote kişileri al\r\n  Future<List<Map<String, dynamic>>> _fetchRemotePeople(\r\n    SenkronCihazi device,\r\n  ) async {\r\n    try {\r\n      final response = await http\r\n          .get(\r\n            Uri.parse('http://${device.ip}:8080/people'),\r\n            headers: {'Accept': 'application/json'},\r\n          )\r\n          .timeout(const Duration(seconds: 15));\r\n\r\n      if (response.statusCode == 200) {\r\n        final data = json.decode(response.body);\r\n        return List<Map<String, dynamic>>.from(data['people'] ?? []);\r\n      }\r\n      return [];\r\n    } catch (e) {\r\n      _addLog('❌ Remote kişiler alınamadı: $e');\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /// Kategorileri senkronize et\r\n  Future<int> _syncCategories(\r\n    List<Map<String, dynamic>> remoteCategories,\r\n  ) async {\r\n    final localCategories = await _veriTabani.kategorileriGetir();\r\n    int newCount = 0;\r\n\r\n    for (final remoteCategory in remoteCategories) {\r\n      final categoryName = remoteCategory['ad'] ?? remoteCategory['name'];\r\n      if (categoryName == null || categoryName.isEmpty) continue;\r\n\r\n      final exists = localCategories.any(\r\n        (cat) => cat.kategoriAdi == categoryName,\r\n      );\r\n\r\n      if (!exists) {\r\n        final newCategory = KategoriModeli(\r\n          kategoriAdi: categoryName,\r\n          renkKodu:\r\n              remoteCategory['renkKodu'] ??\r\n              remoteCategory['color'] ??\r\n              '#2196F3',\r\n          simgeKodu:\r\n              remoteCategory['simgeKodu'] ?? remoteCategory['icon'] ?? 'folder',\r\n          aciklama: remoteCategory['aciklama'] ?? remoteCategory['description'],\r\n          olusturmaTarihi: DateTime.now(),\r\n        );\r\n\r\n        await _veriTabani.kategoriEkle(newCategory);\r\n        newCount++;\r\n      }\r\n    }\r\n\r\n    return newCount;\r\n  }\r\n\r\n  /// Kişileri senkronize et\r\n  Future<int> _syncPeople(List<Map<String, dynamic>> remotePeople) async {\r\n    final localPeople = await _veriTabani.kisileriGetir();\r\n    int newCount = 0;\r\n\r\n    for (final remotePerson in remotePeople) {\r\n      // Türkçe ve İngilizce field isimleri ile uyumlu hale getir\r\n      final firstName = remotePerson['ad'] ?? remotePerson['firstName'];\r\n      final lastName = remotePerson['soyad'] ?? remotePerson['lastName'];\r\n\r\n      if (firstName == null || lastName == null) continue;\r\n\r\n      final exists = localPeople.any(\r\n        (person) => person.ad == firstName && person.soyad == lastName,\r\n      );\r\n\r\n      if (!exists) {\r\n        final newPerson = KisiModeli(\r\n          ad: firstName,\r\n          soyad: lastName,\r\n          olusturmaTarihi: DateTime.now(),\r\n          guncellemeTarihi: DateTime.now(),\r\n        );\r\n\r\n        await _veriTabani.kisiEkle(newPerson);\r\n        newCount++;\r\n      }\r\n    }\r\n\r\n    return newCount;\r\n  }\r\n\r\n  /// Delta senkronizasyonu\r\n  Future<Map<String, dynamic>> _performDeltaSync(\r\n    SenkronCihazi targetDevice, {\r\n    DateTime? since,\r\n  }) async {\r\n    try {\r\n      // Şimdilik basit delta sync implementasyonu\r\n      final localChanges = await _changeTracker.getChangedDocuments(\r\n        since ?? DateTime.now().subtract(const Duration(days: 1)),\r\n      );\r\n\r\n      // Remote delta'ları al\r\n      final remoteDeltas = await _fetchRemoteDeltas(targetDevice, since);\r\n\r\n      // Remote delta'ları işle\r\n      int processedCount = 0;\r\n      int errorCount = 0;\r\n\r\n      for (final delta in remoteDeltas) {\r\n        try {\r\n          // Delta'yı işle (basit implementasyon)\r\n          processedCount++;\r\n        } catch (e) {\r\n          errorCount++;\r\n          _addLog('❌ Delta işleme hatası: $e');\r\n        }\r\n      }\r\n\r\n      _addLog('\uD83D\uDCE6 Delta sync tamamlandı');\r\n      _addLog('   • Local değişiklikler: ${localChanges.length}');\r\n      _addLog('   • Remote delta: ${remoteDeltas.length}');\r\n      _addLog('   • İşlenen: $processedCount');\r\n      _addLog('   • Hatalar: $errorCount');\r\n\r\n      return {\r\n        'success': true,\r\n        'localChanges': localChanges.length,\r\n        'remoteDeltas': remoteDeltas.length,\r\n        'processed': processedCount,\r\n        'errors': errorCount,\r\n      };\r\n    } catch (e) {\r\n      _addLog('❌ Delta sync hatası: $e');\r\n      return {'success': false, 'error': e.toString()};\r\n    }\r\n  }\r\n\r\n  /// Tam belge senkronizasyonu\r\n  Future<Map<String, dynamic>> _performFullDocumentSync(\r\n    SenkronCihazi targetDevice,\r\n  ) async {\r\n    _addLog('\uD83D\uDCC4 Kapsamlı belge senkronizasyonu başlatılıyor...');\r\n\r\n    int uploaded = 0;\r\n    int downloaded = 0;\r\n    int skipped = 0;\r\n    int errors = 0;\r\n    List<String> errorMessages = [];\r\n\r\n    try {\r\n      // 1. Yerel belgeleri yükle\r\n      try {\r\n        final localDocuments = await _veriTabani.belgeleriGetir();\r\n        _addLog('\uD83D\uDCCB Yerel belgeler: ${localDocuments.length} adet');\r\n\r\n        for (final doc in localDocuments) {\r\n          if (doc.dosyaYolu.isEmpty) continue;\r\n\r\n          try {\r\n            await _uploadDocumentWithRetry(targetDevice, doc);\r\n            uploaded++;\r\n            _addLog('✅ Yüklendi: ${doc.dosyaAdi}');\r\n          } catch (e) {\r\n            errors++;\r\n            final errorMsg = 'Yükleme hatası: ${doc.dosyaAdi} - $e';\r\n            errorMessages.add(errorMsg);\r\n            _addLog('❌ $errorMsg');\r\n          }\r\n        }\r\n      } catch (e) {\r\n        errors++;\r\n        final errorMsg = 'Yerel belge listesi alınamadı: $e';\r\n        errorMessages.add(errorMsg);\r\n        _addLog('❌ $errorMsg');\r\n      }\r\n\r\n      // 2. Uzak belgeleri indir\r\n      try {\r\n        final remoteDocuments = await _fetchRemoteDocuments(targetDevice);\r\n        _addLog('\uD83D\uDCE5 Uzak belgeler: ${remoteDocuments.length} adet');\r\n\r\n        for (final remoteDoc in remoteDocuments) {\r\n          final fileName = remoteDoc['dosyaAdi'] ?? remoteDoc['fileName'];\r\n          if (fileName == null) continue;\r\n\r\n          try {\r\n            // Yerel varlığını kontrol et\r\n            final localExists = await _checkLocalDocumentExists(remoteDoc);\r\n            if (localExists) {\r\n              skipped++;\r\n              _addLog('⏭\uFE0F Zaten mevcut: $fileName');\r\n              continue;\r\n            }\r\n\r\n            await _downloadDocumentWithRetry(targetDevice, remoteDoc);\r\n            downloaded++;\r\n            _addLog('✅ İndirildi: $fileName');\r\n          } catch (e) {\r\n            errors++;\r\n            final errorMsg = 'İndirme hatası: $fileName - $e';\r\n            errorMessages.add(errorMsg);\r\n            _addLog('❌ $errorMsg');\r\n          }\r\n        }\r\n      } catch (e) {\r\n        errors++;\r\n        final errorMsg = 'Uzak belge listesi alınamadı: $e';\r\n        errorMessages.add(errorMsg);\r\n        _addLog('❌ $errorMsg');\r\n      }\r\n\r\n      // 3. Senkronizasyon durumunu güncelle\r\n      try {\r\n        await _stateTracker.updateSyncSession(\r\n          targetDevice.id,\r\n          _localDeviceId!,\r\n          uploaded + downloaded,\r\n          errors,\r\n        );\r\n      } catch (e) {\r\n        _addLog('⚠\uFE0F Sync durumu güncellenemedi: $e');\r\n      }\r\n\r\n      // 4. Değişiklikleri kaydet\r\n      try {\r\n        await _changeTracker.commitChanges(targetDevice.id);\r\n        _addLog('✅ Değişiklikler kaydedildi');\r\n      } catch (e) {\r\n        _addLog('⚠\uFE0F Değişiklikler kaydedilemedi: $e');\r\n      }\r\n\r\n      final success = errors == 0;\r\n\r\n      if (success) {\r\n        _addLog('✅ Belge senkronizasyonu tamamlandı');\r\n      } else {\r\n        _addLog('⚠\uFE0F Belge senkronizasyonu tamamlandı (bazı hatalar ile)');\r\n      }\r\n\r\n      _addLog('   \uD83D\uDCE4 Yüklenen: $uploaded belgeler');\r\n      _addLog('   \uD83D\uDCE5 İndirilen: $downloaded belgeler');\r\n      _addLog('   ⏭\uFE0F Atlanan: $skipped belgeler');\r\n      _addLog('   ❌ Hata: $errors belgeler');\r\n\r\n      return {\r\n        'success': success,\r\n        'uploaded': uploaded,\r\n        'downloaded': downloaded,\r\n        'skipped': skipped,\r\n        'errors': errors,\r\n        'errorMessages': errorMessages,\r\n      };\r\n    } catch (e) {\r\n      _addLog('❌ Kritik belge sync hatası: $e');\r\n      return {\r\n        'success': false,\r\n        'error': e.toString(),\r\n        'uploaded': uploaded,\r\n        'downloaded': downloaded,\r\n        'skipped': skipped,\r\n        'errors': errors + 1,\r\n        'errorMessages': [...errorMessages, e.toString()],\r\n      };\r\n    }\r\n  }\r\n\r\n  /// Retry mekanizması ile belge yükleme\r\n  Future<void> _uploadDocumentWithRetry(\r\n    SenkronCihazi device,\r\n    BelgeModeli doc,\r\n  ) async {\r\n    int retryCount = 0;\r\n    const maxRetries = 3;\r\n\r\n    while (retryCount < maxRetries) {\r\n      try {\r\n        await _uploadDocument(device, doc);\r\n        return; // Başarılı\r\n      } catch (e) {\r\n        retryCount++;\r\n        if (retryCount >= maxRetries) {\r\n          throw Exception('$maxRetries deneme sonrası başarısız: $e');\r\n        }\r\n\r\n        _addLog('⚠\uFE0F Retry $retryCount/$maxRetries: ${doc.dosyaAdi} - $e');\r\n        await Future.delayed(Duration(seconds: retryCount * 2));\r\n      }\r\n    }\r\n  }\r\n\r\n  /// Retry mekanizması ile belge indirme\r\n  Future<void> _downloadDocumentWithRetry(\r\n    SenkronCihazi device,\r\n    Map<String, dynamic> remoteDoc,\r\n  ) async {\r\n    int retryCount = 0;\r\n    const maxRetries = 3;\r\n\r\n    while (retryCount < maxRetries) {\r\n      try {\r\n        await _downloadDocument(device, remoteDoc);\r\n        return; // Başarılı\r\n      } catch (e) {\r\n        retryCount++;\r\n        if (retryCount >= maxRetries) {\r\n          throw Exception('$maxRetries deneme sonrası başarısız: $e');\r\n        }\r\n\r\n        final fileName = remoteDoc['dosyaAdi'] ?? remoteDoc['fileName'];\r\n        _addLog('⚠\uFE0F Retry $retryCount/$maxRetries: $fileName - $e');\r\n        await Future.delayed(Duration(seconds: retryCount * 2));\r\n      }\r\n    }\r\n  }\r\n\r\n  /// Yerel belgenin varlığını kontrol et\r\n  Future<bool> _checkLocalDocumentExists(Map<String, dynamic> remoteDoc) async {\r\n    try {\r\n      final fileName = remoteDoc['dosyaAdi'] ?? remoteDoc['fileName'];\r\n      final expectedHash = remoteDoc['dosyaHash'] ?? remoteDoc['hash'];\r\n\r\n      if (fileName == null || expectedHash == null) return false;\r\n\r\n      final localDocs = await _veriTabani.belgeleriGetir();\r\n      final existingDoc = localDocs.firstWhere(\r\n        (doc) => doc.dosyaAdi == fileName && doc.dosyaHash == expectedHash,\r\n        orElse:\r\n            () => BelgeModeli(\r\n              dosyaAdi: '',\r\n              orijinalDosyaAdi: '',\r\n              dosyaYolu: '',\r\n              dosyaBoyutu: 0,\r\n              dosyaTipi: '',\r\n              dosyaHash: '',\r\n              olusturmaTarihi: DateTime.now(),\r\n              guncellemeTarihi: DateTime.now(),\r\n            ),\r\n      );\r\n\r\n      return existingDoc.dosyaAdi.isNotEmpty;\r\n    } catch (e) {\r\n      _addLog('⚠\uFE0F Yerel belge kontrol hatası: $e');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // ============== YARDIMCI METODLAR ==============\r\n\r\n  /// Bağlantı testi\r\n  Future<Map<String, dynamic>> _testConnection(SenkronCihazi device) async {\r\n    try {\r\n      final response = await http\r\n          .get(\r\n            Uri.parse('http://${device.ip}:8080/ping'),\r\n            headers: {'Content-Type': 'application/json'},\r\n          )\r\n          .timeout(const Duration(seconds: 10));\r\n\r\n      if (response.statusCode == 200) {\r\n        return {'success': true};\r\n      } else {\r\n        return {'success': false, 'error': 'HTTP ${response.statusCode}'};\r\n      }\r\n    } catch (e) {\r\n      return {'success': false, 'error': e.toString()};\r\n    }\r\n  }\r\n\r\n  /// Local device ID'yi al\r\n  Future<String> _getLocalDeviceId() async {\r\n    return 'enhanced_device_${DateTime.now().millisecondsSinceEpoch}';\r\n  }\r\n\r\n  /// Remote belgeleri al\r\n  Future<List<Map<String, dynamic>>> _fetchRemoteDocuments(\r\n    SenkronCihazi device,\r\n  ) async {\r\n    try {\r\n      final response = await http\r\n          .get(\r\n            Uri.parse('http://${device.ip}:8080/documents'),\r\n            headers: {'Content-Type': 'application/json'},\r\n          )\r\n          .timeout(_syncTimeout);\r\n\r\n      if (response.statusCode == 200) {\r\n        final data = json.decode(response.body);\r\n        return List<Map<String, dynamic>>.from(data['documents'] ?? []);\r\n      } else {\r\n        throw Exception('HTTP ${response.statusCode}: ${response.body}');\r\n      }\r\n    } catch (e) {\r\n      throw Exception('Remote belgeler alınamadı: $e');\r\n    }\r\n  }\r\n\r\n  /// Remote delta'ları al\r\n  Future<List<SenkronDelta>> _fetchRemoteDeltas(\r\n    SenkronCihazi device,\r\n    DateTime? since,\r\n  ) async {\r\n    try {\r\n      final uri = Uri.parse('http://${device.ip}:8080/deltas').replace(\r\n        queryParameters:\r\n            since != null ? {'since': since.toIso8601String()} : null,\r\n      );\r\n\r\n      final response = await http.get(\r\n        uri,\r\n        headers: {'Content-Type': 'application/json'},\r\n      );\r\n\r\n      if (response.statusCode == 200) {\r\n        final data = json.decode(response.body);\r\n        final deltaList = List<Map<String, dynamic>>.from(data['deltas'] ?? []);\r\n\r\n        return deltaList.map((deltaData) {\r\n          return SenkronDelta.fromJson(deltaData);\r\n        }).toList();\r\n      } else {\r\n        throw Exception('HTTP ${response.statusCode}');\r\n      }\r\n    } catch (e) {\r\n      _addLog('❌ Remote delta alınamadı: $e');\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /// Local delta'ları gönder\r\n  Future<Map<String, dynamic>> _sendLocalDeltas(\r\n    SenkronCihazi device,\r\n    List<SenkronDelta> deltas,\r\n  ) async {\r\n    try {\r\n      if (deltas.isEmpty) return {'success': true, 'sent': 0};\r\n\r\n      final response = await http\r\n          .post(\r\n            Uri.parse('http://${device.ip}:8080/deltas'),\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: json.encode({\r\n              'deltas': deltas.map((d) => d.toJson()).toList(),\r\n              'sourceDevice': _localDeviceId,\r\n            }),\r\n          )\r\n          .timeout(_syncTimeout);\r\n\r\n      if (response.statusCode == 200) {\r\n        final data = json.decode(response.body);\r\n        return {\r\n          'success': true,\r\n          'sent': deltas.length,\r\n          'accepted': data['accepted'] ?? 0,\r\n        };\r\n      } else {\r\n        throw Exception('HTTP ${response.statusCode}');\r\n      }\r\n    } catch (e) {\r\n      _addLog('❌ Delta gönderme hatası: $e');\r\n      return {'success': false, 'error': e.toString()};\r\n    }\r\n  }\r\n\r\n  /// Belge indirme gerekli mi?\r\n  Future<bool> _shouldDownloadDocument(Map<String, dynamic> remoteDoc) async {\r\n    final hash = remoteDoc['dosyaHash'] ?? remoteDoc['hash'] as String?;\r\n    if (hash == null || hash.isEmpty) return false;\r\n\r\n    // Local belgeler arasında bu hash'e sahip belge var mı kontrol et\r\n    final localDocuments = await _veriTabani.belgeleriGetir();\r\n    final exists = localDocuments.any((doc) => doc.dosyaHash == hash);\r\n\r\n    return !exists; // Yoksa indir\r\n  }\r\n\r\n  /// Belge yükleme gerekli mi?\r\n  Future<bool> _shouldUploadDocument(BelgeModeli localDoc) async {\r\n    if (localDoc.dosyaHash.isEmpty) return false;\r\n\r\n    // Bu methodun çağrıldığı yerde zaten remote belgelerle karşılaştırma yapılıyor\r\n    // Bu nedenle basit bir kontrol yeterli\r\n    return true;\r\n  }\r\n\r\n  /// Belge indirme (tam kapsamlı)\r\n  Future<void> _downloadDocument(\r\n    SenkronCihazi device,\r\n    Map<String, dynamic> remoteDoc,\r\n  ) async {\r\n    // Türkçe field isimleri ile uyumlu hale getir\r\n    final fileName = remoteDoc['dosyaAdi'] ?? remoteDoc['fileName'];\r\n    if (fileName == null) return;\r\n\r\n    final expectedHash = remoteDoc['dosyaHash'] ?? remoteDoc['hash'];\r\n    if (expectedHash == null || expectedHash.isEmpty) {\r\n      throw Exception('Hash bilgisi eksik');\r\n    }\r\n\r\n    // State tracking kontrolü\r\n    final alreadySynced = await _stateTracker.isSynced(expectedHash, device.id);\r\n    if (alreadySynced) {\r\n      _addLog('⏭\uFE0F Zaten senkronize edilmiş: $fileName');\r\n      return;\r\n    }\r\n\r\n    _addLog('\uD83D\uDCE5 İndiriliyor: $fileName');\r\n\r\n    // Dosyayı indir\r\n    final response = await http\r\n        .get(Uri.parse('http://${device.ip}:8080/download/$fileName'))\r\n        .timeout(const Duration(seconds: 60));\r\n\r\n    if (response.statusCode != 200) {\r\n      throw Exception('HTTP ${response.statusCode}');\r\n    }\r\n\r\n    // Hash kontrolü - kritik güvenlik önlemi\r\n    final downloadedHash = sha256.convert(response.bodyBytes).toString();\r\n    if (downloadedHash != expectedHash) {\r\n      throw Exception(\r\n        'Hash uyumsuzlığı - beklenen: $expectedHash, alınan: $downloadedHash',\r\n      );\r\n    }\r\n\r\n    // Dosyayı kaydet\r\n    final belgelerKlasoru = await _dosyaServisi.belgelerKlasoruYolu();\r\n    final filePath = '$belgelerKlasoru/$fileName';\r\n\r\n    final file = File(filePath);\r\n    await file.writeAsBytes(response.bodyBytes);\r\n\r\n    // Dosya integrity check\r\n    final savedFileHash = sha256.convert(await file.readAsBytes()).toString();\r\n    if (savedFileHash != expectedHash) {\r\n      await file.delete();\r\n      throw Exception('Dosya kaydedilirken hash bozuldu');\r\n    }\r\n\r\n    // Veritabanına kaydet - tam metadata ile\r\n    final belge = BelgeModeli(\r\n      dosyaAdi: fileName,\r\n      orijinalDosyaAdi: fileName,\r\n      dosyaYolu: filePath,\r\n      dosyaBoyutu: response.bodyBytes.length,\r\n      dosyaTipi: remoteDoc['dosyaTipi'] ?? remoteDoc['fileType'] ?? 'unknown',\r\n      dosyaHash: downloadedHash,\r\n      olusturmaTarihi: DateTime.now(),\r\n      guncellemeTarihi: DateTime.now(),\r\n      kategoriId: remoteDoc['kategoriId'] ?? remoteDoc['categoryId'] ?? 1,\r\n      kisiId: remoteDoc['kisiId'] ?? remoteDoc['personId'],\r\n      baslik: remoteDoc['baslik'] ?? remoteDoc['title'],\r\n      aciklama: remoteDoc['aciklama'] ?? remoteDoc['description'],\r\n      etiketler:\r\n          remoteDoc['etiketler']?.cast<String>() ??\r\n          remoteDoc['tags']?.cast<String>(),\r\n    );\r\n\r\n    final belgeId = await _veriTabani.belgeEkle(belge);\r\n\r\n    // Change tracking - tam implementasyon\r\n    final dummyPreviousBelge = BelgeModeli(\r\n      dosyaAdi: fileName,\r\n      orijinalDosyaAdi: fileName,\r\n      dosyaYolu: '',\r\n      dosyaBoyutu: 0,\r\n      dosyaTipi: '',\r\n      dosyaHash: '',\r\n      olusturmaTarihi: DateTime.now(),\r\n      guncellemeTarihi: DateTime.now(),\r\n    );\r\n\r\n    await _changeTracker.trackDocumentChanges(\r\n      dummyPreviousBelge,\r\n      belge.copyWith(id: belgeId),\r\n      device.id,\r\n    );\r\n\r\n    // State tracking güncelle - senkronizasyon başarılı\r\n    await _stateTracker.markAsSynced(\r\n      expectedHash,\r\n      fileName,\r\n      device.id,\r\n      _localDeviceId!,\r\n    );\r\n\r\n    _addLog(\r\n      '✅ İndirildi ve kayıt edildi: $fileName (${response.bodyBytes.length} bytes)',\r\n    );\r\n  }\r\n\r\n  /// Belge yükleme (tam kapsamlı)\r\n  Future<void> _uploadDocument(\r\n    SenkronCihazi device,\r\n    BelgeModeli localDoc,\r\n  ) async {\r\n    final dosya = File(localDoc.dosyaYolu);\r\n    if (!await dosya.exists()) {\r\n      throw Exception('Dosya bulunamadı: ${localDoc.dosyaYolu}');\r\n    }\r\n\r\n    // Hash kontrolü - dosya bütünlüğünü garanti et\r\n    final fileBytes = await dosya.readAsBytes();\r\n    final currentHash = sha256.convert(fileBytes).toString();\r\n\r\n    if (localDoc.dosyaHash.isNotEmpty && currentHash != localDoc.dosyaHash) {\r\n      throw Exception('Dosya hash\\'i değişmiş - belge bozulmuş olabilir');\r\n    }\r\n\r\n    // State tracking kontrolü\r\n    final alreadySynced = await _stateTracker.isSynced(currentHash, device.id);\r\n    if (alreadySynced) {\r\n      _addLog('⏭\uFE0F Zaten senkronize edilmiş: ${localDoc.dosyaAdi}');\r\n      return;\r\n    }\r\n\r\n    _addLog('\uD83D\uDCE4 Yükleniyor: ${localDoc.dosyaAdi} (${fileBytes.length} bytes)');\r\n\r\n    // Kişi bilgilerini tam olarak al\r\n    String? kisiAd, kisiSoyad;\r\n    if (localDoc.kisiId != null) {\r\n      try {\r\n        final kisiler = await _veriTabani.kisileriGetir();\r\n        final kisi = kisiler.firstWhere(\r\n          (k) => k.id == localDoc.kisiId,\r\n          orElse:\r\n              () => KisiModeli(\r\n                ad: '',\r\n                soyad: '',\r\n                olusturmaTarihi: DateTime.now(),\r\n                guncellemeTarihi: DateTime.now(),\r\n              ),\r\n        );\r\n        if (kisi.ad.isNotEmpty) {\r\n          kisiAd = kisi.ad;\r\n          kisiSoyad = kisi.soyad;\r\n          _addLog('\uD83D\uDC64 Kişi bilgisi: ${kisi.tamAd}');\r\n        }\r\n      } catch (e) {\r\n        _addLog('⚠\uFE0F Kişi bilgileri alınamadı: $e');\r\n      }\r\n    }\r\n\r\n    // Multipart request oluştur\r\n    final uri = Uri.parse('http://${device.ip}:8080/upload');\r\n    final request = http.MultipartRequest('POST', uri);\r\n\r\n    // Dosya MIME type tespiti\r\n    final mimeType =\r\n        lookupMimeType(localDoc.dosyaYolu) ?? 'application/octet-stream';\r\n    final multipartFile = await http.MultipartFile.fromPath(\r\n      'file',\r\n      localDoc.dosyaYolu,\r\n      contentType: MediaType.parse(mimeType),\r\n    );\r\n    request.files.add(multipartFile);\r\n\r\n    // Tam metadata - HTTP sunucusunun beklediği format\r\n    final metadata = {\r\n      'dosyaAdi': localDoc.dosyaAdi,\r\n      'baslik': localDoc.baslik ?? '',\r\n      'aciklama': localDoc.aciklama ?? '',\r\n      'kategoriId': localDoc.kategoriId ?? 1,\r\n      'kisiId': localDoc.kisiId,\r\n      'kisiAd': kisiAd,\r\n      'kisiSoyad': kisiSoyad,\r\n      'dosyaTipi': localDoc.dosyaTipi,\r\n      'dosyaHash': currentHash,\r\n      'etiketler': localDoc.etiketler,\r\n      'olusturmaTarihi': localDoc.olusturmaTarihi.toIso8601String(),\r\n      'guncellemeTarihi': localDoc.guncellemeTarihi.toIso8601String(),\r\n      'sourceDevice': _localDeviceId,\r\n      'uploadTimestamp': DateTime.now().toIso8601String(),\r\n    };\r\n\r\n    request.fields['metadata'] = json.encode(metadata);\r\n\r\n    // Request headers\r\n    request.headers.addAll({\r\n      'X-Device-ID': _localDeviceId!,\r\n      'X-Upload-Hash': currentHash,\r\n      'X-File-Size': fileBytes.length.toString(),\r\n    });\r\n\r\n    // Yükleme işlemini gerçekleştir\r\n    final response = await request.send().timeout(const Duration(seconds: 120));\r\n\r\n    if (response.statusCode != 200) {\r\n      final responseBody = await response.stream.bytesToString();\r\n      throw Exception('HTTP ${response.statusCode}: $responseBody');\r\n    }\r\n\r\n    // Response'u kontrol et\r\n    final responseBody = await response.stream.bytesToString();\r\n    try {\r\n      final responseData = json.decode(responseBody);\r\n      if (responseData['status'] == 'error') {\r\n        throw Exception('Server hatası: ${responseData['message']}');\r\n      }\r\n\r\n      if (responseData['duplicate'] == true) {\r\n        _addLog('⚠\uFE0F Duplicate dosya: ${localDoc.dosyaAdi}');\r\n      } else {\r\n        _addLog('✅ Başarıyla yüklendi: ${responseData['fileName']}');\r\n      }\r\n    } catch (e) {\r\n      _addLog('⚠\uFE0F Response parse hatası: $e');\r\n    }\r\n\r\n    // Change tracking - yükleme işlemini kaydet\r\n    await _changeTracker.trackDocumentChanges(\r\n      localDoc,\r\n      localDoc.copyWith(guncellemeTarihi: DateTime.now()),\r\n      device.id,\r\n    );\r\n\r\n    // State tracking güncelle - yükleme başarılı\r\n    await _stateTracker.markAsSynced(\r\n      currentHash,\r\n      localDoc.dosyaAdi,\r\n      device.id,\r\n      _localDeviceId!,\r\n    );\r\n\r\n    _addLog('\uD83D\uDCE4 Yükleme tamamlandı: ${localDoc.dosyaAdi}');\r\n  }\r\n\r\n  // ============== ÇAKIŞMA ÇÖZÜMÜ ==============\r\n\r\n  /// Tüm çakışmaları çöz\r\n  Future<Map<String, dynamic>> _resolveAllConflicts(\r\n    SenkronCihazi device,\r\n    String strategy,\r\n  ) async {\r\n    try {\r\n      // Çakışan belgeleri al (Bu örnekte basit bir yaklaşım)\r\n      final conflicts = <Map<String, dynamic>>[];\r\n\r\n      int resolved = 0;\r\n      int failed = 0;\r\n\r\n      for (final conflict in conflicts) {\r\n        try {\r\n          await _resolveConflict(device, conflict, strategy);\r\n          resolved++;\r\n        } catch (e) {\r\n          failed++;\r\n          _addLog('❌ Çakışma çözüm hatası: $e');\r\n        }\r\n      }\r\n\r\n      return {\r\n        'success': true,\r\n        'resolved': resolved,\r\n        'failed': failed,\r\n        'total': conflicts.length,\r\n      };\r\n    } catch (e) {\r\n      return {'success': false, 'error': e.toString()};\r\n    }\r\n  }\r\n\r\n  /// Tek çakışma çöz\r\n  Future<void> _resolveConflict(\r\n    SenkronCihazi device,\r\n    Map<String, dynamic> conflict,\r\n    String strategy,\r\n  ) async {\r\n    switch (strategy) {\r\n      case 'LATEST_WINS':\r\n        // En son güncellenen kazansın\r\n        break;\r\n      case 'LOCAL_WINS':\r\n        // Local kazansın\r\n        break;\r\n      case 'REMOTE_WINS':\r\n        // Remote kazansın\r\n        break;\r\n      case 'MANUAL':\r\n        // Manuel çözüm (şimdilik latest wins)\r\n        break;\r\n    }\r\n  }\r\n\r\n  // ============== TEMİZLİK VE OPTİMİZASYON ==============\r\n\r\n  /// Temizlik işlemleri\r\n  Future<void> _performCleanup() async {\r\n    try {\r\n      // Eski sync state'leri temizle\r\n      await _stateTracker.clearSyncState();\r\n\r\n      // Temizlik tamamlandı\r\n      _addLog('\uD83E\uDDF9 Temizlik tamamlandı');\r\n    } catch (e) {\r\n      _addLog('⚠\uFE0F Temizlik hatası: $e');\r\n    }\r\n  }\r\n\r\n  // ============== DURUM YÖNETİMİ ==============\r\n\r\n  /// Senkronizasyonu durdur\r\n  void stopSync() {\r\n    _durduruldu = true;\r\n    _updateStatus('Senkronizasyon durduruluyor...');\r\n    _addLog('⏹\uFE0F Senkronizasyon durduruldu');\r\n  }\r\n\r\n  /// Senkronizasyon durumunu sıfırla\r\n  void _resetSyncState() {\r\n    _durduruldu = false;\r\n    _hataOlustu = false;\r\n    _sonHata = null;\r\n    _downloadedDocuments = 0;\r\n    _uploadedDocuments = 0;\r\n    _skippedDocuments = 0;\r\n    _erroredDocuments = 0;\r\n    _conflictedDocuments = 0;\r\n    _resolvedConflicts = 0;\r\n    _progress = 0.0;\r\n    _currentOperation = '';\r\n    _totalOperations = 0;\r\n    _completedOperations = 0;\r\n    _logMessages.clear();\r\n  }\r\n\r\n  /// Progress güncelle\r\n  void _updateProgress(double progress) {\r\n    _progress = progress.clamp(0.0, 1.0);\r\n    onProgressUpdate?.call(_progress);\r\n  }\r\n\r\n  /// İşlem durumunu güncelle\r\n  void _updateOperation(String operation) {\r\n    _currentOperation = operation;\r\n    _addLog('\uD83D\uDD04 $operation');\r\n  }\r\n\r\n  /// Durum güncelle\r\n  void _updateStatus(String status) {\r\n    onStatusUpdate?.call(status);\r\n  }\r\n\r\n  /// Log mesajı ekle\r\n  void _addLog(String message) {\r\n    final timestamp = DateTime.now().toIso8601String().substring(11, 19);\r\n    final logMessage = '[$timestamp] $message';\r\n    _logMessages.add(logMessage);\r\n    onLogMessage?.call(logMessage);\r\n\r\n    // Log limitini kontrol et\r\n    if (_logMessages.length > 1000) {\r\n      _logMessages.removeRange(0, 500);\r\n    }\r\n  }\r\n\r\n  // ============== DISPOSE ==============\r\n\r\n  void dispose() {\r\n    _senkronizasyonAktif = false;\r\n    _durduruldu = true;\r\n    _logMessages.clear();\r\n    onLogMessage = null;\r\n    onProgressUpdate = null;\r\n    onStatusUpdate = null;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/arsiv_uygulamasi/lib/services/senkron_manager_enhanced.dart b/arsiv_uygulamasi/lib/services/senkron_manager_enhanced.dart
--- a/arsiv_uygulamasi/lib/services/senkron_manager_enhanced.dart	(revision 7f873ead8e12e13125dc4996a90674136efb4f22)
+++ b/arsiv_uygulamasi/lib/services/senkron_manager_enhanced.dart	(date 1751701629347)
@@ -441,7 +441,7 @@
   Future<Map<String, dynamic>> _performFullDocumentSync(
     SenkronCihazi targetDevice,
   ) async {
-    _addLog('📄 Kapsamlı belge senkronizasyonu başlatılıyor...');
+    _addLog('📄 Basitleştirilmiş belge senkronizasyonu başlatılıyor...');
 
     int uploaded = 0;
     int downloaded = 0;
@@ -459,9 +459,8 @@
           if (doc.dosyaYolu.isEmpty) continue;
 
           try {
-            await _uploadDocumentWithRetry(targetDevice, doc);
+            await _uploadDocument(targetDevice, doc); // Direkt çağır
             uploaded++;
-            _addLog('✅ Yüklendi: ${doc.dosyaAdi}');
           } catch (e) {
             errors++;
             final errorMsg = 'Yükleme hatası: ${doc.dosyaAdi} - $e';
@@ -486,17 +485,20 @@
           if (fileName == null) continue;
 
           try {
-            // Yerel varlığını kontrol et
-            final localExists = await _checkLocalDocumentExists(remoteDoc);
+            // Basit yerel varlık kontrolü
+            final localDocs = await _veriTabani.belgeleriGetir();
+            final localExists = localDocs.any(
+              (doc) => doc.dosyaAdi == fileName,
+            );
+
             if (localExists) {
               skipped++;
               _addLog('⏭️ Zaten mevcut: $fileName');
               continue;
             }
 
-            await _downloadDocumentWithRetry(targetDevice, remoteDoc);
+            await _downloadDocument(targetDevice, remoteDoc); // Direkt çağır
             downloaded++;
-            _addLog('✅ İndirildi: $fileName');
           } catch (e) {
             errors++;
             final errorMsg = 'İndirme hatası: $fileName - $e';
@@ -506,46 +508,30 @@
         }
       } catch (e) {
         errors++;
-        final errorMsg = 'Uzak belge listesi alınamadı: $e';
+        final errorMsg = 'Remote belge listesi alınamadı: $e';
         errorMessages.add(errorMsg);
         _addLog('❌ $errorMsg');
       }
 
-      // 3. Senkronizasyon durumunu güncelle
-      try {
-        await _stateTracker.updateSyncSession(
-          targetDevice.id,
-          _localDeviceId!,
-          uploaded + downloaded,
-          errors,
-        );
-      } catch (e) {
-        _addLog('⚠️ Sync durumu güncellenemedi: $e');
-      }
+      // Sonuç raporu
+      _addLog('📊 Belge senkronizasyonu tamamlandı:');
+      _addLog('   • Yüklenen: $uploaded');
+      _addLog('   • İndirilen: $downloaded');
+      _addLog('   • Atlanan: $skipped');
+      _addLog('   • Hatalar: $errors');
 
-      // 4. Değişiklikleri kaydet
-      try {
-        await _changeTracker.commitChanges(targetDevice.id);
-        _addLog('✅ Değişiklikler kaydedildi');
-      } catch (e) {
-        _addLog('⚠️ Değişiklikler kaydedilemedi: $e');
-      }
-
-      final success = errors == 0;
-
-      if (success) {
-        _addLog('✅ Belge senkronizasyonu tamamlandı');
-      } else {
-        _addLog('⚠️ Belge senkronizasyonu tamamlandı (bazı hatalar ile)');
+      if (errorMessages.isNotEmpty) {
+        _addLog('⚠️ Hata detayları:');
+        for (final error in errorMessages.take(5)) {
+          _addLog('   • $error');
+        }
+        if (errorMessages.length > 5) {
+          _addLog('   • ... ve ${errorMessages.length - 5} hata daha');
+        }
       }
-
-      _addLog('   📤 Yüklenen: $uploaded belgeler');
-      _addLog('   📥 İndirilen: $downloaded belgeler');
-      _addLog('   ⏭️ Atlanan: $skipped belgeler');
-      _addLog('   ❌ Hata: $errors belgeler');
 
       return {
-        'success': success,
+        'success': errors == 0,
         'uploaded': uploaded,
         'downloaded': downloaded,
         'skipped': skipped,
@@ -553,98 +539,17 @@
         'errorMessages': errorMessages,
       };
     } catch (e) {
-      _addLog('❌ Kritik belge sync hatası: $e');
+      _addLog('❌ Belge senkronizasyonu kritik hatası: $e');
       return {
         'success': false,
-        'error': e.toString(),
         'uploaded': uploaded,
         'downloaded': downloaded,
         'skipped': skipped,
         'errors': errors + 1,
-        'errorMessages': [...errorMessages, e.toString()],
+        'errorMessages': errorMessages + [e.toString()],
       };
     }
   }
-
-  /// Retry mekanizması ile belge yükleme
-  Future<void> _uploadDocumentWithRetry(
-    SenkronCihazi device,
-    BelgeModeli doc,
-  ) async {
-    int retryCount = 0;
-    const maxRetries = 3;
-
-    while (retryCount < maxRetries) {
-      try {
-        await _uploadDocument(device, doc);
-        return; // Başarılı
-      } catch (e) {
-        retryCount++;
-        if (retryCount >= maxRetries) {
-          throw Exception('$maxRetries deneme sonrası başarısız: $e');
-        }
-
-        _addLog('⚠️ Retry $retryCount/$maxRetries: ${doc.dosyaAdi} - $e');
-        await Future.delayed(Duration(seconds: retryCount * 2));
-      }
-    }
-  }
-
-  /// Retry mekanizması ile belge indirme
-  Future<void> _downloadDocumentWithRetry(
-    SenkronCihazi device,
-    Map<String, dynamic> remoteDoc,
-  ) async {
-    int retryCount = 0;
-    const maxRetries = 3;
-
-    while (retryCount < maxRetries) {
-      try {
-        await _downloadDocument(device, remoteDoc);
-        return; // Başarılı
-      } catch (e) {
-        retryCount++;
-        if (retryCount >= maxRetries) {
-          throw Exception('$maxRetries deneme sonrası başarısız: $e');
-        }
-
-        final fileName = remoteDoc['dosyaAdi'] ?? remoteDoc['fileName'];
-        _addLog('⚠️ Retry $retryCount/$maxRetries: $fileName - $e');
-        await Future.delayed(Duration(seconds: retryCount * 2));
-      }
-    }
-  }
-
-  /// Yerel belgenin varlığını kontrol et
-  Future<bool> _checkLocalDocumentExists(Map<String, dynamic> remoteDoc) async {
-    try {
-      final fileName = remoteDoc['dosyaAdi'] ?? remoteDoc['fileName'];
-      final expectedHash = remoteDoc['dosyaHash'] ?? remoteDoc['hash'];
-
-      if (fileName == null || expectedHash == null) return false;
-
-      final localDocs = await _veriTabani.belgeleriGetir();
-      final existingDoc = localDocs.firstWhere(
-        (doc) => doc.dosyaAdi == fileName && doc.dosyaHash == expectedHash,
-        orElse:
-            () => BelgeModeli(
-              dosyaAdi: '',
-              orijinalDosyaAdi: '',
-              dosyaYolu: '',
-              dosyaBoyutu: 0,
-              dosyaTipi: '',
-              dosyaHash: '',
-              olusturmaTarihi: DateTime.now(),
-              guncellemeTarihi: DateTime.now(),
-            ),
-      );
-
-      return existingDoc.dosyaAdi.isNotEmpty;
-    } catch (e) {
-      _addLog('⚠️ Yerel belge kontrol hatası: $e');
-      return false;
-    }
-  }
 
   // ============== YARDIMCI METODLAR ==============
 
@@ -784,7 +689,7 @@
     return true;
   }
 
-  /// Belge indirme (tam kapsamlı)
+  /// Belge indirme (basitleştirilmiş)
   Future<void> _downloadDocument(
     SenkronCihazi device,
     Map<String, dynamic> remoteDoc,
@@ -793,18 +698,6 @@
     final fileName = remoteDoc['dosyaAdi'] ?? remoteDoc['fileName'];
     if (fileName == null) return;
 
-    final expectedHash = remoteDoc['dosyaHash'] ?? remoteDoc['hash'];
-    if (expectedHash == null || expectedHash.isEmpty) {
-      throw Exception('Hash bilgisi eksik');
-    }
-
-    // State tracking kontrolü
-    final alreadySynced = await _stateTracker.isSynced(expectedHash, device.id);
-    if (alreadySynced) {
-      _addLog('⏭️ Zaten senkronize edilmiş: $fileName');
-      return;
-    }
-
     _addLog('📥 İndiriliyor: $fileName');
 
     // Dosyayı indir
@@ -816,12 +709,12 @@
       throw Exception('HTTP ${response.statusCode}');
     }
 
-    // Hash kontrolü - kritik güvenlik önlemi
+    // Hash kontrolü
     final downloadedHash = sha256.convert(response.bodyBytes).toString();
-    if (downloadedHash != expectedHash) {
-      throw Exception(
-        'Hash uyumsuzlığı - beklenen: $expectedHash, alınan: $downloadedHash',
-      );
+    final expectedHash = remoteDoc['dosyaHash'] ?? remoteDoc['hash'];
+
+    if (expectedHash != null && downloadedHash != expectedHash) {
+      throw Exception('Hash uyumsuzlığı');
     }
 
     // Dosyayı kaydet
@@ -831,14 +724,7 @@
     final file = File(filePath);
     await file.writeAsBytes(response.bodyBytes);
 
-    // Dosya integrity check
-    final savedFileHash = sha256.convert(await file.readAsBytes()).toString();
-    if (savedFileHash != expectedHash) {
-      await file.delete();
-      throw Exception('Dosya kaydedilirken hash bozuldu');
-    }
-
-    // Veritabanına kaydet - tam metadata ile
+    // Veritabanına kaydet
     final belge = BelgeModeli(
       dosyaAdi: fileName,
       orijinalDosyaAdi: fileName,
@@ -857,40 +743,11 @@
           remoteDoc['tags']?.cast<String>(),
     );
 
-    final belgeId = await _veriTabani.belgeEkle(belge);
-
-    // Change tracking - tam implementasyon
-    final dummyPreviousBelge = BelgeModeli(
-      dosyaAdi: fileName,
-      orijinalDosyaAdi: fileName,
-      dosyaYolu: '',
-      dosyaBoyutu: 0,
-      dosyaTipi: '',
-      dosyaHash: '',
-      olusturmaTarihi: DateTime.now(),
-      guncellemeTarihi: DateTime.now(),
-    );
-
-    await _changeTracker.trackDocumentChanges(
-      dummyPreviousBelge,
-      belge.copyWith(id: belgeId),
-      device.id,
-    );
-
-    // State tracking güncelle - senkronizasyon başarılı
-    await _stateTracker.markAsSynced(
-      expectedHash,
-      fileName,
-      device.id,
-      _localDeviceId!,
-    );
-
-    _addLog(
-      '✅ İndirildi ve kayıt edildi: $fileName (${response.bodyBytes.length} bytes)',
-    );
+    await _veriTabani.belgeEkle(belge);
+    _addLog('✅ İndirildi: $fileName');
   }
 
-  /// Belge yükleme (tam kapsamlı)
+  /// Belge yükleme (basitleştirilmiş)
   Future<void> _uploadDocument(
     SenkronCihazi device,
     BelgeModeli localDoc,
@@ -900,24 +757,9 @@
       throw Exception('Dosya bulunamadı: ${localDoc.dosyaYolu}');
     }
 
-    // Hash kontrolü - dosya bütünlüğünü garanti et
-    final fileBytes = await dosya.readAsBytes();
-    final currentHash = sha256.convert(fileBytes).toString();
-
-    if (localDoc.dosyaHash.isNotEmpty && currentHash != localDoc.dosyaHash) {
-      throw Exception('Dosya hash\'i değişmiş - belge bozulmuş olabilir');
-    }
+    _addLog('📤 Yükleniyor: ${localDoc.dosyaAdi}');
 
-    // State tracking kontrolü
-    final alreadySynced = await _stateTracker.isSynced(currentHash, device.id);
-    if (alreadySynced) {
-      _addLog('⏭️ Zaten senkronize edilmiş: ${localDoc.dosyaAdi}');
-      return;
-    }
-
-    _addLog('📤 Yükleniyor: ${localDoc.dosyaAdi} (${fileBytes.length} bytes)');
-
-    // Kişi bilgilerini tam olarak al
+    // Kişi bilgilerini al
     String? kisiAd, kisiSoyad;
     if (localDoc.kisiId != null) {
       try {
@@ -935,18 +777,16 @@
         if (kisi.ad.isNotEmpty) {
           kisiAd = kisi.ad;
           kisiSoyad = kisi.soyad;
-          _addLog('👤 Kişi bilgisi: ${kisi.tamAd}');
         }
       } catch (e) {
         _addLog('⚠️ Kişi bilgileri alınamadı: $e');
       }
     }
 
-    // Multipart request oluştur
+    // Multipart request
     final uri = Uri.parse('http://${device.ip}:8080/upload');
     final request = http.MultipartRequest('POST', uri);
 
-    // Dosya MIME type tespiti
     final mimeType =
         lookupMimeType(localDoc.dosyaYolu) ?? 'application/octet-stream';
     final multipartFile = await http.MultipartFile.fromPath(
@@ -956,74 +796,44 @@
     );
     request.files.add(multipartFile);
 
-    // Tam metadata - HTTP sunucusunun beklediği format
+    // Metadata - HTTP sunucusunun beklediği format
     final metadata = {
       'dosyaAdi': localDoc.dosyaAdi,
       'baslik': localDoc.baslik ?? '',
       'aciklama': localDoc.aciklama ?? '',
-      'kategoriId': localDoc.kategoriId ?? 1,
-      'kisiId': localDoc.kisiId,
-      'kisiAd': kisiAd,
-      'kisiSoyad': kisiSoyad,
+      'kategoriId': localDoc.kategoriId.toString(),
+      'kisiId': localDoc.kisiId?.toString(),
+      'kisiAd': kisiAd ?? '',
+      'kisiSoyad': kisiSoyad ?? '',
       'dosyaTipi': localDoc.dosyaTipi,
-      'dosyaHash': currentHash,
-      'etiketler': localDoc.etiketler,
+      'dosyaHash': localDoc.dosyaHash,
+      'etiketler': localDoc.etiketler?.join(',') ?? '',
       'olusturmaTarihi': localDoc.olusturmaTarihi.toIso8601String(),
       'guncellemeTarihi': localDoc.guncellemeTarihi.toIso8601String(),
-      'sourceDevice': _localDeviceId,
-      'uploadTimestamp': DateTime.now().toIso8601String(),
     };
 
-    request.fields['metadata'] = json.encode(metadata);
+    // Metadata'yı fields olarak ekle
+    metadata.forEach((key, value) {
+      if (value != null) {
+        request.fields[key] = value.toString();
+      }
+    });
 
-    // Request headers
-    request.headers.addAll({
-      'X-Device-ID': _localDeviceId!,
-      'X-Upload-Hash': currentHash,
-      'X-File-Size': fileBytes.length.toString(),
+    // Backwards compatibility için eski field'lar da
+    request.fields.addAll({
+      'title': localDoc.baslik ?? '',
+      'description': localDoc.aciklama ?? '',
+      'categoryId': localDoc.kategoriId.toString(),
+      'hash': localDoc.dosyaHash,
     });
 
-    // Yükleme işlemini gerçekleştir
-    final response = await request.send().timeout(const Duration(seconds: 120));
+    final response = await request.send().timeout(const Duration(seconds: 60));
 
     if (response.statusCode != 200) {
-      final responseBody = await response.stream.bytesToString();
-      throw Exception('HTTP ${response.statusCode}: $responseBody');
+      throw Exception('HTTP ${response.statusCode}');
     }
-
-    // Response'u kontrol et
-    final responseBody = await response.stream.bytesToString();
-    try {
-      final responseData = json.decode(responseBody);
-      if (responseData['status'] == 'error') {
-        throw Exception('Server hatası: ${responseData['message']}');
-      }
 
-      if (responseData['duplicate'] == true) {
-        _addLog('⚠️ Duplicate dosya: ${localDoc.dosyaAdi}');
-      } else {
-        _addLog('✅ Başarıyla yüklendi: ${responseData['fileName']}');
-      }
-    } catch (e) {
-      _addLog('⚠️ Response parse hatası: $e');
-    }
-
-    // Change tracking - yükleme işlemini kaydet
-    await _changeTracker.trackDocumentChanges(
-      localDoc,
-      localDoc.copyWith(guncellemeTarihi: DateTime.now()),
-      device.id,
-    );
-
-    // State tracking güncelle - yükleme başarılı
-    await _stateTracker.markAsSynced(
-      currentHash,
-      localDoc.dosyaAdi,
-      device.id,
-      _localDeviceId!,
-    );
-
-    _addLog('📤 Yükleme tamamlandı: ${localDoc.dosyaAdi}');
+    _addLog('✅ Yüklendi: ${localDoc.dosyaAdi}');
   }
 
   // ============== ÇAKIŞMA ÇÖZÜMÜ ==============
Index: arsiv_uygulamasi/lib/screens/yeni_belge_ekle_ekrani.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:flutter/material.dart';\r\nimport '../models/belge_modeli.dart';\r\nimport '../models/kategori_modeli.dart';\r\nimport '../models/kisi_modeli.dart';\r\nimport '../services/veritabani_servisi.dart';\r\nimport '../services/dosya_servisi.dart';\r\n\r\nclass YeniBelgeEkleEkrani extends StatefulWidget {\r\n  final BelgeModeli? duzenlenecekBelge;\r\n\r\n  const YeniBelgeEkleEkrani({Key? key, this.duzenlenecekBelge})\r\n    : super(key: key);\r\n\r\n  @override\r\n  State<YeniBelgeEkleEkrani> createState() => _YeniBelgeEkleEkraniState();\r\n}\r\n\r\nclass _YeniBelgeEkleEkraniState extends State<YeniBelgeEkleEkrani>\r\n    with TickerProviderStateMixin {\r\n  final VeriTabaniServisi _veriTabani = VeriTabaniServisi();\r\n  final DosyaServisi _dosyaServisi = DosyaServisi();\r\n\r\n  final TextEditingController _baslikController = TextEditingController();\r\n  final TextEditingController _aciklamaController = TextEditingController();\r\n  final TextEditingController _etiketlerController = TextEditingController();\r\n\r\n  List<KategoriModeli> _kategoriler = [];\r\n  List<KisiModeli> _kisiler = [];\r\n  List<dynamic> _secilenDosyalar = [];\r\n  List<String> _etiketler = [];\r\n\r\n  KategoriModeli? _secilenKategori;\r\n  KisiModeli? _secilenKisi;\r\n  String? _secilenDosyaTuru;\r\n  bool _yukleniyor = true;\r\n  bool _dosyalarIsleniyor = false;\r\n\r\n  late AnimationController _animationController;\r\n  late AnimationController _pulseController;\r\n  late Animation<double> _fadeAnimation;\r\n  late Animation<Offset> _slideAnimation;\r\n  late Animation<double> _pulseAnimation;\r\n\r\n  // Dosya türleri\r\n  final Map<String, Map<String, dynamic>> _dosyaTurleri = {\r\n    'pdf': {\r\n      'ad': 'PDF Belgesi',\r\n      'icon': Icons.picture_as_pdf_rounded,\r\n      'color': Colors.red.shade600,\r\n      'uzantilar': ['pdf'],\r\n      'gradient': [Colors.red.shade400, Colors.red.shade600],\r\n    },\r\n    'doc': {\r\n      'ad': 'Word Belgesi',\r\n      'icon': Icons.description_rounded,\r\n      'color': Colors.blue.shade600,\r\n      'uzantilar': ['doc', 'docx'],\r\n      'gradient': [Colors.blue.shade400, Colors.blue.shade600],\r\n    },\r\n    'xls': {\r\n      'ad': 'Excel Tablosu',\r\n      'icon': Icons.table_chart_rounded,\r\n      'color': Colors.green.shade600,\r\n      'uzantilar': ['xls', 'xlsx'],\r\n      'gradient': [Colors.green.shade400, Colors.green.shade600],\r\n    },\r\n    'ppt': {\r\n      'ad': 'PowerPoint Sunumu',\r\n      'icon': Icons.slideshow_rounded,\r\n      'color': Colors.orange.shade600,\r\n      'uzantilar': ['ppt', 'pptx'],\r\n      'gradient': [Colors.orange.shade400, Colors.orange.shade600],\r\n    },\r\n    'jpg': {\r\n      'ad': 'Resim Dosyası',\r\n      'icon': Icons.image_rounded,\r\n      'color': Colors.purple.shade600,\r\n      'uzantilar': ['jpg', 'jpeg', 'png', 'gif', 'bmp'],\r\n      'gradient': [Colors.purple.shade400, Colors.purple.shade600],\r\n    },\r\n    'video': {\r\n      'ad': 'Video Dosyası',\r\n      'icon': Icons.video_library_rounded,\r\n      'color': Colors.indigo.shade600,\r\n      'uzantilar': ['mp4', 'avi', 'mkv', 'mov'],\r\n      'gradient': [Colors.indigo.shade400, Colors.indigo.shade600],\r\n    },\r\n    'audio': {\r\n      'ad': 'Ses Dosyası',\r\n      'icon': Icons.audiotrack_rounded,\r\n      'color': Colors.teal.shade600,\r\n      'uzantilar': ['mp3', 'wav', 'flac', 'aac'],\r\n      'gradient': [Colors.teal.shade400, Colors.teal.shade600],\r\n    },\r\n    'archive': {\r\n      'ad': 'Arşiv Dosyası',\r\n      'icon': Icons.archive_rounded,\r\n      'color': Colors.brown.shade600,\r\n      'uzantilar': ['zip', 'rar', '7z', 'tar'],\r\n      'gradient': [Colors.brown.shade400, Colors.brown.shade600],\r\n    },\r\n    'other': {\r\n      'ad': 'Diğer',\r\n      'icon': Icons.insert_drive_file_rounded,\r\n      'color': Colors.grey.shade600,\r\n      'uzantilar': ['txt', 'csv', 'json', 'xml'],\r\n      'gradient': [Colors.grey.shade400, Colors.grey.shade600],\r\n    },\r\n  };\r\n\r\n  bool get _duzenlemeModundaMi => widget.duzenlenecekBelge != null;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _animationController = AnimationController(\r\n      duration: const Duration(milliseconds: 1000),\r\n      vsync: this,\r\n    );\r\n\r\n    _pulseController = AnimationController(\r\n      duration: const Duration(milliseconds: 1500),\r\n      vsync: this,\r\n    );\r\n\r\n    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(\r\n      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),\r\n    );\r\n\r\n    _slideAnimation = Tween<Offset>(\r\n      begin: const Offset(0, 0.3),\r\n      end: Offset.zero,\r\n    ).animate(\r\n      CurvedAnimation(parent: _animationController, curve: Curves.easeOutCubic),\r\n    );\r\n\r\n    _pulseAnimation = Tween<double>(begin: 1.0, end: 1.05).animate(\r\n      CurvedAnimation(parent: _pulseController, curve: Curves.easeInOut),\r\n    );\r\n\r\n    _pulseController.repeat(reverse: true);\r\n\r\n    _verileriYukle();\r\n    _duzenlemeVerileriniYukle();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _baslikController.dispose();\r\n    _aciklamaController.dispose();\r\n    _etiketlerController.dispose();\r\n    _animationController.dispose();\r\n    _pulseController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  void _duzenlemeVerileriniYukle() {\r\n    if (_duzenlemeModundaMi) {\r\n      final belge = widget.duzenlenecekBelge!;\r\n      _baslikController.text = belge.baslik ?? '';\r\n      _aciklamaController.text = belge.aciklama ?? '';\r\n      _etiketler = belge.etiketler ?? [];\r\n      _etiketlerController.text = _etiketler.join(', ');\r\n      _secilenDosyaTuru = _dosyaTurunuBelirle(belge.dosyaTipi);\r\n    }\r\n  }\r\n\r\n  String _dosyaTurunuBelirle(String uzanti) {\r\n    for (final entry in _dosyaTurleri.entries) {\r\n      if (entry.value['uzantilar'].contains(uzanti.toLowerCase())) {\r\n        return entry.key;\r\n      }\r\n    }\r\n    return 'other';\r\n  }\r\n\r\n  Future<void> _verileriYukle() async {\r\n    setState(() {\r\n      _yukleniyor = true;\r\n    });\r\n\r\n    try {\r\n      final kategoriler = await _veriTabani.kategorileriGetir();\r\n      final kisiler = await _veriTabani.kisileriGetir();\r\n\r\n      setState(() {\r\n        _kategoriler = kategoriler;\r\n        _kisiler = kisiler;\r\n        _yukleniyor = false;\r\n      });\r\n\r\n      if (_duzenlemeModundaMi) {\r\n        final belge = widget.duzenlenecekBelge!;\r\n        _secilenKategori =\r\n            kategoriler.where((k) => k.id == belge.kategoriId).firstOrNull;\r\n        _secilenKisi = kisiler.where((k) => k.id == belge.kisiId).firstOrNull;\r\n      }\r\n\r\n      _animationController.forward();\r\n    } catch (e) {\r\n      setState(() {\r\n        _yukleniyor = false;\r\n      });\r\n      _hataGoster('Veriler yüklenirken hata oluştu: $e');\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      body: Container(\r\n        decoration: BoxDecoration(\r\n          gradient: LinearGradient(\r\n            begin: Alignment.topLeft,\r\n            end: Alignment.bottomRight,\r\n            colors: [\r\n              Colors.blue.shade50,\r\n              Colors.indigo.shade50,\r\n              Colors.purple.shade50,\r\n            ],\r\n            stops: const [0.0, 0.5, 1.0],\r\n          ),\r\n        ),\r\n        child: SafeArea(\r\n          child: Column(\r\n            children: [\r\n              _buildModernAppBar(),\r\n              Expanded(\r\n                child: _yukleniyor ? _buildYukleniyorWidget() : _buildForm(),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildModernAppBar() {\r\n    return Container(\r\n      margin: const EdgeInsets.all(16),\r\n      padding: const EdgeInsets.all(20),\r\n      decoration: BoxDecoration(\r\n        color: Colors.white,\r\n        borderRadius: BorderRadius.circular(20),\r\n        boxShadow: [\r\n          BoxShadow(\r\n            color: Colors.black.withOpacity(0.1),\r\n            blurRadius: 20,\r\n            offset: const Offset(0, 5),\r\n          ),\r\n        ],\r\n      ),\r\n      child: Row(\r\n        children: [\r\n          Container(\r\n            decoration: BoxDecoration(\r\n              gradient: LinearGradient(\r\n                colors: [Colors.grey.shade200, Colors.grey.shade100],\r\n              ),\r\n              borderRadius: BorderRadius.circular(15),\r\n            ),\r\n            child: Material(\r\n              color: Colors.transparent,\r\n              child: InkWell(\r\n                borderRadius: BorderRadius.circular(15),\r\n                onTap: () => Navigator.of(context).pop(),\r\n                child: Container(\r\n                  padding: const EdgeInsets.all(12),\r\n                  child: Icon(\r\n                    Icons.arrow_back_ios_rounded,\r\n                    color: Colors.grey.shade700,\r\n                    size: 20,\r\n                  ),\r\n                ),\r\n              ),\r\n            ),\r\n          ),\r\n          const SizedBox(width: 16),\r\n          Expanded(\r\n            child: Column(\r\n              crossAxisAlignment: CrossAxisAlignment.start,\r\n              children: [\r\n                Text(\r\n                  _duzenlemeModundaMi ? 'Belge Düzenle' : 'Yeni Belge Ekle',\r\n                  style: const TextStyle(\r\n                    fontSize: 22,\r\n                    fontWeight: FontWeight.bold,\r\n                    color: Colors.black87,\r\n                  ),\r\n                ),\r\n                Text(\r\n                  _duzenlemeModundaMi\r\n                      ? 'Belge bilgilerini güncelleyin'\r\n                      : 'Belgelerinizi organize edin',\r\n                  style: TextStyle(fontSize: 14, color: Colors.grey.shade600),\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n          if ((_secilenDosyalar.isNotEmpty || _duzenlemeModundaMi) &&\r\n              !_dosyalarIsleniyor)\r\n            AnimatedBuilder(\r\n              animation: _pulseAnimation,\r\n              builder: (context, child) {\r\n                return Transform.scale(\r\n                  scale: _pulseAnimation.value,\r\n                  child: Container(\r\n                    decoration: BoxDecoration(\r\n                      gradient: LinearGradient(\r\n                        colors: [Colors.blue.shade400, Colors.purple.shade400],\r\n                      ),\r\n                      borderRadius: BorderRadius.circular(15),\r\n                      boxShadow: [\r\n                        BoxShadow(\r\n                          color: Colors.blue.withOpacity(0.3),\r\n                          blurRadius: 15,\r\n                          offset: const Offset(0, 5),\r\n                        ),\r\n                      ],\r\n                    ),\r\n                    child: Material(\r\n                      color: Colors.transparent,\r\n                      child: InkWell(\r\n                        borderRadius: BorderRadius.circular(15),\r\n                        onTap: _belgelerEkle,\r\n                        child: Container(\r\n                          padding: const EdgeInsets.symmetric(\r\n                            horizontal: 20,\r\n                            vertical: 12,\r\n                          ),\r\n                          child: Row(\r\n                            mainAxisSize: MainAxisSize.min,\r\n                            children: [\r\n                              const Icon(\r\n                                Icons.save_rounded,\r\n                                color: Colors.white,\r\n                                size: 18,\r\n                              ),\r\n                              const SizedBox(width: 8),\r\n                              const Text(\r\n                                'KAYDET',\r\n                                style: TextStyle(\r\n                                  color: Colors.white,\r\n                                  fontWeight: FontWeight.bold,\r\n                                  fontSize: 14,\r\n                                ),\r\n                              ),\r\n                            ],\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                );\r\n              },\r\n            ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildYukleniyorWidget() {\r\n    return Center(\r\n      child: Column(\r\n        mainAxisAlignment: MainAxisAlignment.center,\r\n        children: [\r\n          Container(\r\n            padding: const EdgeInsets.all(30),\r\n            decoration: BoxDecoration(\r\n              color: Colors.white,\r\n              borderRadius: BorderRadius.circular(20),\r\n              boxShadow: [\r\n                BoxShadow(\r\n                  color: Colors.black.withOpacity(0.1),\r\n                  blurRadius: 30,\r\n                  offset: const Offset(0, 10),\r\n                ),\r\n              ],\r\n            ),\r\n            child: Stack(\r\n              alignment: Alignment.center,\r\n              children: [\r\n                SizedBox(\r\n                  width: 60,\r\n                  height: 60,\r\n                  child: CircularProgressIndicator(\r\n                    strokeWidth: 4,\r\n                    valueColor: AlwaysStoppedAnimation<Color>(\r\n                      Colors.blue.shade400,\r\n                    ),\r\n                  ),\r\n                ),\r\n                Icon(\r\n                  Icons.cloud_download_rounded,\r\n                  size: 30,\r\n                  color: Colors.blue.shade400,\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n          const SizedBox(height: 24),\r\n          Text(\r\n            'Veriler yükleniyor...',\r\n            style: TextStyle(\r\n              fontSize: 18,\r\n              color: Colors.grey.shade700,\r\n              fontWeight: FontWeight.w600,\r\n            ),\r\n          ),\r\n          Text(\r\n            'Lütfen bekleyiniz',\r\n            style: TextStyle(fontSize: 14, color: Colors.grey.shade500),\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildForm() {\r\n    return FadeTransition(\r\n      opacity: _fadeAnimation,\r\n      child: SlideTransition(\r\n        position: _slideAnimation,\r\n        child: SingleChildScrollView(\r\n          padding: const EdgeInsets.all(16),\r\n          child: Column(\r\n            children: [\r\n              if (!_duzenlemeModundaMi) _buildDosyaSecmeKarti(),\r\n              if (!_duzenlemeModundaMi) const SizedBox(height: 20),\r\n\r\n              if (_secilenDosyalar.isNotEmpty) _buildSecilenDosyalarKarti(),\r\n              if (_secilenDosyalar.isNotEmpty) const SizedBox(height: 20),\r\n\r\n              if (!_duzenlemeModundaMi) _buildDosyaTuruSecimi(),\r\n              if (!_duzenlemeModundaMi) const SizedBox(height: 20),\r\n\r\n              _buildBelgeBilgileriKarti(),\r\n              const SizedBox(height: 20),\r\n\r\n              _buildKategoriVeKisiKarti(),\r\n              const SizedBox(height: 20),\r\n\r\n              _buildEtiketlerKarti(),\r\n              const SizedBox(height: 100),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildDosyaSecmeKarti() {\r\n    return Container(\r\n      width: double.infinity,\r\n      decoration: BoxDecoration(\r\n        gradient: LinearGradient(\r\n          colors: [Colors.blue.shade400, Colors.purple.shade400],\r\n        ),\r\n        borderRadius: BorderRadius.circular(12),\r\n        boxShadow: [\r\n          BoxShadow(\r\n            color: Colors.blue.withOpacity(0.3),\r\n            blurRadius: 8,\r\n            offset: const Offset(0, 4),\r\n          ),\r\n        ],\r\n      ),\r\n      child: Material(\r\n        color: Colors.transparent,\r\n        child: InkWell(\r\n          borderRadius: BorderRadius.circular(12),\r\n          onTap: _dosyaEkle,\r\n          child: Container(\r\n            padding: const EdgeInsets.symmetric(vertical: 14),\r\n            child: Row(\r\n              mainAxisAlignment: MainAxisAlignment.center,\r\n              children: [\r\n                Icon(\r\n                  _secilenDosyalar.isEmpty\r\n                      ? Icons.cloud_upload_rounded\r\n                      : Icons.check_circle_rounded,\r\n                  color: Colors.white,\r\n                  size: 18,\r\n                ),\r\n                const SizedBox(width: 8),\r\n                Text(\r\n                  _secilenDosyalar.isEmpty\r\n                      ? 'Dosya Seçin'\r\n                      : '${_secilenDosyalar.length} Dosya Seçildi',\r\n                  style: const TextStyle(\r\n                    color: Colors.white,\r\n                    fontWeight: FontWeight.w600,\r\n                    fontSize: 14,\r\n                  ),\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildSecilenDosyalarKarti() {\r\n    return Container(\r\n      decoration: BoxDecoration(\r\n        color: Colors.white,\r\n        borderRadius: BorderRadius.circular(20),\r\n        boxShadow: [\r\n          BoxShadow(\r\n            color: Colors.black.withOpacity(0.08),\r\n            blurRadius: 25,\r\n            offset: const Offset(0, 8),\r\n          ),\r\n        ],\r\n      ),\r\n      child: Padding(\r\n        padding: const EdgeInsets.all(24),\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Row(\r\n              children: [\r\n                Container(\r\n                  padding: const EdgeInsets.all(12),\r\n                  decoration: BoxDecoration(\r\n                    gradient: LinearGradient(\r\n                      colors: [Colors.green.shade400, Colors.green.shade600],\r\n                    ),\r\n                    borderRadius: BorderRadius.circular(12),\r\n                  ),\r\n                  child: const Icon(\r\n                    Icons.check_circle_rounded,\r\n                    color: Colors.white,\r\n                    size: 20,\r\n                  ),\r\n                ),\r\n                const SizedBox(width: 16),\r\n                Expanded(\r\n                  child: Column(\r\n                    crossAxisAlignment: CrossAxisAlignment.start,\r\n                    children: [\r\n                      Text(\r\n                        'Seçilen Dosyalar',\r\n                        style: const TextStyle(\r\n                          fontSize: 18,\r\n                          fontWeight: FontWeight.bold,\r\n                          color: Colors.black87,\r\n                        ),\r\n                      ),\r\n                      Text(\r\n                        '${_secilenDosyalar.length} dosya hazır',\r\n                        style: TextStyle(\r\n                          fontSize: 14,\r\n                          color: Colors.grey.shade600,\r\n                        ),\r\n                      ),\r\n                    ],\r\n                  ),\r\n                ),\r\n              ],\r\n            ),\r\n            const SizedBox(height: 20),\r\n            ListView.separated(\r\n              shrinkWrap: true,\r\n              physics: const NeverScrollableScrollPhysics(),\r\n              itemCount: _secilenDosyalar.length,\r\n              separatorBuilder: (context, index) => const SizedBox(height: 12),\r\n              itemBuilder: (context, index) {\r\n                final dosya = _secilenDosyalar[index];\r\n                return Container(\r\n                  padding: const EdgeInsets.all(16),\r\n                  decoration: BoxDecoration(\r\n                    color: Colors.grey.shade50,\r\n                    borderRadius: BorderRadius.circular(16),\r\n                    border: Border.all(color: Colors.grey.shade200),\r\n                  ),\r\n                  child: Row(\r\n                    children: [\r\n                      Container(\r\n                        padding: const EdgeInsets.all(10),\r\n                        decoration: BoxDecoration(\r\n                          gradient: LinearGradient(\r\n                            colors: [\r\n                              Colors.blue.shade400,\r\n                              Colors.blue.shade600,\r\n                            ],\r\n                          ),\r\n                          borderRadius: BorderRadius.circular(12),\r\n                        ),\r\n                        child: const Icon(\r\n                          Icons.insert_drive_file_rounded,\r\n                          color: Colors.white,\r\n                          size: 20,\r\n                        ),\r\n                      ),\r\n                      const SizedBox(width: 16),\r\n                      Expanded(\r\n                        child: Column(\r\n                          crossAxisAlignment: CrossAxisAlignment.start,\r\n                          children: [\r\n                            Text(\r\n                              dosya.name,\r\n                              style: const TextStyle(\r\n                                fontWeight: FontWeight.w600,\r\n                                fontSize: 15,\r\n                                color: Colors.black87,\r\n                              ),\r\n                              maxLines: 1,\r\n                              overflow: TextOverflow.ellipsis,\r\n                            ),\r\n                            const SizedBox(height: 4),\r\n                            Container(\r\n                              padding: const EdgeInsets.symmetric(\r\n                                horizontal: 8,\r\n                                vertical: 2,\r\n                              ),\r\n                              decoration: BoxDecoration(\r\n                                color: Colors.blue.shade100,\r\n                                borderRadius: BorderRadius.circular(12),\r\n                              ),\r\n                              child: Text(\r\n                                '${(dosya.size / 1024).toStringAsFixed(1)} KB',\r\n                                style: TextStyle(\r\n                                  color: Colors.blue.shade700,\r\n                                  fontSize: 12,\r\n                                  fontWeight: FontWeight.w500,\r\n                                ),\r\n                              ),\r\n                            ),\r\n                          ],\r\n                        ),\r\n                      ),\r\n                      Container(\r\n                        decoration: BoxDecoration(\r\n                          color: Colors.red.shade100,\r\n                          borderRadius: BorderRadius.circular(10),\r\n                        ),\r\n                        child: Material(\r\n                          color: Colors.transparent,\r\n                          child: InkWell(\r\n                            borderRadius: BorderRadius.circular(10),\r\n                            onTap: () {\r\n                              setState(() {\r\n                                _secilenDosyalar.removeAt(index);\r\n                              });\r\n\r\n                              if (_secilenDosyalar.isNotEmpty) {\r\n                                Future.delayed(\r\n                                  const Duration(milliseconds: 100),\r\n                                  () => _otomatikDosyaTuruAlgila(),\r\n                                );\r\n                              } else {\r\n                                setState(() {\r\n                                  _secilenDosyaTuru = null;\r\n                                });\r\n                              }\r\n                            },\r\n                            child: Container(\r\n                              padding: const EdgeInsets.all(8),\r\n                              child: Icon(\r\n                                Icons.close_rounded,\r\n                                color: Colors.red.shade600,\r\n                                size: 18,\r\n                              ),\r\n                            ),\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    ],\r\n                  ),\r\n                );\r\n              },\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildDosyaTuruSecimi() {\r\n    if (_secilenDosyalar.isNotEmpty && _secilenDosyaTuru == null) {\r\n      WidgetsBinding.instance.addPostFrameCallback((_) {\r\n        _otomatikDosyaTuruAlgila();\r\n      });\r\n    }\r\n\r\n    final secilenTur =\r\n        _secilenDosyaTuru != null ? _dosyaTurleri[_secilenDosyaTuru!] : null;\r\n\r\n    return Container(\r\n      decoration: BoxDecoration(\r\n        color: Colors.white,\r\n        borderRadius: BorderRadius.circular(20),\r\n        boxShadow: [\r\n          BoxShadow(\r\n            color: Colors.black.withOpacity(0.08),\r\n            blurRadius: 25,\r\n            offset: const Offset(0, 8),\r\n          ),\r\n        ],\r\n      ),\r\n      child: Padding(\r\n        padding: const EdgeInsets.all(24),\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Row(\r\n              children: [\r\n                Container(\r\n                  padding: const EdgeInsets.all(12),\r\n                  decoration: BoxDecoration(\r\n                    gradient: LinearGradient(\r\n                      colors:\r\n                          secilenTur != null\r\n                              ? secilenTur['gradient']\r\n                              : [\r\n                                Colors.orange.shade400,\r\n                                Colors.orange.shade600,\r\n                              ],\r\n                    ),\r\n                    borderRadius: BorderRadius.circular(12),\r\n                  ),\r\n                  child: Icon(\r\n                    secilenTur?['icon'] ?? Icons.category_rounded,\r\n                    color: Colors.white,\r\n                    size: 20,\r\n                  ),\r\n                ),\r\n                const SizedBox(width: 16),\r\n                Expanded(\r\n                  child: Column(\r\n                    crossAxisAlignment: CrossAxisAlignment.start,\r\n                    children: [\r\n                      Text(\r\n                        'Dosya Türü',\r\n                        style: const TextStyle(\r\n                          fontSize: 18,\r\n                          fontWeight: FontWeight.bold,\r\n                          color: Colors.black87,\r\n                        ),\r\n                      ),\r\n                      Text(\r\n                        secilenTur != null\r\n                            ? '${secilenTur['ad']} (Otomatik algılandı)'\r\n                            : 'Dosya türünü seçin',\r\n                        style: TextStyle(\r\n                          fontSize: 14,\r\n                          color:\r\n                              secilenTur != null\r\n                                  ? secilenTur['color']\r\n                                  : Colors.grey.shade600,\r\n                          fontWeight:\r\n                              secilenTur != null\r\n                                  ? FontWeight.w500\r\n                                  : FontWeight.normal,\r\n                        ),\r\n                      ),\r\n                    ],\r\n                  ),\r\n                ),\r\n                if (secilenTur != null)\r\n                  Container(\r\n                    padding: const EdgeInsets.symmetric(\r\n                      horizontal: 12,\r\n                      vertical: 6,\r\n                    ),\r\n                    decoration: BoxDecoration(\r\n                      color: secilenTur['color'].withOpacity(0.1),\r\n                      borderRadius: BorderRadius.circular(12),\r\n                      border: Border.all(\r\n                        color: secilenTur['color'].withOpacity(0.3),\r\n                      ),\r\n                    ),\r\n                    child: Row(\r\n                      mainAxisSize: MainAxisSize.min,\r\n                      children: [\r\n                        Icon(\r\n                          Icons.auto_awesome_rounded,\r\n                          size: 14,\r\n                          color: secilenTur['color'],\r\n                        ),\r\n                        const SizedBox(width: 4),\r\n                        Text(\r\n                          'Auto',\r\n                          style: TextStyle(\r\n                            fontSize: 12,\r\n                            color: secilenTur['color'],\r\n                            fontWeight: FontWeight.w600,\r\n                          ),\r\n                        ),\r\n                      ],\r\n                    ),\r\n                  ),\r\n              ],\r\n            ),\r\n            const SizedBox(height: 20),\r\n            Container(\r\n              decoration: BoxDecoration(\r\n                color: Colors.grey.shade50,\r\n                borderRadius: BorderRadius.circular(16),\r\n                border: Border.all(\r\n                  color:\r\n                      secilenTur != null\r\n                          ? secilenTur['color'].withOpacity(0.3)\r\n                          : Colors.grey.shade300,\r\n                  width: 1.5,\r\n                ),\r\n              ),\r\n              child: Theme(\r\n                data: Theme.of(\r\n                  context,\r\n                ).copyWith(dividerColor: Colors.transparent),\r\n                child: ExpansionTile(\r\n                  tilePadding: const EdgeInsets.symmetric(\r\n                    horizontal: 20,\r\n                    vertical: 12,\r\n                  ),\r\n                  childrenPadding: EdgeInsets.zero,\r\n                  leading: Container(\r\n                    padding: const EdgeInsets.all(8),\r\n                    decoration: BoxDecoration(\r\n                      gradient: LinearGradient(\r\n                        colors:\r\n                            secilenTur != null\r\n                                ? secilenTur['gradient']\r\n                                : [Colors.grey.shade300, Colors.grey.shade400],\r\n                      ),\r\n                      borderRadius: BorderRadius.circular(10),\r\n                    ),\r\n                    child: Icon(\r\n                      secilenTur?['icon'] ?? Icons.folder_open_rounded,\r\n                      color: Colors.white,\r\n                      size: 20,\r\n                    ),\r\n                  ),\r\n                  title: Text(\r\n                    secilenTur?['ad'] ?? 'Dosya türü seçin',\r\n                    style: TextStyle(\r\n                      fontSize: 16,\r\n                      fontWeight: FontWeight.w600,\r\n                      color:\r\n                          secilenTur != null\r\n                              ? secilenTur['color']\r\n                              : Colors.grey.shade700,\r\n                    ),\r\n                  ),\r\n                  subtitle: Text(\r\n                    secilenTur != null\r\n                        ? 'Desteklenen: ${secilenTur['uzantilar'].join(', ').toUpperCase()}'\r\n                        : 'Dosya türünü belirlemek için tıklayın',\r\n                    style: TextStyle(fontSize: 12, color: Colors.grey.shade600),\r\n                  ),\r\n                  trailing: Icon(\r\n                    Icons.keyboard_arrow_down_rounded,\r\n                    color:\r\n                        secilenTur != null\r\n                            ? secilenTur['color']\r\n                            : Colors.grey.shade600,\r\n                  ),\r\n                  children: [\r\n                    Container(\r\n                      decoration: BoxDecoration(\r\n                        color: Colors.white,\r\n                        borderRadius: const BorderRadius.only(\r\n                          bottomLeft: Radius.circular(16),\r\n                          bottomRight: Radius.circular(16),\r\n                        ),\r\n                      ),\r\n                      child: Column(\r\n                        children:\r\n                            _dosyaTurleri.entries.map((entry) {\r\n                              final key = entry.key;\r\n                              final value = entry.value;\r\n                              final secili = _secilenDosyaTuru == key;\r\n\r\n                              return Material(\r\n                                color: Colors.transparent,\r\n                                child: InkWell(\r\n                                  onTap: () {\r\n                                    setState(() {\r\n                                      _secilenDosyaTuru = key;\r\n                                    });\r\n                                  },\r\n                                  child: Container(\r\n                                    padding: const EdgeInsets.symmetric(\r\n                                      horizontal: 20,\r\n                                      vertical: 16,\r\n                                    ),\r\n                                    decoration: BoxDecoration(\r\n                                      color:\r\n                                          secili\r\n                                              ? value['color'].withOpacity(0.08)\r\n                                              : Colors.transparent,\r\n                                      border: Border(\r\n                                        top: BorderSide(\r\n                                          color: Colors.grey.shade200,\r\n                                          width: 0.5,\r\n                                        ),\r\n                                      ),\r\n                                    ),\r\n                                    child: Row(\r\n                                      children: [\r\n                                        Container(\r\n                                          padding: const EdgeInsets.all(8),\r\n                                          decoration: BoxDecoration(\r\n                                            gradient: LinearGradient(\r\n                                              colors: value['gradient'],\r\n                                            ),\r\n                                            borderRadius: BorderRadius.circular(\r\n                                              8,\r\n                                            ),\r\n                                          ),\r\n                                          child: Icon(\r\n                                            value['icon'],\r\n                                            color: Colors.white,\r\n                                            size: 18,\r\n                                          ),\r\n                                        ),\r\n                                        const SizedBox(width: 16),\r\n                                        Expanded(\r\n                                          child: Column(\r\n                                            crossAxisAlignment:\r\n                                                CrossAxisAlignment.start,\r\n                                            children: [\r\n                                              Text(\r\n                                                value['ad'],\r\n                                                style: TextStyle(\r\n                                                  fontSize: 15,\r\n                                                  fontWeight:\r\n                                                      secili\r\n                                                          ? FontWeight.w600\r\n                                                          : FontWeight.w500,\r\n                                                  color:\r\n                                                      secili\r\n                                                          ? value['color']\r\n                                                          : Colors\r\n                                                              .grey\r\n                                                              .shade700,\r\n                                                ),\r\n                                              ),\r\n                                              Text(\r\n                                                value['uzantilar']\r\n                                                    .join(', ')\r\n                                                    .toUpperCase(),\r\n                                                style: TextStyle(\r\n                                                  fontSize: 11,\r\n                                                  color: Colors.grey.shade500,\r\n                                                ),\r\n                                              ),\r\n                                            ],\r\n                                          ),\r\n                                        ),\r\n                                        if (secili)\r\n                                          Container(\r\n                                            padding: const EdgeInsets.all(4),\r\n                                            decoration: BoxDecoration(\r\n                                              color: value['color'],\r\n                                              borderRadius:\r\n                                                  BorderRadius.circular(12),\r\n                                            ),\r\n                                            child: const Icon(\r\n                                              Icons.check_rounded,\r\n                                              color: Colors.white,\r\n                                              size: 16,\r\n                                            ),\r\n                                          ),\r\n                                      ],\r\n                                    ),\r\n                                  ),\r\n                                ),\r\n                              );\r\n                            }).toList(),\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _otomatikDosyaTuruAlgila() {\r\n    if (_secilenDosyalar.isEmpty) return;\r\n\r\n    Map<String, int> uzantiSayilari = {};\r\n    Map<String, String> uzantiTurleri = {};\r\n\r\n    for (final dosya in _secilenDosyalar) {\r\n      if (dosya.name.contains('.')) {\r\n        String uzanti = dosya.name.split('.').last.toLowerCase();\r\n        uzantiSayilari[uzanti] = (uzantiSayilari[uzanti] ?? 0) + 1;\r\n\r\n        for (final entry in _dosyaTurleri.entries) {\r\n          if (entry.value['uzantilar'].contains(uzanti)) {\r\n            uzantiTurleri[uzanti] = entry.key;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (uzantiTurleri.isEmpty) return;\r\n\r\n    Map<String, int> turSayilari = {};\r\n    for (final uzanti in uzantiSayilari.keys) {\r\n      String? tur = uzantiTurleri[uzanti];\r\n      if (tur != null) {\r\n        turSayilari[tur] = (turSayilari[tur] ?? 0) + uzantiSayilari[uzanti]!;\r\n      }\r\n    }\r\n\r\n    if (turSayilari.isEmpty) return;\r\n\r\n    String algilanaDosyaTuru =\r\n        turSayilari.entries.reduce((a, b) => a.value > b.value ? a : b).key;\r\n\r\n    if (algilanaDosyaTuru != _secilenDosyaTuru) {\r\n      setState(() {\r\n        _secilenDosyaTuru = algilanaDosyaTuru;\r\n      });\r\n    }\r\n  }\r\n\r\n  Widget _buildBelgeBilgileriKarti() {\r\n    return Container(\r\n      decoration: BoxDecoration(\r\n        color: Colors.white,\r\n        borderRadius: BorderRadius.circular(20),\r\n        boxShadow: [\r\n          BoxShadow(\r\n            color: Colors.black.withOpacity(0.08),\r\n            blurRadius: 25,\r\n            offset: const Offset(0, 8),\r\n          ),\r\n        ],\r\n      ),\r\n      child: Padding(\r\n        padding: const EdgeInsets.all(24),\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Row(\r\n              children: [\r\n                Container(\r\n                  padding: const EdgeInsets.all(12),\r\n                  decoration: BoxDecoration(\r\n                    gradient: LinearGradient(\r\n                      colors: [Colors.blue.shade400, Colors.blue.shade600],\r\n                    ),\r\n                    borderRadius: BorderRadius.circular(12),\r\n                  ),\r\n                  child: const Icon(\r\n                    Icons.edit_rounded,\r\n                    color: Colors.white,\r\n                    size: 20,\r\n                  ),\r\n                ),\r\n                const SizedBox(width: 16),\r\n                const Expanded(\r\n                  child: Column(\r\n                    crossAxisAlignment: CrossAxisAlignment.start,\r\n                    children: [\r\n                      Text(\r\n                        'Belge Bilgileri',\r\n                        style: TextStyle(\r\n                          fontSize: 18,\r\n                          fontWeight: FontWeight.bold,\r\n                          color: Colors.black87,\r\n                        ),\r\n                      ),\r\n                      Text(\r\n                        'Belge detaylarını girin',\r\n                        style: TextStyle(fontSize: 14, color: Colors.grey),\r\n                      ),\r\n                    ],\r\n                  ),\r\n                ),\r\n              ],\r\n            ),\r\n            const SizedBox(height: 24),\r\n            _buildModernTextField(\r\n              controller: _baslikController,\r\n              label: 'Belge Başlığı',\r\n              hint: 'Belge için açıklayıcı bir başlık girin',\r\n              icon: Icons.title_rounded,\r\n              iconColor: Colors.blue.shade600,\r\n            ),\r\n            const SizedBox(height: 20),\r\n            _buildModernTextField(\r\n              controller: _aciklamaController,\r\n              label: 'Açıklama',\r\n              hint: 'Belge hakkında detaylar',\r\n              icon: Icons.description_rounded,\r\n              iconColor: Colors.blue.shade600,\r\n              maxLines: 3,\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildKategoriVeKisiKarti() {\r\n    return Container(\r\n      decoration: BoxDecoration(\r\n        color: Colors.white,\r\n        borderRadius: BorderRadius.circular(20),\r\n        boxShadow: [\r\n          BoxShadow(\r\n            color: Colors.black.withOpacity(0.08),\r\n            blurRadius: 25,\r\n            offset: const Offset(0, 8),\r\n          ),\r\n        ],\r\n      ),\r\n      child: Padding(\r\n        padding: const EdgeInsets.all(24),\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Row(\r\n              children: [\r\n                Container(\r\n                  padding: const EdgeInsets.all(12),\r\n                  decoration: BoxDecoration(\r\n                    gradient: LinearGradient(\r\n                      colors: [Colors.purple.shade400, Colors.purple.shade600],\r\n                    ),\r\n                    borderRadius: BorderRadius.circular(12),\r\n                  ),\r\n                  child: const Icon(\r\n                    Icons.category_rounded,\r\n                    color: Colors.white,\r\n                    size: 20,\r\n                  ),\r\n                ),\r\n                const SizedBox(width: 16),\r\n                const Expanded(\r\n                  child: Column(\r\n                    crossAxisAlignment: CrossAxisAlignment.start,\r\n                    children: [\r\n                      Text(\r\n                        'Kategori & Kişi',\r\n                        style: TextStyle(\r\n                          fontSize: 18,\r\n                          fontWeight: FontWeight.bold,\r\n                          color: Colors.black87,\r\n                        ),\r\n                      ),\r\n                      Text(\r\n                        'Belgeyi organize edin',\r\n                        style: TextStyle(fontSize: 14, color: Colors.grey),\r\n                      ),\r\n                    ],\r\n                  ),\r\n                ),\r\n              ],\r\n            ),\r\n            const SizedBox(height: 24),\r\n            _buildModernDropdown<KategoriModeli>(\r\n              value: _secilenKategori,\r\n              label: 'Kategori',\r\n              hint: 'Bir kategori seçin',\r\n              icon: Icons.folder_rounded,\r\n              iconColor: Colors.purple.shade600,\r\n              items:\r\n                  _kategoriler.map((kategori) {\r\n                    return DropdownMenuItem(\r\n                      value: kategori,\r\n                      child: Row(\r\n                        children: [\r\n                          Container(\r\n                            width: 16,\r\n                            height: 16,\r\n                            decoration: BoxDecoration(\r\n                              color: Color(\r\n                                int.parse(\r\n                                  kategori.renkKodu.replaceFirst('#', '0xFF'),\r\n                                ),\r\n                              ),\r\n                              borderRadius: BorderRadius.circular(8),\r\n                              border: Border.all(color: Colors.white, width: 2),\r\n                              boxShadow: [\r\n                                BoxShadow(\r\n                                  color: Colors.black.withOpacity(0.2),\r\n                                  blurRadius: 4,\r\n                                  offset: const Offset(0, 2),\r\n                                ),\r\n                              ],\r\n                            ),\r\n                          ),\r\n                          const SizedBox(width: 12),\r\n                          Text(\r\n                            kategori.kategoriAdi,\r\n                            style: const TextStyle(fontWeight: FontWeight.w500),\r\n                          ),\r\n                        ],\r\n                      ),\r\n                    );\r\n                  }).toList(),\r\n              onChanged: (kategori) {\r\n                setState(() {\r\n                  _secilenKategori = kategori;\r\n                });\r\n              },\r\n            ),\r\n            const SizedBox(height: 20),\r\n            _buildModernDropdown<KisiModeli>(\r\n              value: _secilenKisi,\r\n              label: 'Kişi *',\r\n              hint: 'Bir kişi seçin',\r\n              icon: Icons.person_rounded,\r\n              iconColor: Colors.purple.shade600,\r\n              items:\r\n                  _kisiler.map((kisi) {\r\n                    return DropdownMenuItem(\r\n                      value: kisi,\r\n                      child: Row(\r\n                        children: [\r\n                          CircleAvatar(\r\n                            radius: 12,\r\n                            backgroundColor: Colors.purple.shade100,\r\n                            child: Text(\r\n                              kisi.ad.isNotEmpty\r\n                                  ? kisi.ad[0].toUpperCase()\r\n                                  : '?',\r\n                              style: TextStyle(\r\n                                color: Colors.purple.shade600,\r\n                                fontSize: 12,\r\n                                fontWeight: FontWeight.bold,\r\n                              ),\r\n                            ),\r\n                          ),\r\n                          const SizedBox(width: 12),\r\n                          Text(\r\n                            kisi.tamAd,\r\n                            style: const TextStyle(fontWeight: FontWeight.w500),\r\n                          ),\r\n                        ],\r\n                      ),\r\n                    );\r\n                  }).toList(),\r\n              onChanged: (kisi) {\r\n                setState(() {\r\n                  _secilenKisi = kisi;\r\n                });\r\n              },\r\n            ),\r\n            const SizedBox(height: 20),\r\n            Row(\r\n              children: [\r\n                Expanded(\r\n                  child: Container(\r\n                    decoration: BoxDecoration(\r\n                      gradient: LinearGradient(\r\n                        colors: [Colors.green.shade400, Colors.green.shade600],\r\n                      ),\r\n                      borderRadius: BorderRadius.circular(12),\r\n                      boxShadow: [\r\n                        BoxShadow(\r\n                          color: Colors.green.withOpacity(0.3),\r\n                          blurRadius: 8,\r\n                          offset: const Offset(0, 4),\r\n                        ),\r\n                      ],\r\n                    ),\r\n                    child: Material(\r\n                      color: Colors.transparent,\r\n                      child: InkWell(\r\n                        borderRadius: BorderRadius.circular(12),\r\n                        onTap: _hizliKisiEkle,\r\n                        child: Container(\r\n                          padding: const EdgeInsets.symmetric(vertical: 14),\r\n                          child: const Row(\r\n                            mainAxisAlignment: MainAxisAlignment.center,\r\n                            children: [\r\n                              Icon(\r\n                                Icons.person_add_rounded,\r\n                                color: Colors.white,\r\n                                size: 18,\r\n                              ),\r\n                              SizedBox(width: 8),\r\n                              Text(\r\n                                'Hızlı Kişi Ekle',\r\n                                style: TextStyle(\r\n                                  color: Colors.white,\r\n                                  fontWeight: FontWeight.w600,\r\n                                  fontSize: 14,\r\n                                ),\r\n                              ),\r\n                            ],\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ),\r\n                const SizedBox(width: 12),\r\n                Container(\r\n                  decoration: BoxDecoration(\r\n                    gradient: LinearGradient(\r\n                      colors: [Colors.blue.shade400, Colors.blue.shade600],\r\n                    ),\r\n                    borderRadius: BorderRadius.circular(12),\r\n                    boxShadow: [\r\n                      BoxShadow(\r\n                        color: Colors.blue.withOpacity(0.3),\r\n                        blurRadius: 8,\r\n                        offset: const Offset(0, 4),\r\n                      ),\r\n                    ],\r\n                  ),\r\n                  child: Material(\r\n                    color: Colors.transparent,\r\n                    child: InkWell(\r\n                      borderRadius: BorderRadius.circular(12),\r\n                      onTap: _kisileriYenile,\r\n                      child: Container(\r\n                        padding: const EdgeInsets.all(14),\r\n                        child: const Icon(\r\n                          Icons.refresh_rounded,\r\n                          color: Colors.white,\r\n                          size: 18,\r\n                        ),\r\n                      ),\r\n                    ),\r\n                  ),\r\n                ),\r\n              ],\r\n            ),\r\n\r\n            if (_kisiler.isEmpty) ...[\r\n              const SizedBox(height: 20),\r\n              Container(\r\n                padding: const EdgeInsets.all(20),\r\n                decoration: BoxDecoration(\r\n                  gradient: LinearGradient(\r\n                    colors: [Colors.orange.shade50, Colors.orange.shade100],\r\n                  ),\r\n                  borderRadius: BorderRadius.circular(16),\r\n                  border: Border.all(color: Colors.orange.shade300),\r\n                ),\r\n                child: Column(\r\n                  children: [\r\n                    Row(\r\n                      children: [\r\n                        Container(\r\n                          padding: const EdgeInsets.all(8),\r\n                          decoration: BoxDecoration(\r\n                            color: Colors.orange.shade200,\r\n                            borderRadius: BorderRadius.circular(8),\r\n                          ),\r\n                          child: Icon(\r\n                            Icons.warning_rounded,\r\n                            color: Colors.orange.shade700,\r\n                            size: 20,\r\n                          ),\r\n                        ),\r\n                        const SizedBox(width: 12),\r\n                        Expanded(\r\n                          child: Text(\r\n                            'Kişi listesi boş!',\r\n                            style: TextStyle(\r\n                              color: Colors.orange.shade800,\r\n                              fontWeight: FontWeight.w700,\r\n                              fontSize: 16,\r\n                            ),\r\n                          ),\r\n                        ),\r\n                      ],\r\n                    ),\r\n                    const SizedBox(height: 12),\r\n                    Text(\r\n                      'Belge eklemek için bir kişi seçmelisiniz. \"Hızlı Kişi Ekle\" butonunu kullanarak hemen kişi ekleyebilir veya \"Yenile\" butonuyla kişi listesini güncelleyebilirsiniz.',\r\n                      style: TextStyle(\r\n                        color: Colors.orange.shade700,\r\n                        fontSize: 14,\r\n                        height: 1.4,\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n            ] else ...[\r\n              const SizedBox(height: 16),\r\n              Container(\r\n                padding: const EdgeInsets.all(16),\r\n                decoration: BoxDecoration(\r\n                  gradient: LinearGradient(\r\n                    colors: [Colors.green.shade50, Colors.green.shade100],\r\n                  ),\r\n                  borderRadius: BorderRadius.circular(12),\r\n                  border: Border.all(color: Colors.green.shade300),\r\n                ),\r\n                child: Row(\r\n                  children: [\r\n                    Container(\r\n                      padding: const EdgeInsets.all(6),\r\n                      decoration: BoxDecoration(\r\n                        color: Colors.green.shade200,\r\n                        borderRadius: BorderRadius.circular(6),\r\n                      ),\r\n                      child: Icon(\r\n                        Icons.check_circle_rounded,\r\n                        color: Colors.green.shade700,\r\n                        size: 16,\r\n                      ),\r\n                    ),\r\n                    const SizedBox(width: 12),\r\n                    Text(\r\n                      '${_kisiler.length} kişi mevcut',\r\n                      style: TextStyle(\r\n                        color: Colors.green.shade800,\r\n                        fontSize: 14,\r\n                        fontWeight: FontWeight.w600,\r\n                      ),\r\n                    ),\r\n                  ],\r\n                ),\r\n              ),\r\n            ],\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildEtiketlerKarti() {\r\n    return Container(\r\n      decoration: BoxDecoration(\r\n        color: Colors.white,\r\n        borderRadius: BorderRadius.circular(20),\r\n        boxShadow: [\r\n          BoxShadow(\r\n            color: Colors.black.withOpacity(0.08),\r\n            blurRadius: 25,\r\n            offset: const Offset(0, 8),\r\n          ),\r\n        ],\r\n      ),\r\n      child: Padding(\r\n        padding: const EdgeInsets.all(24),\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Row(\r\n              children: [\r\n                Container(\r\n                  padding: const EdgeInsets.all(12),\r\n                  decoration: BoxDecoration(\r\n                    gradient: LinearGradient(\r\n                      colors: [Colors.green.shade400, Colors.green.shade600],\r\n                    ),\r\n                    borderRadius: BorderRadius.circular(12),\r\n                  ),\r\n                  child: const Icon(\r\n                    Icons.label_rounded,\r\n                    color: Colors.white,\r\n                    size: 20,\r\n                  ),\r\n                ),\r\n                const SizedBox(width: 16),\r\n                const Expanded(\r\n                  child: Column(\r\n                    crossAxisAlignment: CrossAxisAlignment.start,\r\n                    children: [\r\n                      Text(\r\n                        'Etiketler',\r\n                        style: TextStyle(\r\n                          fontSize: 18,\r\n                          fontWeight: FontWeight.bold,\r\n                          color: Colors.black87,\r\n                        ),\r\n                      ),\r\n                      Text(\r\n                        'Belgeyi etiketleyin',\r\n                        style: TextStyle(fontSize: 14, color: Colors.grey),\r\n                      ),\r\n                    ],\r\n                  ),\r\n                ),\r\n              ],\r\n            ),\r\n            const SizedBox(height: 20),\r\n            _buildModernTextField(\r\n              controller: _etiketlerController,\r\n              label: 'Etiketler',\r\n              hint: 'Virgülle ayırarak etiket ekleyin (örn: önemli, iş, proje)',\r\n              icon: Icons.local_offer_rounded,\r\n              iconColor: Colors.green.shade600,\r\n              onChanged: (value) {\r\n                setState(() {\r\n                  _etiketler =\r\n                      value\r\n                          .split(',')\r\n                          .map((e) => e.trim())\r\n                          .where((e) => e.isNotEmpty)\r\n                          .toList();\r\n                });\r\n              },\r\n            ),\r\n            if (_etiketler.isNotEmpty) ...[\r\n              const SizedBox(height: 16),\r\n              Wrap(\r\n                spacing: 10,\r\n                runSpacing: 10,\r\n                children:\r\n                    _etiketler.map((etiket) {\r\n                      return Container(\r\n                        padding: const EdgeInsets.symmetric(\r\n                          horizontal: 16,\r\n                          vertical: 8,\r\n                        ),\r\n                        decoration: BoxDecoration(\r\n                          gradient: LinearGradient(\r\n                            colors: [\r\n                              Colors.blue.shade100,\r\n                              Colors.blue.shade200,\r\n                            ],\r\n                          ),\r\n                          borderRadius: BorderRadius.circular(20),\r\n                          border: Border.all(color: Colors.blue.shade300),\r\n                          boxShadow: [\r\n                            BoxShadow(\r\n                              color: Colors.blue.withOpacity(0.2),\r\n                              blurRadius: 4,\r\n                              offset: const Offset(0, 2),\r\n                            ),\r\n                          ],\r\n                        ),\r\n                        child: Row(\r\n                          mainAxisSize: MainAxisSize.min,\r\n                          children: [\r\n                            Icon(\r\n                              Icons.tag_rounded,\r\n                              size: 14,\r\n                              color: Colors.blue.shade700,\r\n                            ),\r\n                            const SizedBox(width: 6),\r\n                            Text(\r\n                              etiket,\r\n                              style: TextStyle(\r\n                                color: Colors.blue.shade800,\r\n                                fontSize: 13,\r\n                                fontWeight: FontWeight.w600,\r\n                              ),\r\n                            ),\r\n                          ],\r\n                        ),\r\n                      );\r\n                    }).toList(),\r\n              ),\r\n            ],\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildModernTextField({\r\n    required TextEditingController controller,\r\n    required String label,\r\n    required String hint,\r\n    required IconData icon,\r\n    required Color iconColor,\r\n    int maxLines = 1,\r\n    Function(String)? onChanged,\r\n  }) {\r\n    return Container(\r\n      decoration: BoxDecoration(\r\n        color: Colors.grey.shade50,\r\n        borderRadius: BorderRadius.circular(16),\r\n        border: Border.all(color: Colors.grey.shade200, width: 1.5),\r\n      ),\r\n      child: TextField(\r\n        controller: controller,\r\n        maxLines: maxLines,\r\n        onChanged: onChanged,\r\n        decoration: InputDecoration(\r\n          labelText: label,\r\n          hintText: hint,\r\n          prefixIcon: Container(\r\n            margin: const EdgeInsets.all(8),\r\n            padding: const EdgeInsets.all(10),\r\n            decoration: BoxDecoration(\r\n              color: iconColor.withOpacity(0.1),\r\n              borderRadius: BorderRadius.circular(10),\r\n            ),\r\n            child: Icon(icon, color: iconColor, size: 20),\r\n          ),\r\n          border: InputBorder.none,\r\n          contentPadding: const EdgeInsets.symmetric(\r\n            horizontal: 20,\r\n            vertical: 18,\r\n          ),\r\n          labelStyle: TextStyle(\r\n            color: Colors.grey.shade700,\r\n            fontWeight: FontWeight.w500,\r\n          ),\r\n          hintStyle: TextStyle(color: Colors.grey.shade500),\r\n        ),\r\n        style: const TextStyle(fontSize: 15, fontWeight: FontWeight.w500),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildModernDropdown<T>({\r\n    required T? value,\r\n    required String label,\r\n    required String hint,\r\n    required IconData icon,\r\n    required Color iconColor,\r\n    required List<DropdownMenuItem<T>> items,\r\n    required Function(T?) onChanged,\r\n  }) {\r\n    return Container(\r\n      decoration: BoxDecoration(\r\n        color: Colors.grey.shade50,\r\n        borderRadius: BorderRadius.circular(16),\r\n        border: Border.all(color: Colors.grey.shade200, width: 1.5),\r\n      ),\r\n      child: DropdownButtonFormField<T>(\r\n        value: value,\r\n        decoration: InputDecoration(\r\n          labelText: label,\r\n          hintText: hint,\r\n          prefixIcon: Container(\r\n            margin: const EdgeInsets.all(8),\r\n            padding: const EdgeInsets.all(10),\r\n            decoration: BoxDecoration(\r\n              color: iconColor.withOpacity(0.1),\r\n              borderRadius: BorderRadius.circular(10),\r\n            ),\r\n            child: Icon(icon, color: iconColor, size: 20),\r\n          ),\r\n          border: InputBorder.none,\r\n          contentPadding: const EdgeInsets.symmetric(\r\n            horizontal: 20,\r\n            vertical: 18,\r\n          ),\r\n          labelStyle: TextStyle(\r\n            color: Colors.grey.shade700,\r\n            fontWeight: FontWeight.w500,\r\n          ),\r\n          hintStyle: TextStyle(color: Colors.grey.shade500),\r\n        ),\r\n        style: const TextStyle(\r\n          fontSize: 15,\r\n          fontWeight: FontWeight.w500,\r\n          color: Colors.black87,\r\n        ),\r\n        items: items,\r\n        onChanged: onChanged,\r\n        dropdownColor: Colors.white,\r\n        icon: Icon(Icons.keyboard_arrow_down_rounded, color: iconColor),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Future<void> _dosyaEkle() async {\r\n    try {\r\n      final dosyalar = await _dosyaServisi.dosyaSec(cokluSecim: true);\r\n\r\n      if (dosyalar != null && dosyalar.isNotEmpty) {\r\n        setState(() {\r\n          _secilenDosyalar.addAll(dosyalar);\r\n        });\r\n\r\n        Future.delayed(const Duration(milliseconds: 100), () {\r\n          _otomatikDosyaTuruAlgila();\r\n        });\r\n      }\r\n    } catch (e) {\r\n      _hataGoster('Dosya seçilirken hata oluştu: $e');\r\n    }\r\n  }\r\n\r\n  Future<void> _belgelerEkle() async {\r\n    if (!_duzenlemeModundaMi && _secilenDosyalar.isEmpty) {\r\n      _hataGoster('En az bir dosya seçmelisiniz');\r\n      return;\r\n    }\r\n\r\n    if (_secilenKisi == null) {\r\n      _hataGoster('Bir kişi seçmelisiniz');\r\n      return;\r\n    }\r\n\r\n    setState(() {\r\n      _dosyalarIsleniyor = true;\r\n    });\r\n\r\n    if (_duzenlemeModundaMi) {\r\n      await _belgeGuncelle();\r\n    } else {\r\n      await _yeniBelgelerEkle();\r\n    }\r\n  }\r\n\r\n  Future<void> _hizliKisiEkle() async {\r\n    final TextEditingController adController = TextEditingController();\r\n    final TextEditingController soyadController = TextEditingController();\r\n\r\n    final result = await showDialog<bool>(\r\n      context: context,\r\n      builder:\r\n          (context) => Dialog(\r\n            shape: RoundedRectangleBorder(\r\n              borderRadius: BorderRadius.circular(20),\r\n            ),\r\n            child: Container(\r\n              padding: const EdgeInsets.all(24),\r\n              decoration: BoxDecoration(\r\n                borderRadius: BorderRadius.circular(20),\r\n                gradient: LinearGradient(\r\n                  colors: [Colors.blue.shade50, Colors.purple.shade50],\r\n                ),\r\n              ),\r\n              child: Column(\r\n                mainAxisSize: MainAxisSize.min,\r\n                children: [\r\n                  Container(\r\n                    padding: const EdgeInsets.all(16),\r\n                    decoration: BoxDecoration(\r\n                      gradient: LinearGradient(\r\n                        colors: [Colors.green.shade400, Colors.green.shade600],\r\n                      ),\r\n                      borderRadius: BorderRadius.circular(16),\r\n                    ),\r\n                    child: const Icon(\r\n                      Icons.person_add_rounded,\r\n                      color: Colors.white,\r\n                      size: 32,\r\n                    ),\r\n                  ),\r\n                  const SizedBox(height: 20),\r\n                  const Text(\r\n                    'Hızlı Kişi Ekle',\r\n                    style: TextStyle(\r\n                      fontSize: 20,\r\n                      fontWeight: FontWeight.bold,\r\n                      color: Colors.black87,\r\n                    ),\r\n                  ),\r\n                  const SizedBox(height: 8),\r\n                  Text(\r\n                    'Yeni kişi bilgilerini girin',\r\n                    style: TextStyle(fontSize: 14, color: Colors.grey.shade600),\r\n                  ),\r\n                  const SizedBox(height: 24),\r\n                  TextField(\r\n                    controller: adController,\r\n                    decoration: InputDecoration(\r\n                      labelText: 'Ad *',\r\n                      hintText: 'Kişinin adını girin',\r\n                      prefixIcon: const Icon(Icons.person_rounded),\r\n                      border: OutlineInputBorder(\r\n                        borderRadius: BorderRadius.circular(12),\r\n                      ),\r\n                      filled: true,\r\n                      fillColor: Colors.white,\r\n                    ),\r\n                  ),\r\n                  const SizedBox(height: 16),\r\n                  TextField(\r\n                    controller: soyadController,\r\n                    decoration: InputDecoration(\r\n                      labelText: 'Soyad *',\r\n                      hintText: 'Kişinin soyadını girin',\r\n                      prefixIcon: const Icon(Icons.person_outline_rounded),\r\n                      border: OutlineInputBorder(\r\n                        borderRadius: BorderRadius.circular(12),\r\n                      ),\r\n                      filled: true,\r\n                      fillColor: Colors.white,\r\n                    ),\r\n                  ),\r\n                  const SizedBox(height: 24),\r\n                  Row(\r\n                    children: [\r\n                      Expanded(\r\n                        child: Container(\r\n                          decoration: BoxDecoration(\r\n                            borderRadius: BorderRadius.circular(12),\r\n                            border: Border.all(color: Colors.grey.shade300),\r\n                          ),\r\n                          child: Material(\r\n                            color: Colors.transparent,\r\n                            child: InkWell(\r\n                              borderRadius: BorderRadius.circular(12),\r\n                              onTap: () async {\r\n                                if (adController.text.trim().isEmpty ||\r\n                                    soyadController.text.trim().isEmpty) {\r\n                                  _hataGoster(\r\n                                    'Ad ve soyad alanları gereklidir',\r\n                                  );\r\n                                  return;\r\n                                }\r\n\r\n                                try {\r\n                                  final yeniKisi = KisiModeli(\r\n                                    ad: adController.text.trim(),\r\n                                    soyad: soyadController.text.trim(),\r\n                                    olusturmaTarihi: DateTime.now(),\r\n                                    guncellemeTarihi: DateTime.now(),\r\n                                  );\r\n\r\n                                  await _veriTabani.kisiEkle(yeniKisi);\r\n                                  Navigator.of(context).pop(true);\r\n                                } catch (e) {\r\n                                  _hataGoster(\r\n                                    'Kişi eklenirken hata oluştu: $e',\r\n                                  );\r\n                                }\r\n                              },\r\n                              child: Container(\r\n                                padding: const EdgeInsets.symmetric(\r\n                                  vertical: 14,\r\n                                ),\r\n                                child: const Text(\r\n                                  'Ekle',\r\n                                  textAlign: TextAlign.center,\r\n                                  style: TextStyle(\r\n                                    color: Colors.white,\r\n                                    fontWeight: FontWeight.bold,\r\n                                    fontSize: 16,\r\n                                  ),\r\n                                ),\r\n                              ),\r\n                            ),\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    ],\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n          ),\r\n    );\r\n\r\n    if (result == true) {\r\n      await _kisileriYenile();\r\n      _basariMesajiGoster('Kişi başarıyla eklendi');\r\n    }\r\n  }\r\n\r\n  Future<void> _kisileriYenile() async {\r\n    try {\r\n      final kisiler = await _veriTabani.kisileriGetir();\r\n      setState(() {\r\n        _kisiler = kisiler;\r\n      });\r\n\r\n      if (_secilenKisi != null) {\r\n        final mevcutKisi = _kisiler.firstWhere(\r\n          (k) => k.id == _secilenKisi!.id,\r\n          orElse:\r\n              () => KisiModeli(\r\n                ad: '',\r\n                soyad: '',\r\n                olusturmaTarihi: DateTime.now(),\r\n                guncellemeTarihi: DateTime.now(),\r\n              ),\r\n        );\r\n\r\n        if (mevcutKisi.ad.isEmpty) {\r\n          _secilenKisi = null;\r\n        }\r\n      }\r\n\r\n      _basariMesajiGoster('${_kisiler.length} kişi yüklendi');\r\n    } catch (e) {\r\n      _hataGoster('Kişiler yüklenirken hata oluştu: $e');\r\n    }\r\n  }\r\n\r\n  Future<void> _belgeGuncelle() async {\r\n    try {\r\n      final guncelBelge = widget.duzenlenecekBelge!.copyWith(\r\n        baslik:\r\n            _baslikController.text.trim().isNotEmpty\r\n                ? _baslikController.text.trim()\r\n                : null,\r\n        aciklama:\r\n            _aciklamaController.text.trim().isNotEmpty\r\n                ? _aciklamaController.text.trim()\r\n                : null,\r\n        kategoriId: _secilenKategori?.id,\r\n        kisiId: _secilenKisi!.id!,\r\n        etiketler: _etiketler.isNotEmpty ? _etiketler : null,\r\n        guncellemeTarihi: DateTime.now(),\r\n      );\r\n\r\n      await _veriTabani.belgeGuncelle(guncelBelge);\r\n      _basariMesajiGoster('Belge başarıyla güncellendi');\r\n      Navigator.of(context).pop(true);\r\n    } catch (e) {\r\n      _hataGoster('Belge güncellenirken hata oluştu: $e');\r\n    } finally {\r\n      setState(() {\r\n        _dosyalarIsleniyor = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  Future<void> _yeniBelgelerEkle() async {\r\n    showDialog(\r\n      context: context,\r\n      barrierDismissible: false,\r\n      builder:\r\n          (context) => Dialog(\r\n            shape: RoundedRectangleBorder(\r\n              borderRadius: BorderRadius.circular(20),\r\n            ),\r\n            child: Container(\r\n              padding: const EdgeInsets.all(32),\r\n              decoration: BoxDecoration(\r\n                borderRadius: BorderRadius.circular(20),\r\n                gradient: LinearGradient(\r\n                  colors: [Colors.blue.shade50, Colors.purple.shade50],\r\n                ),\r\n              ),\r\n              child: Column(\r\n                mainAxisSize: MainAxisSize.min,\r\n                children: [\r\n                  Container(\r\n                    padding: const EdgeInsets.all(20),\r\n                    decoration: BoxDecoration(\r\n                      color: Colors.white,\r\n                      borderRadius: BorderRadius.circular(16),\r\n                      boxShadow: [\r\n                        BoxShadow(\r\n                          color: Colors.black.withOpacity(0.1),\r\n                          blurRadius: 10,\r\n                          offset: const Offset(0, 4),\r\n                        ),\r\n                      ],\r\n                    ),\r\n                    child: Stack(\r\n                      alignment: Alignment.center,\r\n                      children: [\r\n                        SizedBox(\r\n                          width: 60,\r\n                          height: 60,\r\n                          child: CircularProgressIndicator(\r\n                            strokeWidth: 4,\r\n                            valueColor: AlwaysStoppedAnimation<Color>(\r\n                              Colors.blue.shade400,\r\n                            ),\r\n                          ),\r\n                        ),\r\n                        Icon(\r\n                          Icons.cloud_upload_rounded,\r\n                          size: 28,\r\n                          color: Colors.blue.shade400,\r\n                        ),\r\n                      ],\r\n                    ),\r\n                  ),\r\n                  const SizedBox(height: 24),\r\n                  Text(\r\n                    '${_secilenDosyalar.length} dosya işleniyor...',\r\n                    style: const TextStyle(\r\n                      fontSize: 18,\r\n                      fontWeight: FontWeight.bold,\r\n                      color: Colors.black87,\r\n                    ),\r\n                  ),\r\n                  const SizedBox(height: 8),\r\n                  Text(\r\n                    'Dosyalar kaydediliyor, lütfen bekleyin',\r\n                    style: TextStyle(fontSize: 14, color: Colors.grey.shade600),\r\n                    textAlign: TextAlign.center,\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n          ),\r\n    );\r\n\r\n    int basariliSayisi = 0;\r\n    int hataliSayisi = 0;\r\n\r\n    try {\r\n      for (var platformFile in _secilenDosyalar) {\r\n        try {\r\n          BelgeModeli belge = await _dosyaServisi.dosyaKopyalaVeHashHesapla(\r\n            platformFile,\r\n          );\r\n\r\n          BelgeModeli? mevcutBelge = await _veriTabani.belgeGetirByHash(\r\n            belge.dosyaHash,\r\n          );\r\n          if (mevcutBelge != null) {\r\n            hataliSayisi++;\r\n            continue;\r\n          }\r\n\r\n          DateTime simdi = DateTime.now();\r\n          belge = belge.copyWith(\r\n            baslik:\r\n                _baslikController.text.trim().isNotEmpty\r\n                    ? _baslikController.text.trim()\r\n                    : null,\r\n            aciklama:\r\n                _aciklamaController.text.trim().isNotEmpty\r\n                    ? _aciklamaController.text.trim()\r\n                    : null,\r\n            kategoriId: _secilenKategori?.id,\r\n            kisiId: _secilenKisi!.id!,\r\n            etiketler: _etiketler.isNotEmpty ? _etiketler : null,\r\n            guncellemeTarihi: simdi,\r\n          );\r\n\r\n          await _veriTabani.belgeEkle(belge);\r\n          basariliSayisi++;\r\n        } catch (e) {\r\n          hataliSayisi++;\r\n          print('Dosya işlenirken hata: $e');\r\n        }\r\n      }\r\n\r\n      Navigator.of(context).pop();\r\n\r\n      String mesaj = '';\r\n      if (basariliSayisi > 0) {\r\n        mesaj += '$basariliSayisi dosya başarıyla eklendi';\r\n      }\r\n      if (hataliSayisi > 0) {\r\n        if (mesaj.isNotEmpty) mesaj += ', ';\r\n        mesaj += '$hataliSayisi dosya eklenemedi';\r\n      }\r\n\r\n      if (basariliSayisi > 0) {\r\n        _basariMesajiGoster(mesaj);\r\n        Navigator.of(context).pop(true);\r\n      } else {\r\n        _hataGoster(mesaj.isEmpty ? 'Hiçbir dosya eklenemedi' : mesaj);\r\n      }\r\n    } catch (e) {\r\n      Navigator.of(context).pop();\r\n      _hataGoster('Belgeler eklenirken hata oluştu: $e');\r\n    } finally {\r\n      setState(() {\r\n        _dosyalarIsleniyor = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  void _hataGoster(String mesaj) {\r\n    ScaffoldMessenger.of(context).showSnackBar(\r\n      SnackBar(\r\n        content: Row(\r\n          children: [\r\n            Container(\r\n              padding: const EdgeInsets.all(4),\r\n              decoration: BoxDecoration(\r\n                color: Colors.white.withOpacity(0.2),\r\n                borderRadius: BorderRadius.circular(6),\r\n              ),\r\n              child: const Icon(\r\n                Icons.error_outline_rounded,\r\n                color: Colors.white,\r\n                size: 20,\r\n              ),\r\n            ),\r\n            const SizedBox(width: 12),\r\n            Expanded(\r\n              child: Text(\r\n                mesaj,\r\n                style: const TextStyle(\r\n                  fontWeight: FontWeight.w500,\r\n                  fontSize: 14,\r\n                ),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n        backgroundColor: Colors.red.shade600,\r\n        behavior: SnackBarBehavior.floating,\r\n        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),\r\n        margin: const EdgeInsets.all(16),\r\n        elevation: 8,\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _basariMesajiGoster(String mesaj) {\r\n    ScaffoldMessenger.of(context).showSnackBar(\r\n      SnackBar(\r\n        content: Row(\r\n          children: [\r\n            Container(\r\n              padding: const EdgeInsets.all(4),\r\n              decoration: BoxDecoration(\r\n                color: Colors.white.withOpacity(0.2),\r\n                borderRadius: BorderRadius.circular(6),\r\n              ),\r\n              child: const Icon(\r\n                Icons.check_circle_outline_rounded,\r\n                color: Colors.white,\r\n                size: 20,\r\n              ),\r\n            ),\r\n            const SizedBox(width: 12),\r\n            Expanded(\r\n              child: Text(\r\n                mesaj,\r\n                style: const TextStyle(\r\n                  fontWeight: FontWeight.w500,\r\n                  fontSize: 14,\r\n                ),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n        backgroundColor: Colors.green.shade600,\r\n        behavior: SnackBarBehavior.floating,\r\n        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),\r\n        margin: const EdgeInsets.all(16),\r\n        elevation: 8,\r\n      ),\r\n    );\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/arsiv_uygulamasi/lib/screens/yeni_belge_ekle_ekrani.dart b/arsiv_uygulamasi/lib/screens/yeni_belge_ekle_ekrani.dart
--- a/arsiv_uygulamasi/lib/screens/yeni_belge_ekle_ekrani.dart	(revision 7f873ead8e12e13125dc4996a90674136efb4f22)
+++ b/arsiv_uygulamasi/lib/screens/yeni_belge_ekle_ekrani.dart	(date 1751702621335)
@@ -1253,78 +1253,47 @@
             const SizedBox(height: 20),
             Row(
               children: [
-                Expanded(
-                  child: Container(
-                    decoration: BoxDecoration(
-                      gradient: LinearGradient(
-                        colors: [Colors.green.shade400, Colors.green.shade600],
-                      ),
-                      borderRadius: BorderRadius.circular(12),
-                      boxShadow: [
-                        BoxShadow(
-                          color: Colors.green.withOpacity(0.3),
-                          blurRadius: 8,
-                          offset: const Offset(0, 4),
-                        ),
-                      ],
-                    ),
-                    child: Material(
-                      color: Colors.transparent,
-                      child: InkWell(
-                        borderRadius: BorderRadius.circular(12),
-                        onTap: _hizliKisiEkle,
-                        child: Container(
-                          padding: const EdgeInsets.symmetric(vertical: 14),
-                          child: const Row(
-                            mainAxisAlignment: MainAxisAlignment.center,
-                            children: [
-                              Icon(
-                                Icons.person_add_rounded,
-                                color: Colors.white,
-                                size: 18,
-                              ),
-                              SizedBox(width: 8),
-                              Text(
-                                'Hızlı Kişi Ekle',
-                                style: TextStyle(
-                                  color: Colors.white,
-                                  fontWeight: FontWeight.w600,
-                                  fontSize: 14,
-                                ),
-                              ),
-                            ],
-                          ),
-                        ),
-                      ),
-                    ),
-                  ),
-                ),
-                const SizedBox(width: 12),
-                Container(
-                  decoration: BoxDecoration(
-                    gradient: LinearGradient(
-                      colors: [Colors.blue.shade400, Colors.blue.shade600],
-                    ),
-                    borderRadius: BorderRadius.circular(12),
-                    boxShadow: [
-                      BoxShadow(
-                        color: Colors.blue.withOpacity(0.3),
-                        blurRadius: 8,
-                        offset: const Offset(0, 4),
-                      ),
-                    ],
-                  ),
-                  child: Material(
-                    color: Colors.transparent,
-                    child: InkWell(
-                      borderRadius: BorderRadius.circular(12),
-                      onTap: _kisileriYenile,
-                      child: Container(
-                        padding: const EdgeInsets.all(14),
-                        child: const Icon(
-                          Icons.refresh_rounded,
-                          color: Colors.white,
-                          size: 18,
+                Container(
+                  decoration: BoxDecoration(
+                    gradient: LinearGradient(
+                      colors: [Colors.blue.shade400, Colors.blue.shade600],
+                    ),
+                    borderRadius: BorderRadius.circular(12),
+                    boxShadow: [
+                      BoxShadow(
+                        color: Colors.blue.withOpacity(0.3),
+                        blurRadius: 8,
+                        offset: const Offset(0, 4),
+                      ),
+                    ],
+                  ),
+                  child: Material(
+                    color: Colors.transparent,
+                    child: InkWell(
+                      borderRadius: BorderRadius.circular(12),
+                      onTap: _kisileriYenile,
+                      child: Container(
+                        padding: const EdgeInsets.symmetric(
+                          vertical: 14,
+                          horizontal: 20,
+                        ),
+                        child: Row(
+                          children: [
+                            Icon(
+                              Icons.refresh_rounded,
+                              color: Colors.white,
+                              size: 18,
+                            ),
+                            SizedBox(width: 8),
+                            Text(
+                              'Listeyi Yenile',
+                              style: TextStyle(
+                                color: Colors.white,
+                                fontWeight: FontWeight.w600,
+                                fontSize: 14,
+                              ),
+                            ),
+                          ],
                         ),
                       ),
                     ),
@@ -1375,7 +1344,7 @@
                     ),
                     const SizedBox(height: 12),
                     Text(
-                      'Belge eklemek için bir kişi seçmelisiniz. "Hızlı Kişi Ekle" butonunu kullanarak hemen kişi ekleyebilir veya "Yenile" butonuyla kişi listesini güncelleyebilirsiniz.',
+                      'Belge eklemek için bir kişi seçmelisiniz. "Listeyi Yenile" butonunu kullanarak kişi listesini güncelleyebilirsiniz.',
                       style: TextStyle(
                         color: Colors.orange.shade700,
                         fontSize: 14,
@@ -1684,11 +1653,6 @@
       _hataGoster('En az bir dosya seçmelisiniz');
       return;
     }
-
-    if (_secilenKisi == null) {
-      _hataGoster('Bir kişi seçmelisiniz');
-      return;
-    }
 
     setState(() {
       _dosyalarIsleniyor = true;
@@ -1701,154 +1665,6 @@
     }
   }
 
-  Future<void> _hizliKisiEkle() async {
-    final TextEditingController adController = TextEditingController();
-    final TextEditingController soyadController = TextEditingController();
-
-    final result = await showDialog<bool>(
-      context: context,
-      builder:
-          (context) => Dialog(
-            shape: RoundedRectangleBorder(
-              borderRadius: BorderRadius.circular(20),
-            ),
-            child: Container(
-              padding: const EdgeInsets.all(24),
-              decoration: BoxDecoration(
-                borderRadius: BorderRadius.circular(20),
-                gradient: LinearGradient(
-                  colors: [Colors.blue.shade50, Colors.purple.shade50],
-                ),
-              ),
-              child: Column(
-                mainAxisSize: MainAxisSize.min,
-                children: [
-                  Container(
-                    padding: const EdgeInsets.all(16),
-                    decoration: BoxDecoration(
-                      gradient: LinearGradient(
-                        colors: [Colors.green.shade400, Colors.green.shade600],
-                      ),
-                      borderRadius: BorderRadius.circular(16),
-                    ),
-                    child: const Icon(
-                      Icons.person_add_rounded,
-                      color: Colors.white,
-                      size: 32,
-                    ),
-                  ),
-                  const SizedBox(height: 20),
-                  const Text(
-                    'Hızlı Kişi Ekle',
-                    style: TextStyle(
-                      fontSize: 20,
-                      fontWeight: FontWeight.bold,
-                      color: Colors.black87,
-                    ),
-                  ),
-                  const SizedBox(height: 8),
-                  Text(
-                    'Yeni kişi bilgilerini girin',
-                    style: TextStyle(fontSize: 14, color: Colors.grey.shade600),
-                  ),
-                  const SizedBox(height: 24),
-                  TextField(
-                    controller: adController,
-                    decoration: InputDecoration(
-                      labelText: 'Ad *',
-                      hintText: 'Kişinin adını girin',
-                      prefixIcon: const Icon(Icons.person_rounded),
-                      border: OutlineInputBorder(
-                        borderRadius: BorderRadius.circular(12),
-                      ),
-                      filled: true,
-                      fillColor: Colors.white,
-                    ),
-                  ),
-                  const SizedBox(height: 16),
-                  TextField(
-                    controller: soyadController,
-                    decoration: InputDecoration(
-                      labelText: 'Soyad *',
-                      hintText: 'Kişinin soyadını girin',
-                      prefixIcon: const Icon(Icons.person_outline_rounded),
-                      border: OutlineInputBorder(
-                        borderRadius: BorderRadius.circular(12),
-                      ),
-                      filled: true,
-                      fillColor: Colors.white,
-                    ),
-                  ),
-                  const SizedBox(height: 24),
-                  Row(
-                    children: [
-                      Expanded(
-                        child: Container(
-                          decoration: BoxDecoration(
-                            borderRadius: BorderRadius.circular(12),
-                            border: Border.all(color: Colors.grey.shade300),
-                          ),
-                          child: Material(
-                            color: Colors.transparent,
-                            child: InkWell(
-                              borderRadius: BorderRadius.circular(12),
-                              onTap: () async {
-                                if (adController.text.trim().isEmpty ||
-                                    soyadController.text.trim().isEmpty) {
-                                  _hataGoster(
-                                    'Ad ve soyad alanları gereklidir',
-                                  );
-                                  return;
-                                }
-
-                                try {
-                                  final yeniKisi = KisiModeli(
-                                    ad: adController.text.trim(),
-                                    soyad: soyadController.text.trim(),
-                                    olusturmaTarihi: DateTime.now(),
-                                    guncellemeTarihi: DateTime.now(),
-                                  );
-
-                                  await _veriTabani.kisiEkle(yeniKisi);
-                                  Navigator.of(context).pop(true);
-                                } catch (e) {
-                                  _hataGoster(
-                                    'Kişi eklenirken hata oluştu: $e',
-                                  );
-                                }
-                              },
-                              child: Container(
-                                padding: const EdgeInsets.symmetric(
-                                  vertical: 14,
-                                ),
-                                child: const Text(
-                                  'Ekle',
-                                  textAlign: TextAlign.center,
-                                  style: TextStyle(
-                                    color: Colors.white,
-                                    fontWeight: FontWeight.bold,
-                                    fontSize: 16,
-                                  ),
-                                ),
-                              ),
-                            ),
-                          ),
-                        ),
-                      ),
-                    ],
-                  ),
-                ],
-              ),
-            ),
-          ),
-    );
-
-    if (result == true) {
-      await _kisileriYenile();
-      _basariMesajiGoster('Kişi başarıyla eklendi');
-    }
-  }
-
   Future<void> _kisileriYenile() async {
     try {
       final kisiler = await _veriTabani.kisileriGetir();
@@ -1891,7 +1707,7 @@
                 ? _aciklamaController.text.trim()
                 : null,
         kategoriId: _secilenKategori?.id,
-        kisiId: _secilenKisi!.id!,
+        kisiId: _secilenKisi?.id,
         etiketler: _etiketler.isNotEmpty ? _etiketler : null,
         guncellemeTarihi: DateTime.now(),
       );
@@ -2012,7 +1828,7 @@
                     ? _aciklamaController.text.trim()
                     : null,
             kategoriId: _secilenKategori?.id,
-            kisiId: _secilenKisi!.id!,
+            kisiId: _secilenKisi?.id,
             etiketler: _etiketler.isNotEmpty ? _etiketler : null,
             guncellemeTarihi: simdi,
           );
Index: arsiv_uygulamasi/releases/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Arşivcim - Release Dosyaları\r\n\r\n## \uD83D\uDCF1 Android APK\r\n- **Dosya**: `Arsivcim-v1.0.0-android.apk`\r\n- **Boyut**: 38.3 MB\r\n- **Minimum Android Sürümü**: Android 5.0 (API 21)\r\n- **Hedef Android Sürümü**: Android 14 (API 34)\r\n\r\n### Android Kurulumu:\r\n1. APK dosyasını Android cihazınıza indirin\r\n2. \"Bilinmeyen kaynaklardan uygulama yükleme\" seçeneğini etkinleştirin\r\n3. APK dosyasına tıklayarak yükleme işlemini başlatın\r\n\r\n## \uD83D\uDCBB Windows Exe\r\n- **Dosya**: `Arsivcim-v1.0.0-windows-x64.zip`\r\n- **Boyut**: 12 MB (sıkıştırılmış)\r\n- **Minimum Windows Sürümü**: Windows 10 x64\r\n- **Gereksinimler**: .NET Framework (Windows 10/11'de dahil)\r\n\r\n### Windows Kurulumu:\r\n1. ZIP dosyasını indirin ve bir klasöre çıkartın\r\n2. `arsiv_uygulamasi.exe` dosyasını çalıştırın\r\n3. İlk çalıştırmada Windows Defender uyarısı çıkabilir (\"Daha fazla bilgi\" → \"Yine de çalıştır\")\r\n\r\n## \uD83D\uDD27 Özellikler\r\n\r\n### Ana Özellikler:\r\n- ✅ **Belge Arşivleme**: Dosyalarınızı kategorilere göre düzenleyin\r\n- ✅ **Kişi Yönetimi**: Belgeleri kişilerle ilişkilendirin\r\n- ✅ **QR Kod Tarama**: Belgeleri QR kod ile hızlıca ekleyin\r\n- ✅ **Gelişmiş Arama**: Belge adı, içerik ve etiketlerde arama\r\n- ✅ **Kategori Yönetimi**: Özelleştirilebilir kategoriler\r\n- ✅ **Yedekleme**: Verilerinizi dışa aktarın\r\n- ✅ **Senkronizasyon**: Cihazlar arası veri senkronizasyonu\r\n\r\n### Yeni Özellikler (v1.0.0):\r\n- \uD83C\uDD95 **3 Farklı Silme Seçeneği**: Kişileri, belgeleri veya hepsini ayrı ayrı sil\r\n- \uD83C\uDD95 **Toplu Silme**: Tüm kategorilerdeki verileri toplu olarak temizle\r\n- \uD83C\uDD95 **Gelişmiş Senkronizasyon**: Enhanced, Working ve Simple sync manager'lar\r\n- \uD83C\uDD95 **Delta Tabanlı Sync**: Değişiklikleri akıllı şekilde senkronize et\r\n- \uD83C\uDD95 **USB Senkronizasyon**: Cihazlar arası USB ile veri aktarımı\r\n\r\n## \uD83D\uDCCA Sistem Gereksinimleri\r\n\r\n### Android:\r\n- **İşletim Sistemi**: Android 5.0 (API 21) veya üzeri\r\n- **RAM**: Minimum 2 GB\r\n- **Depolama**: 100 MB boş alan\r\n- **İzinler**: Kamera (QR kod), Depolama (belgeler)\r\n\r\n### Windows:\r\n- **İşletim Sistemi**: Windows 10 x64 veya üzeri\r\n- **RAM**: Minimum 4 GB\r\n- **Depolama**: 200 MB boş alan\r\n- **Framework**: .NET Framework 4.8 (Windows 10/11'de dahil)\r\n\r\n## \uD83D\uDE80 Hızlı Başlangıç\r\n\r\n1. **Uygulamayı başlatın**\r\n2. **İlk kategori oluşturun** (Belgeler, Resimler, vs.)\r\n3. **Kişi ekleyin** (isteğe bağlı)\r\n4. **Belge ekleyin** (dosya seçerek veya QR kod ile)\r\n5. **Arama ve filtreleme** özelliklerini kullanın\r\n\r\n## \uD83D\uDD04 Senkronizasyon\r\n\r\n### USB Senkronizasyon:\r\n1. Ana menüden \"USB Senkronizasyon\"u seçin\r\n2. Sync Manager türünü seçin (Enhanced önerili)\r\n3. Hedef cihazın IP adresini girin\r\n4. Senkronizasyon işlemini başlatın\r\n\r\n### Manager Türleri:\r\n- **Enhanced**: Çift yönlü sync, çakışma çözümü\r\n- **Working**: Basit ve güvenilir sync\r\n- **Simple**: Temel sync işlevleri\r\n\r\n## \uD83D\uDCDD Sürüm Notları\r\n\r\n### v1.0.0 (İlk Release)\r\n- Temel arşivleme özellikleri\r\n- Kategori ve kişi yönetimi\r\n- QR kod tarama\r\n- Gelişmiş arama\r\n- 3 farklı silme seçeneği\r\n- Toplu silme işlemleri\r\n- Delta tabanlı senkronizasyon\r\n- USB senkronizasyon\r\n\r\n## \uD83D\uDC1B Bilinen Sorunlar\r\n\r\n- İlk kurulumda Windows Defender uyarısı (normal)\r\n- Büyük dosyalarda yavaş yükleme (optimize edilecek)\r\n- Bazı Android cihazlarda QR kod kamerası açılmayabilir\r\n\r\n## \uD83D\uDCDE Destek\r\n\r\nSorun yaşıyorsanız veya öneriniz varsa:\r\n- GitHub Issues bölümünde bildirin\r\n- Detaylı hata açıklaması ve ekran görüntüsü ekleyin\r\n\r\n---\r\n\r\n**Geliştirici**: Mehmet  \r\n**Lisans**: MIT  \r\n**Repo**: https://github.com/[username]/arsiv 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/arsiv_uygulamasi/releases/README.md b/arsiv_uygulamasi/releases/README.md
--- a/arsiv_uygulamasi/releases/README.md	(revision 7f873ead8e12e13125dc4996a90674136efb4f22)
+++ b/arsiv_uygulamasi/releases/README.md	(date 1751702656509)
@@ -102,5 +102,6 @@
 ---
 
 **Geliştirici**: Mehmet  
-**Lisans**: MIT  
-**Repo**: https://github.com/[username]/arsiv 
\ No newline at end of file
+- **Email**: mehmetkarataslar@gmail.com
+- **GitHub**: [@mehmet-karataslar](https://github.com/umehmet-karataslar)
+**Repo**: https://github.com/mehmet-karataslar/Arsivim
Index: arsiv_uygulamasi/lib/services/belge_islemleri_servisi.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'dart:io';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:open_filex/open_filex.dart';\r\nimport 'package:share_plus/share_plus.dart';\r\nimport '../models/belge_modeli.dart';\r\nimport '../services/veritabani_servisi.dart';\r\n\r\nclass BelgeIslemleriServisi {\r\n  static final BelgeIslemleriServisi _instance =\r\n      BelgeIslemleriServisi._internal();\r\n  factory BelgeIslemleriServisi() => _instance;\r\n  BelgeIslemleriServisi._internal();\r\n\r\n  final VeriTabaniServisi _veritabaniServisi = VeriTabaniServisi();\r\n\r\n  /// Belgeyi sistem varsayılan uygulamasıyla açar\r\n  Future<void> belgeAc(BelgeModeli belge, BuildContext context) async {\r\n    try {\r\n      final dosya = File(belge.dosyaYolu);\r\n\r\n      if (!await dosya.exists()) {\r\n        _hataGoster(context, 'Dosya bulunamadı: ${belge.orijinalDosyaAdi}');\r\n        return;\r\n      }\r\n\r\n      final sonuc = await OpenFilex.open(belge.dosyaYolu);\r\n\r\n      if (sonuc.type != ResultType.done) {\r\n        _hataGoster(context, 'Dosya açılamadı. Uygun uygulama bulunamadı.');\r\n      }\r\n    } catch (e) {\r\n      _hataGoster(context, 'Dosya açılırken hata oluştu: $e');\r\n    }\r\n  }\r\n\r\n  /// Belgeyi sistem paylaşma menüsüyle paylaşır\r\n  Future<void> belgePaylas(BelgeModeli belge, BuildContext context) async {\r\n    try {\r\n      final dosya = File(belge.dosyaYolu);\r\n\r\n      if (!await dosya.exists()) {\r\n        _hataGoster(context, 'Dosya bulunamadı: ${belge.orijinalDosyaAdi}');\r\n        return;\r\n      }\r\n\r\n      final xFile = XFile(belge.dosyaYolu);\r\n\r\n      await Share.shareXFiles([\r\n        xFile,\r\n      ], text: belge.baslik ?? belge.orijinalDosyaAdi);\r\n    } catch (e) {\r\n      _hataGoster(context, 'Dosya paylaşılırken hata oluştu: $e');\r\n    }\r\n  }\r\n\r\n  /// Belgeyi siler (onay dialoguyla)\r\n  Future<void> belgeSil(BelgeModeli belge, BuildContext context) async {\r\n    final onay = await _silmeOnayiAl(\r\n      context,\r\n      belge.baslik ?? belge.orijinalDosyaAdi,\r\n    );\r\n\r\n    if (!onay) return;\r\n\r\n    try {\r\n      // Dosyayı sil\r\n      final dosya = File(belge.dosyaYolu);\r\n      if (await dosya.exists()) {\r\n        await dosya.delete();\r\n      }\r\n\r\n      // Veritabanından sil\r\n      await _veritabaniServisi.belgeSil(belge.id!);\r\n\r\n      _basariGoster(context, 'Belge başarıyla silindi');\r\n    } catch (e) {\r\n      _hataGoster(context, 'Belge silinirken hata oluştu: $e');\r\n    }\r\n  }\r\n\r\n  /// Silme onayı dialogu\r\n  Future<bool> _silmeOnayiAl(BuildContext context, String belgeAdi) async {\r\n    return await showDialog<bool>(\r\n          context: context,\r\n          builder:\r\n              (context) => AlertDialog(\r\n                title: const Text('Belgeyi Sil'),\r\n                content: Text(\r\n                  '$belgeAdi dosyasını silmek istediğinizden emin misiniz?',\r\n                ),\r\n                actions: [\r\n                  TextButton(\r\n                    onPressed: () => Navigator.of(context).pop(false),\r\n                    child: const Text('İptal'),\r\n                  ),\r\n                  TextButton(\r\n                    onPressed: () => Navigator.of(context).pop(true),\r\n                    style: TextButton.styleFrom(foregroundColor: Colors.red),\r\n                    child: const Text('Sil'),\r\n                  ),\r\n                ],\r\n              ),\r\n        ) ??\r\n        false;\r\n  }\r\n\r\n  void _hataGoster(BuildContext context, String mesaj) {\r\n    ScaffoldMessenger.of(context).showSnackBar(\r\n      SnackBar(\r\n        content: Text(mesaj),\r\n        backgroundColor: Colors.red,\r\n        behavior: SnackBarBehavior.fixed,\r\n      ),\r\n    );\r\n  }\r\n\r\n  void _basariGoster(BuildContext context, String mesaj) {\r\n    ScaffoldMessenger.of(context).showSnackBar(\r\n      SnackBar(\r\n        content: Text(mesaj),\r\n        backgroundColor: Colors.green,\r\n        behavior: SnackBarBehavior.fixed,\r\n      ),\r\n    );\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/arsiv_uygulamasi/lib/services/belge_islemleri_servisi.dart b/arsiv_uygulamasi/lib/services/belge_islemleri_servisi.dart
--- a/arsiv_uygulamasi/lib/services/belge_islemleri_servisi.dart	(revision 7f873ead8e12e13125dc4996a90674136efb4f22)
+++ b/arsiv_uygulamasi/lib/services/belge_islemleri_servisi.dart	(date 1751702195152)
@@ -123,4 +123,36 @@
       ),
     );
   }
+
+  Future<int> belgeEkle(BelgeModeli belge) async {
+    final db = await _veritabaniServisi.database;
+
+    // Önce aynı hash'e sahip dosya var mı kontrol et
+    final mevcutBelgeler = await db.query(
+      'belgeler',
+      where: 'dosya_hash = ?',
+      whereArgs: [belge.dosyaHash],
+    );
+
+    if (mevcutBelgeler.isNotEmpty) {
+      // Aynı hash'e sahip dosya zaten var, güncelleme yapalım
+      final mevcutBelge = BelgeModeli.fromMap(mevcutBelgeler.first);
+      print(
+        '⚠️ Aynı hash\'e sahip dosya zaten mevcut: ${mevcutBelge.dosyaAdi}',
+      );
+
+      // Mevcut belgeyi güncelle
+      await db.update(
+        'belgeler',
+        belge.toMap(),
+        where: 'id = ?',
+        whereArgs: [mevcutBelge.id],
+      );
+
+      return mevcutBelge.id!;
+    }
+
+    // Yeni belge ekle
+    return await db.insert('belgeler', belge.toMap());
+  }
 }
Index: arsiv_uygulamasi/lib/models/belge_modeli.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import '../utils/yardimci_fonksiyonlar.dart';\r\n\r\n// Senkronizasyon durumu enum'u\r\nenum SenkronDurumu {\r\n  SENKRONIZE,\r\n  BEKLEMEDE,\r\n  CAKISMA,\r\n  HATA,\r\n  YEREL_DEGISIM,\r\n  UZAK_DEGISIM,\r\n}\r\n\r\n// Belge veri yapısı ve iş mantığı\r\nclass BelgeModeli {\r\n  int? id;\r\n  String dosyaAdi;\r\n  String orijinalDosyaAdi;\r\n  String dosyaYolu;\r\n  int dosyaBoyutu;\r\n  String dosyaTipi;\r\n  String dosyaHash;\r\n  int? kategoriId;\r\n  int? kisiId;\r\n  String? baslik;\r\n  String? aciklama;\r\n  List<String>? etiketler;\r\n  DateTime olusturmaTarihi;\r\n  DateTime guncellemeTarihi;\r\n  DateTime? sonErisimTarihi;\r\n  bool aktif;\r\n  SenkronDurumu senkronDurumu;\r\n\r\n  BelgeModeli({\r\n    this.id,\r\n    required this.dosyaAdi,\r\n    required this.orijinalDosyaAdi,\r\n    required this.dosyaYolu,\r\n    required this.dosyaBoyutu,\r\n    required this.dosyaTipi,\r\n    required this.dosyaHash,\r\n    this.kategoriId,\r\n    this.kisiId,\r\n    this.baslik,\r\n    this.aciklama,\r\n    this.etiketler,\r\n    required this.olusturmaTarihi,\r\n    required this.guncellemeTarihi,\r\n    this.sonErisimTarihi,\r\n    this.aktif = true,\r\n    this.senkronDurumu = SenkronDurumu.YEREL_DEGISIM,\r\n  });\r\n\r\n  // JSON'dan model oluşturma\r\n  factory BelgeModeli.fromJson(Map<String, dynamic> json) {\r\n    return BelgeModeli(\r\n      id: json['id'],\r\n      dosyaAdi: json['dosya_adi'],\r\n      orijinalDosyaAdi: json['orijinal_dosya_adi'],\r\n      dosyaYolu: json['dosya_yolu'],\r\n      dosyaBoyutu: json['dosya_boyutu'],\r\n      dosyaTipi: json['dosya_tipi'],\r\n      dosyaHash: json['dosya_hash'],\r\n      kategoriId: json['kategori_id'],\r\n      kisiId: json['kisi_id'],\r\n      baslik: json['baslik'],\r\n      aciklama: json['aciklama'],\r\n      etiketler:\r\n          json['etiketler'] != null\r\n              ? List<String>.from(json['etiketler'].split(','))\r\n              : null,\r\n      olusturmaTarihi: DateTime.parse(json['olusturma_tarihi']),\r\n      guncellemeTarihi: DateTime.parse(json['guncelleme_tarihi']),\r\n      sonErisimTarihi:\r\n          json['son_erisim_tarihi'] != null\r\n              ? DateTime.parse(json['son_erisim_tarihi'])\r\n              : null,\r\n      aktif: json['aktif'] == 1,\r\n      senkronDurumu: SenkronDurumu.values[json['senkron_durumu'] ?? 0],\r\n    );\r\n  }\r\n\r\n  // Model'den JSON'a dönüştürme\r\n  Map<String, dynamic> toJson() {\r\n    return {\r\n      'id': id,\r\n      'dosya_adi': dosyaAdi,\r\n      'orijinal_dosya_adi': orijinalDosyaAdi,\r\n      'dosya_yolu': dosyaYolu,\r\n      'dosya_boyutu': dosyaBoyutu,\r\n      'dosya_tipi': dosyaTipi,\r\n      'dosya_hash': dosyaHash,\r\n      'kategori_id': kategoriId,\r\n      'kisi_id': kisiId,\r\n      'baslik': baslik,\r\n      'aciklama': aciklama,\r\n      'etiketler': etiketler?.join(','),\r\n      'olusturma_tarihi': olusturmaTarihi.toIso8601String(),\r\n      'guncelleme_tarihi': guncellemeTarihi.toIso8601String(),\r\n      'son_erisim_tarihi': sonErisimTarihi?.toIso8601String(),\r\n      'aktif': aktif ? 1 : 0,\r\n      'senkron_durumu': senkronDurumu.index,\r\n    };\r\n  }\r\n\r\n  // Veritabanı için Map\r\n  Map<String, dynamic> toMap() {\r\n    return {\r\n      'id': id,\r\n      'dosya_adi': dosyaAdi,\r\n      'orijinal_dosya_adi': orijinalDosyaAdi,\r\n      'dosya_yolu': dosyaYolu,\r\n      'dosya_boyutu': dosyaBoyutu,\r\n      'dosya_tipi': dosyaTipi,\r\n      'dosya_hash': dosyaHash,\r\n      'kategori_id': kategoriId,\r\n      'kisi_id': kisiId,\r\n      'baslik': baslik,\r\n      'aciklama': aciklama,\r\n      'etiketler': etiketler?.join(','),\r\n      'olusturma_tarihi': olusturmaTarihi.toIso8601String(),\r\n      'guncelleme_tarihi': guncellemeTarihi.toIso8601String(),\r\n      'son_erisim_tarihi': sonErisimTarihi?.toIso8601String(),\r\n      'aktif': aktif ? 1 : 0,\r\n      'senkron_durumu': senkronDurumu.index,\r\n    };\r\n  }\r\n\r\n  // Map'ten model oluşturma\r\n  factory BelgeModeli.fromMap(Map<String, dynamic> map) {\r\n    return BelgeModeli(\r\n      id: map['id'],\r\n      dosyaAdi: map['dosya_adi'],\r\n      orijinalDosyaAdi: map['orijinal_dosya_adi'],\r\n      dosyaYolu: map['dosya_yolu'],\r\n      dosyaBoyutu: map['dosya_boyutu'],\r\n      dosyaTipi: map['dosya_tipi'],\r\n      dosyaHash: map['dosya_hash'],\r\n      kategoriId: map['kategori_id'],\r\n      kisiId: map['kisi_id'],\r\n      baslik: map['baslik'],\r\n      aciklama: map['aciklama'],\r\n      etiketler:\r\n          map['etiketler'] != null\r\n              ? List<String>.from(map['etiketler'].split(','))\r\n              : null,\r\n      olusturmaTarihi: DateTime.parse(map['olusturma_tarihi']),\r\n      guncellemeTarihi: DateTime.parse(map['guncelleme_tarihi']),\r\n      sonErisimTarihi:\r\n          map['son_erisim_tarihi'] != null\r\n              ? DateTime.parse(map['son_erisim_tarihi'])\r\n              : null,\r\n      aktif: map['aktif'] == 1,\r\n      senkronDurumu: SenkronDurumu.values[map['senkron_durumu'] ?? 0],\r\n    );\r\n  }\r\n\r\n  // Kopyalama metodu\r\n  BelgeModeli copyWith({\r\n    int? id,\r\n    String? dosyaAdi,\r\n    String? orijinalDosyaAdi,\r\n    String? dosyaYolu,\r\n    int? dosyaBoyutu,\r\n    String? dosyaTipi,\r\n    String? dosyaHash,\r\n    int? kategoriId,\r\n    int? kisiId,\r\n    String? baslik,\r\n    String? aciklama,\r\n    List<String>? etiketler,\r\n    DateTime? olusturmaTarihi,\r\n    DateTime? guncellemeTarihi,\r\n    DateTime? sonErisimTarihi,\r\n    bool? aktif,\r\n    SenkronDurumu? senkronDurumu,\r\n  }) {\r\n    return BelgeModeli(\r\n      id: id ?? this.id,\r\n      dosyaAdi: dosyaAdi ?? this.dosyaAdi,\r\n      orijinalDosyaAdi: orijinalDosyaAdi ?? this.orijinalDosyaAdi,\r\n      dosyaYolu: dosyaYolu ?? this.dosyaYolu,\r\n      dosyaBoyutu: dosyaBoyutu ?? this.dosyaBoyutu,\r\n      dosyaTipi: dosyaTipi ?? this.dosyaTipi,\r\n      dosyaHash: dosyaHash ?? this.dosyaHash,\r\n      kategoriId: kategoriId ?? this.kategoriId,\r\n      kisiId: kisiId ?? this.kisiId,\r\n      baslik: baslik ?? this.baslik,\r\n      aciklama: aciklama ?? this.aciklama,\r\n      etiketler: etiketler ?? this.etiketler,\r\n      olusturmaTarihi: olusturmaTarihi ?? this.olusturmaTarihi,\r\n      guncellemeTarihi: guncellemeTarihi ?? this.guncellemeTarihi,\r\n      sonErisimTarihi: sonErisimTarihi ?? this.sonErisimTarihi,\r\n      aktif: aktif ?? this.aktif,\r\n      senkronDurumu: senkronDurumu ?? this.senkronDurumu,\r\n    );\r\n  }\r\n\r\n  // Yardımcı getter'lar\r\n  String get formatliDosyaBoyutu =>\r\n      YardimciFonksiyonlar.dosyaBoyutuFormatla(dosyaBoyutu);\r\n  String get dosyaTipiSimgesi =>\r\n      YardimciFonksiyonlar.dosyaTipiSimgesi(dosyaTipi);\r\n  String get formatliOlusturmaTarihi =>\r\n      YardimciFonksiyonlar.tarihFormatla(olusturmaTarihi);\r\n  String get formatliGuncellemeTarihi =>\r\n      YardimciFonksiyonlar.tarihFormatla(guncellemeTarihi);\r\n  String get zamanFarki => YardimciFonksiyonlar.zamanFarki(guncellemeTarihi);\r\n\r\n  // Hash doğrulama\r\n  static bool hashGecerliMi(String hash) {\r\n    return YardimciFonksiyonlar.hashGecerliMi(hash);\r\n  }\r\n\r\n  // Eşitlik kontrolü\r\n  @override\r\n  bool operator ==(Object other) {\r\n    if (identical(this, other)) return true;\r\n    return other is BelgeModeli && other.dosyaHash == dosyaHash;\r\n  }\r\n\r\n  @override\r\n  int get hashCode => dosyaHash.hashCode;\r\n\r\n  @override\r\n  String toString() {\r\n    return 'BelgeModeli{id: $id, dosyaAdi: $dosyaAdi, dosyaTipi: $dosyaTipi, dosyaBoyutu: $dosyaBoyutu}';\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/arsiv_uygulamasi/lib/models/belge_modeli.dart b/arsiv_uygulamasi/lib/models/belge_modeli.dart
--- a/arsiv_uygulamasi/lib/models/belge_modeli.dart	(revision 7f873ead8e12e13125dc4996a90674136efb4f22)
+++ b/arsiv_uygulamasi/lib/models/belge_modeli.dart	(date 1751701861748)
@@ -30,6 +30,11 @@
   bool aktif;
   SenkronDurumu senkronDurumu;
 
+  // Yeni alanlar - senkronizasyon için
+  int versiyonNumarasi;
+  String? metadataHash;
+  DateTime? sonMetadataGuncelleme;
+
   BelgeModeli({
     this.id,
     required this.dosyaAdi,
@@ -48,6 +53,9 @@
     this.sonErisimTarihi,
     this.aktif = true,
     this.senkronDurumu = SenkronDurumu.YEREL_DEGISIM,
+    this.versiyonNumarasi = 1,
+    this.metadataHash,
+    this.sonMetadataGuncelleme,
   });
 
   // JSON'dan model oluşturma
@@ -76,6 +84,12 @@
               : null,
       aktif: json['aktif'] == 1,
       senkronDurumu: SenkronDurumu.values[json['senkron_durumu'] ?? 0],
+      versiyonNumarasi: json['versiyon_numarasi'] ?? 1,
+      metadataHash: json['metadata_hash'],
+      sonMetadataGuncelleme:
+          json['son_metadata_guncelleme'] != null
+              ? DateTime.parse(json['son_metadata_guncelleme'])
+              : null,
     );
   }
 
@@ -99,6 +113,9 @@
       'son_erisim_tarihi': sonErisimTarihi?.toIso8601String(),
       'aktif': aktif ? 1 : 0,
       'senkron_durumu': senkronDurumu.index,
+      'versiyon_numarasi': versiyonNumarasi,
+      'metadata_hash': metadataHash,
+      'son_metadata_guncelleme': sonMetadataGuncelleme?.toIso8601String(),
     };
   }
 
@@ -122,6 +139,9 @@
       'son_erisim_tarihi': sonErisimTarihi?.toIso8601String(),
       'aktif': aktif ? 1 : 0,
       'senkron_durumu': senkronDurumu.index,
+      'versiyon_numarasi': versiyonNumarasi,
+      'metadata_hash': metadataHash,
+      'son_metadata_guncelleme': sonMetadataGuncelleme?.toIso8601String(),
     };
   }
 
@@ -151,6 +171,12 @@
               : null,
       aktif: map['aktif'] == 1,
       senkronDurumu: SenkronDurumu.values[map['senkron_durumu'] ?? 0],
+      versiyonNumarasi: map['versiyon_numarasi'] ?? 1,
+      metadataHash: map['metadata_hash'],
+      sonMetadataGuncelleme:
+          map['son_metadata_guncelleme'] != null
+              ? DateTime.parse(map['son_metadata_guncelleme'])
+              : null,
     );
   }
 
@@ -173,6 +199,9 @@
     DateTime? sonErisimTarihi,
     bool? aktif,
     SenkronDurumu? senkronDurumu,
+    int? versiyonNumarasi,
+    String? metadataHash,
+    DateTime? sonMetadataGuncelleme,
   }) {
     return BelgeModeli(
       id: id ?? this.id,
@@ -192,6 +221,10 @@
       sonErisimTarihi: sonErisimTarihi ?? this.sonErisimTarihi,
       aktif: aktif ?? this.aktif,
       senkronDurumu: senkronDurumu ?? this.senkronDurumu,
+      versiyonNumarasi: versiyonNumarasi ?? this.versiyonNumarasi,
+      metadataHash: metadataHash ?? this.metadataHash,
+      sonMetadataGuncelleme:
+          sonMetadataGuncelleme ?? this.sonMetadataGuncelleme,
     );
   }
 
Index: arsiv_uygulamasi/lib/utils/sabitler.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Uygulama sabitleri\r\nclass Sabitler {\r\n  // Veritabanı\r\n  static const String VERITABANI_ADI = 'arsiv.db';\r\n  static const int VERITABANI_VERSIYONU = 4;\r\n\r\n  // Dosya yolları\r\n  static const String BELGELER_KLASORU = 'Belgeler';\r\n  static const String GECICI_KLASOR = 'temp';\r\n  static const String YEDEK_KLASOR = 'backup';\r\n\r\n  // Senkronizasyon\r\n  static const int MAKSIMUM_DOSYA_BOYUTU = 100 * 1024 * 1024; // 100MB\r\n  static const int SENKRON_TIMEOUT = 30000; // 30 saniye\r\n  static const int CAKISMA_COZUM_TIMEOUT = 60000; // 1 dakika\r\n\r\n  // Desteklenen dosya tipleri\r\n  static const List<String> DESTEKLENEN_DOSYA_TIPLERI = [\r\n    'pdf',\r\n    'doc',\r\n    'docx',\r\n    'txt',\r\n    'rtf',\r\n    'jpg',\r\n    'jpeg',\r\n    'png',\r\n    'gif',\r\n    'bmp',\r\n    'mp3',\r\n    'wav',\r\n    'mp4',\r\n    'avi',\r\n    'mov',\r\n    'zip',\r\n    'rar',\r\n    '7z',\r\n    'tar',\r\n    'gz',\r\n  ];\r\n\r\n  // USB cihaz kodları\r\n  static const String USB_PERMISSION_ACTION =\r\n      'com.arsiv.uygulamasi.USB_PERMISSION';\r\n  static const String USB_DEVICE_ATTACHED =\r\n      'android.hardware.usb.action.USB_DEVICE_ATTACHED';\r\n  static const String USB_DEVICE_DETACHED =\r\n      'android.hardware.usb.action.USB_DEVICE_DETACHED';\r\n\r\n  // Tema sabitleri\r\n  static const String TEMA_TERCIHI_ANAHTARI = 'tema_tercihi';\r\n  static const String OZEL_TEMA_ANAHTARI = 'ozel_tema';\r\n\r\n  // Log sabitleri\r\n  static const String LOG_DOSYASI = 'arsiv_logs.txt';\r\n  static const int MAKSIMUM_LOG_BOYUTU = 10 * 1024 * 1024; // 10MB\r\n\r\n  // Güncelleme sabitleri\r\n  static const String GUNCELLEME_KONTROL_URL = 'https://api.arsiv.app/version';\r\n  static const String INDIRME_URL_BASE = 'https://releases.arsiv.app/';\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/arsiv_uygulamasi/lib/utils/sabitler.dart b/arsiv_uygulamasi/lib/utils/sabitler.dart
--- a/arsiv_uygulamasi/lib/utils/sabitler.dart	(revision 7f873ead8e12e13125dc4996a90674136efb4f22)
+++ b/arsiv_uygulamasi/lib/utils/sabitler.dart	(date 1751702020267)
@@ -2,7 +2,7 @@
 class Sabitler {
   // Veritabanı
   static const String VERITABANI_ADI = 'arsiv.db';
-  static const int VERITABANI_VERSIYONU = 4;
+  static const int VERITABANI_VERSIYONU = 5;
 
   // Dosya yolları
   static const String BELGELER_KLASORU = 'Belgeler';
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"NONE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"c6750622-ccd4-4189-b7d2-5de5cde3a805\" name=\"Changes\" comment=\"Readme eklendi\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/arsiv_uygulamasi/lib/screens/kategoriler_ekrani.dart\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/arsiv_uygulamasi/lib/screens/kategoriler_ekrani.dart\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/arsiv_uygulamasi/lib/screens/usb_senkron_ekrani.dart\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/arsiv_uygulamasi/lib/screens/usb_senkron_ekrani.dart\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/arsiv_uygulamasi/lib/services/senkron_delta_manager.dart\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/arsiv_uygulamasi/lib/services/senkron_delta_manager.dart\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/arsiv_uygulamasi/lib/services/veritabani_servisi.dart\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/arsiv_uygulamasi/lib/services/veritabani_servisi.dart\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/arsiv_uygulamasi/lib/widgets/kategori_karti_widget.dart\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/arsiv_uygulamasi/lib/widgets/kategori_karti_widget.dart\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ClangdSettings\">\r\n    <option name=\"formatViaClangd\" value=\"false\" />\r\n  </component>\r\n  <component name=\"DartProblemsView\" show-warnings=\"false\" show-hints=\"false\" />\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;mehmet-karataslar&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;git@github.com:mehmet-karataslar/Arsivim.git&quot;,\r\n    &quot;accountId&quot;: &quot;54a39a26-2813-413c-b92c-35dfde88252f&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 3\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2zGgh66Isz8nGVW512mmxbFxMf4\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Flutter.main.dart.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.cidr.known.project.marker\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"RunOnceActivity.readMode.enableVisualFormatting\": \"true\",\r\n    \"cf.first.check.clang-format\": \"false\",\r\n    \"cidr.known.project.marker\": \"true\",\r\n    \"dart.analysis.tool.window.visible\": \"false\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"io.flutter.reload.alreadyRun\": \"true\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/Mehme/Desktop/Projem/Arsivcim/arsiv\",\r\n    \"show.migrate.to.gradle.popup\": \"false\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main.dart\" type=\"FlutterRunConfigurationType\" factoryName=\"Flutter\">\r\n      <option name=\"filePath\" value=\"$PROJECT_DIR$/arsiv_uygulamasi/lib/main.dart\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"c6750622-ccd4-4189-b7d2-5de5cde3a805\" name=\"Changes\" comment=\"\" />\r\n      <created>1751362939337</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1751362939337</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"ilk komit yapıldı\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1751381870442</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1751381870442</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"sistem genel hatlarıyal toplandı\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1751387822204</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1751387822204</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"iconlar eklendi\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1751542933328</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1751542933328</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Readme eklendi\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1751543473907</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1751543473907</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"ilk komit yapıldı\" />\r\n    <MESSAGE value=\"sistem genel hatlarıyal toplandı\" />\r\n    <MESSAGE value=\"iconlar eklendi\" />\r\n    <MESSAGE value=\"Readme eklendi\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Readme eklendi\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 7f873ead8e12e13125dc4996a90674136efb4f22)
+++ b/.idea/workspace.xml	(date 1751702754499)
@@ -6,11 +6,14 @@
   <component name="ChangeListManager">
     <list default="true" id="c6750622-ccd4-4189-b7d2-5de5cde3a805" name="Changes" comment="Readme eklendi">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/arsiv_uygulamasi/lib/screens/kategoriler_ekrani.dart" beforeDir="false" afterPath="$PROJECT_DIR$/arsiv_uygulamasi/lib/screens/kategoriler_ekrani.dart" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/arsiv_uygulamasi/lib/screens/usb_senkron_ekrani.dart" beforeDir="false" afterPath="$PROJECT_DIR$/arsiv_uygulamasi/lib/screens/usb_senkron_ekrani.dart" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/arsiv_uygulamasi/lib/services/senkron_delta_manager.dart" beforeDir="false" afterPath="$PROJECT_DIR$/arsiv_uygulamasi/lib/services/senkron_delta_manager.dart" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/arsiv_uygulamasi/lib/models/belge_modeli.dart" beforeDir="false" afterPath="$PROJECT_DIR$/arsiv_uygulamasi/lib/models/belge_modeli.dart" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/arsiv_uygulamasi/lib/screens/yeni_belge_ekle_ekrani.dart" beforeDir="false" afterPath="$PROJECT_DIR$/arsiv_uygulamasi/lib/screens/yeni_belge_ekle_ekrani.dart" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/arsiv_uygulamasi/lib/services/belge_islemleri_servisi.dart" beforeDir="false" afterPath="$PROJECT_DIR$/arsiv_uygulamasi/lib/services/belge_islemleri_servisi.dart" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/arsiv_uygulamasi/lib/services/senkron_manager_enhanced.dart" beforeDir="false" afterPath="$PROJECT_DIR$/arsiv_uygulamasi/lib/services/senkron_manager_enhanced.dart" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/arsiv_uygulamasi/lib/services/veritabani_servisi.dart" beforeDir="false" afterPath="$PROJECT_DIR$/arsiv_uygulamasi/lib/services/veritabani_servisi.dart" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/arsiv_uygulamasi/lib/widgets/kategori_karti_widget.dart" beforeDir="false" afterPath="$PROJECT_DIR$/arsiv_uygulamasi/lib/widgets/kategori_karti_widget.dart" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/arsiv_uygulamasi/lib/utils/sabitler.dart" beforeDir="false" afterPath="$PROJECT_DIR$/arsiv_uygulamasi/lib/utils/sabitler.dart" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/arsiv_uygulamasi/releases/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/arsiv_uygulamasi/releases/README.md" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -55,7 +58,7 @@
     "cf.first.check.clang-format": "false",
     "cidr.known.project.marker": "true",
     "dart.analysis.tool.window.visible": "false",
-    "git-widget-placeholder": "master",
+    "git-widget-placeholder": "Merging master",
     "io.flutter.reload.alreadyRun": "true",
     "kotlin-language-version-configured": "true",
     "last_opened_file_path": "C:/Users/Mehme/Desktop/Projem/Arsivcim/arsiv",
